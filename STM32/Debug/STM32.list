
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007820  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08007930  08007930  00008930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f18  08007f18  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f20  08007f20  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f20  08007f20  00008f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007f28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  200001d4  080080fc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a9c  080080fc  00009a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2fd  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002847  00000000  00000000  000174fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00019d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be0  00000000  00000000  0001aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d80  00000000  00000000  0001b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001374e  00000000  00000000  00035600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d3f  00000000  00000000  00048d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daa8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005140  00000000  00000000  000daad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000dfc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007918 	.word	0x08007918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007918 	.word	0x08007918

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <MX_ADC1_Init+0x74>)
 8001036:	4a19      	ldr	r2, [pc, #100]	@ (800109c <MX_ADC1_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_ADC1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_ADC1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_ADC1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_ADC1_Init+0x74>)
 800104e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_ADC1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_ADC1_Init+0x74>)
 800105c:	2201      	movs	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001060:	480d      	ldr	r0, [pc, #52]	@ (8001098 <MX_ADC1_Init+0x74>)
 8001062:	f001 f93d 	bl	80022e0 <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 fb00 	bl	8001670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001070:	2305      	movs	r3, #5
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001074:	2301      	movs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_ADC1_Init+0x74>)
 8001082:	f001 fbc5 	bl	8002810 <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800108c:	f000 faf0 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200001f0 	.word	0x200001f0
 800109c:	40012400 	.word	0x40012400

080010a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a14      	ldr	r2, [pc, #80]	@ (800110c <HAL_ADC_MspInit+0x6c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d121      	bne.n	8001104 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <HAL_ADC_MspInit+0x70>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <HAL_ADC_MspInit+0x70>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <HAL_ADC_MspInit+0x70>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <HAL_ADC_MspInit+0x70>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <HAL_ADC_MspInit+0x70>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_ADC_MspInit+0x70>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010f0:	2320      	movs	r3, #32
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_ADC_MspInit+0x74>)
 8001100:	f001 fe28 	bl	8002d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40012400 	.word	0x40012400
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_GPIO_Init+0x58>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a13      	ldr	r2, [pc, #76]	@ (8001170 <MX_GPIO_Init+0x58>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_GPIO_Init+0x58>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_GPIO_Init+0x58>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <MX_GPIO_Init+0x58>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_GPIO_Init+0x58>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_GPIO_Init+0x58>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <MX_GPIO_Init+0x58>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <MX_GPIO_Init+0x58>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000

08001174 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f001 ff53 	bl	800305c <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 fa58 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000220 	.word	0x20000220
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00061a80 	.word	0x00061a80

080011d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <HAL_I2C_MspInit+0x70>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d123      	bne.n	8001238 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001208:	23c0      	movs	r3, #192	@ 0xc0
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120c:	2312      	movs	r3, #18
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <HAL_I2C_MspInit+0x78>)
 800121c:	f001 fd9a 	bl	8002d54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40005400 	.word	0x40005400
 8001244:	40021000 	.word	0x40021000
 8001248:	40010c00 	.word	0x40010c00
 800124c:	00000000 	.word	0x00000000

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f000 ffbd 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f881 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f7ff ff5b 	bl	8001118 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001262:	f7ff fedf 	bl	8001024 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001266:	f7ff ff85 	bl	8001174 <MX_I2C1_Init>
  MX_TIM2_Init();
 800126a:	f000 ff1d 	bl	80020a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 800126e:	2014      	movs	r0, #20
 8001270:	f001 f812 	bl	8002298 <HAL_Delay>
  OLED_Init();
 8001274:	f000 fa2a 	bl	80016cc <OLED_Init>

  //初始化第一帧数据
  for(int i = 0; i < 128; i++){
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	e050      	b.n	8001320 <main+0xd0>
      HAL_ADC_Start(&hadc1);
 800127e:	4832      	ldr	r0, [pc, #200]	@ (8001348 <main+0xf8>)
 8001280:	f001 f906 	bl	8002490 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100);
 8001284:	2164      	movs	r1, #100	@ 0x64
 8001286:	4830      	ldr	r0, [pc, #192]	@ (8001348 <main+0xf8>)
 8001288:	f001 f9b0 	bl	80025ec <HAL_ADC_PollForConversion>
      ADValue = HAL_ADC_GetValue(&hadc1);
 800128c:	482e      	ldr	r0, [pc, #184]	@ (8001348 <main+0xf8>)
 800128e:	f001 fab3 	bl	80027f8 <HAL_ADC_GetValue>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <main+0xfc>)
 8001298:	801a      	strh	r2, [r3, #0]
      Vol[i] = (float)ADValue / 4095 * 3.3;
 800129a:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <main+0xfc>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd18 	bl	8000cd4 <__aeabi_ui2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	492a      	ldr	r1, [pc, #168]	@ (8001350 <main+0x100>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe1f 	bl	8000eec <__aeabi_fdiv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f8b9 	bl	8000428 <__aeabi_f2d>
 80012b6:	a320      	add	r3, pc, #128	@ (adr r3, 8001338 <main+0xe8>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f90c 	bl	80004d8 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fbfe 	bl	8000ac8 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4921      	ldr	r1, [pc, #132]	@ (8001354 <main+0x104>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      OLED_SetPixel(i, 64-Vol[i]*19.09, OLED_COLOR_NORMAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	b2dc      	uxtb	r4, r3
 80012da:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <main+0x104>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f8a0 	bl	8000428 <__aeabi_f2d>
 80012e8:	a315      	add	r3, pc, #84	@ (adr r3, 8001340 <main+0xf0>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f8f3 	bl	80004d8 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	f04f 0000 	mov.w	r0, #0
 80012fa:	4917      	ldr	r1, [pc, #92]	@ (8001358 <main+0x108>)
 80012fc:	f7fe ff34 	bl	8000168 <__aeabi_dsub>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fbbe 	bl	8000a88 <__aeabi_d2uiz>
 800130c:	4603      	mov	r3, r0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2200      	movs	r2, #0
 8001312:	4619      	mov	r1, r3
 8001314:	4620      	mov	r0, r4
 8001316:	f000 fa6f 	bl	80017f8 <OLED_SetPixel>
  for(int i = 0; i < 128; i++){
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b7f      	cmp	r3, #127	@ 0x7f
 8001324:	ddab      	ble.n	800127e <main+0x2e>
  }
  OLED_ShowFrame();
 8001326:	f000 fa33 	bl	8001790 <OLED_ShowFrame>

  HAL_TIM_Base_Start_IT(&htim2);
 800132a:	480c      	ldr	r0, [pc, #48]	@ (800135c <main+0x10c>)
 800132c:	f003 f8fe 	bl	800452c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <main+0xe0>
 8001334:	f3af 8000 	nop.w
 8001338:	66666666 	.word	0x66666666
 800133c:	400a6666 	.word	0x400a6666
 8001340:	3d70a3d7 	.word	0x3d70a3d7
 8001344:	4033170a 	.word	0x4033170a
 8001348:	200001f0 	.word	0x200001f0
 800134c:	20000274 	.word	0x20000274
 8001350:	457ff000 	.word	0x457ff000
 8001354:	20000278 	.word	0x20000278
 8001358:	40500000 	.word	0x40500000
 800135c:	20000904 	.word	0x20000904

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	@ 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800136a:	2228      	movs	r2, #40	@ 0x28
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f004 f9ff 	bl	8005772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001390:	2301      	movs	r3, #1
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 faec 	bl	8003994 <HAL_RCC_OscConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013c2:	f000 f955 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c6:	230f      	movs	r3, #15
 80013c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fd58 	bl	8003e98 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ee:	f000 f93f 	bl	8001670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013f2:	2302      	movs	r3, #2
 80013f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fed8 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800140a:	f000 f931 	bl	8001670 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	@ 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b08b      	sub	sp, #44	@ 0x2c
 800141c:	af02      	add	r7, sp, #8
 800141e:	6078      	str	r0, [r7, #4]
  if(htim == &htim2){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a8b      	ldr	r2, [pc, #556]	@ (8001650 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001424:	4293      	cmp	r3, r2
 8001426:	f040 8102 	bne.w	800162e <HAL_TIM_PeriodElapsedCallback+0x216>
    OLED_NewFrame();  //清空第一帧
 800142a:	f000 f9a5 	bl	8001778 <OLED_NewFrame>
    
    //原数据左移
    for(int i = 0; i < 127; i++){
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e00b      	b.n	800144c <HAL_TIM_PeriodElapsedCallback+0x34>
      Vol[i] = Vol[i+1];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3301      	adds	r3, #1
 8001438:	4a86      	ldr	r2, [pc, #536]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800143a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800143e:	4985      	ldr	r1, [pc, #532]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < 127; i++){
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001450:	ddf0      	ble.n	8001434 <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    
    //收集新来的数据
    HAL_ADC_Start(&hadc1);
 8001452:	4881      	ldr	r0, [pc, #516]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001454:	f001 f81c 	bl	8002490 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8001458:	2164      	movs	r1, #100	@ 0x64
 800145a:	487f      	ldr	r0, [pc, #508]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800145c:	f001 f8c6 	bl	80025ec <HAL_ADC_PollForConversion>
    ADValue = HAL_ADC_GetValue(&hadc1);
 8001460:	487d      	ldr	r0, [pc, #500]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001462:	f001 f9c9 	bl	80027f8 <HAL_ADC_GetValue>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800146c:	801a      	strh	r2, [r3, #0]
    Vol[127] = (float)ADValue / 4095 * 3.3;
 800146e:	4b7b      	ldr	r3, [pc, #492]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc2e 	bl	8000cd4 <__aeabi_ui2f>
 8001478:	4603      	mov	r3, r0
 800147a:	4979      	ldr	r1, [pc, #484]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fd35 	bl	8000eec <__aeabi_fdiv>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffcf 	bl	8000428 <__aeabi_f2d>
 800148a:	a36b      	add	r3, pc, #428	@ (adr r3, 8001638 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f822 	bl	80004d8 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb14 	bl	8000ac8 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014a4:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
    
    //显示电压值
    char voltage_str[16];
    sprintf(voltage_str, "%.2fV", Vol[127]);
 80014a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014aa:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ffba 	bl	8000428 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	f107 0008 	add.w	r0, r7, #8
 80014bc:	4969      	ldr	r1, [pc, #420]	@ (8001664 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80014be:	f004 f8f5 	bl	80056ac <siprintf>
    OLED_PrintASCIIString(0, 0, voltage_str, &afont8x6, OLED_COLOR_NORMAL);
 80014c2:	f107 0208 	add.w	r2, r7, #8
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4b67      	ldr	r3, [pc, #412]	@ (8001668 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 fc93 	bl	8001dfa <OLED_PrintASCIIString>
    
    //绘制所有点和连线
    for(int i = 0; i < 127; i++){
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	e084      	b.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x1cc>
      //如果相邻两点差值较大，直接用线连接两点
      if(fabs(Vol[i] - Vol[i+1]) > 0.1) {
 80014da:	4a5e      	ldr	r2, [pc, #376]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	3301      	adds	r3, #1
 80014e6:	495b      	ldr	r1, [pc, #364]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fb3e 	bl	8000b70 <__aeabi_fsub>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ff94 	bl	8000428 <__aeabi_f2d>
 8001500:	a34f      	add	r3, pc, #316	@ (adr r3, 8001640 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff fa77 	bl	80009f8 <__aeabi_dcmpgt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d044      	beq.n	800159a <HAL_TIM_PeriodElapsedCallback+0x182>
        OLED_DrawLine(i, 64-Vol[i]*19.09, i+1, 64-Vol[i+1]*19.09, OLED_COLOR_NORMAL);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	b2dc      	uxtb	r4, r3
 8001514:	4a4f      	ldr	r2, [pc, #316]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff83 	bl	8000428 <__aeabi_f2d>
 8001522:	a349      	add	r3, pc, #292	@ (adr r3, 8001648 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe ffd6 	bl	80004d8 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	f04f 0000 	mov.w	r0, #0
 8001534:	494d      	ldr	r1, [pc, #308]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001536:	f7fe fe17 	bl	8000168 <__aeabi_dsub>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff faa1 	bl	8000a88 <__aeabi_d2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	b2dd      	uxtb	r5, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	3301      	adds	r3, #1
 8001550:	b2de      	uxtb	r6, r3
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	3301      	adds	r3, #1
 8001556:	4a3f      	ldr	r2, [pc, #252]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff63 	bl	8000428 <__aeabi_f2d>
 8001562:	a339      	add	r3, pc, #228	@ (adr r3, 8001648 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7fe ffb6 	bl	80004d8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	f04f 0000 	mov.w	r0, #0
 8001574:	493d      	ldr	r1, [pc, #244]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001576:	f7fe fdf7 	bl	8000168 <__aeabi_dsub>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fa81 	bl	8000a88 <__aeabi_d2uiz>
 8001586:	4603      	mov	r3, r0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2200      	movs	r2, #0
 800158c:	9200      	str	r2, [sp, #0]
 800158e:	4632      	mov	r2, r6
 8001590:	4629      	mov	r1, r5
 8001592:	4620      	mov	r0, r4
 8001594:	f000 fb16 	bl	8001bc4 <OLED_DrawLine>
 8001598:	e021      	b.n	80015de <HAL_TIM_PeriodElapsedCallback+0x1c6>
      } else {
        OLED_SetPixel(i, 64-Vol[i]*19.09, OLED_COLOR_NORMAL);
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	b2dc      	uxtb	r4, r3
 800159e:	4a2d      	ldr	r2, [pc, #180]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff3e 	bl	8000428 <__aeabi_f2d>
 80015ac:	a326      	add	r3, pc, #152	@ (adr r3, 8001648 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7fe ff91 	bl	80004d8 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	f04f 0000 	mov.w	r0, #0
 80015be:	492b      	ldr	r1, [pc, #172]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015c0:	f7fe fdd2 	bl	8000168 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fa5c 	bl	8000a88 <__aeabi_d2uiz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 f90d 	bl	80017f8 <OLED_SetPixel>
    for(int i = 0; i < 127; i++){
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80015e8:	f77f af77 	ble.w	80014da <HAL_TIM_PeriodElapsedCallback+0xc2>
      }
    }
    OLED_SetPixel(127, 64-Vol[127]*19.09, OLED_COLOR_NORMAL);
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80015ee:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff18 	bl	8000428 <__aeabi_f2d>
 80015f8:	a313      	add	r3, pc, #76	@ (adr r3, 8001648 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe ff6b 	bl	80004d8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	f04f 0000 	mov.w	r0, #0
 800160a:	4918      	ldr	r1, [pc, #96]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800160c:	f7fe fdac 	bl	8000168 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fa36 	bl	8000a88 <__aeabi_d2uiz>
 800161c:	4603      	mov	r3, r0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	207f      	movs	r0, #127	@ 0x7f
 8001626:	f000 f8e7 	bl	80017f8 <OLED_SetPixel>
    
    OLED_ShowFrame();
 800162a:	f000 f8b1 	bl	8001790 <OLED_ShowFrame>
  }
}
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	bf00      	nop
 8001638:	66666666 	.word	0x66666666
 800163c:	400a6666 	.word	0x400a6666
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fb99999 	.word	0x3fb99999
 8001648:	3d70a3d7 	.word	0x3d70a3d7
 800164c:	4033170a 	.word	0x4033170a
 8001650:	20000904 	.word	0x20000904
 8001654:	20000278 	.word	0x20000278
 8001658:	200001f0 	.word	0x200001f0
 800165c:	20000274 	.word	0x20000274
 8001660:	457ff000 	.word	0x457ff000
 8001664:	08007930 	.word	0x08007930
 8001668:	08007b60 	.word	0x08007b60
 800166c:	40500000 	.word	0x40500000

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <Error_Handler+0x8>

0800167c <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	b29b      	uxth	r3, r3
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	217a      	movs	r1, #122	@ 0x7a
 8001696:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <OLED_Send+0x28>)
 8001698:	f001 fe24 	bl	80032e4 <HAL_I2C_Master_Transmit>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000220 	.word	0x20000220

080016a8 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <OLED_SendCmd+0x20>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80016b8:	2102      	movs	r1, #2
 80016ba:	4803      	ldr	r0, [pc, #12]	@ (80016c8 <OLED_SendCmd+0x20>)
 80016bc:	f7ff ffde 	bl	800167c <OLED_Send>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000878 	.word	0x20000878

080016cc <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80016d0:	20ae      	movs	r0, #174	@ 0xae
 80016d2:	f7ff ffe9 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 80016d6:	2002      	movs	r0, #2
 80016d8:	f7ff ffe6 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 80016dc:	2010      	movs	r0, #16
 80016de:	f7ff ffe3 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80016e2:	2040      	movs	r0, #64	@ 0x40
 80016e4:	f7ff ffe0 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80016e8:	20b0      	movs	r0, #176	@ 0xb0
 80016ea:	f7ff ffdd 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 80016ee:	2081      	movs	r0, #129	@ 0x81
 80016f0:	f7ff ffda 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 80016f4:	20cf      	movs	r0, #207	@ 0xcf
 80016f6:	f7ff ffd7 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 80016fa:	20a1      	movs	r0, #161	@ 0xa1
 80016fc:	f7ff ffd4 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 8001700:	20a6      	movs	r0, #166	@ 0xa6
 8001702:	f7ff ffd1 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8001706:	20a8      	movs	r0, #168	@ 0xa8
 8001708:	f7ff ffce 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 800170c:	203f      	movs	r0, #63	@ 0x3f
 800170e:	f7ff ffcb 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 8001712:	20ad      	movs	r0, #173	@ 0xad
 8001714:	f7ff ffc8 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8001718:	208b      	movs	r0, #139	@ 0x8b
 800171a:	f7ff ffc5 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 800171e:	2033      	movs	r0, #51	@ 0x33
 8001720:	f7ff ffc2 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8001724:	20c8      	movs	r0, #200	@ 0xc8
 8001726:	f7ff ffbf 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 800172a:	20d3      	movs	r0, #211	@ 0xd3
 800172c:	f7ff ffbc 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff ffb9 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 8001736:	20d5      	movs	r0, #213	@ 0xd5
 8001738:	f7ff ffb6 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 800173c:	20c0      	movs	r0, #192	@ 0xc0
 800173e:	f7ff ffb3 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 8001742:	20d9      	movs	r0, #217	@ 0xd9
 8001744:	f7ff ffb0 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8001748:	201f      	movs	r0, #31
 800174a:	f7ff ffad 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 800174e:	20da      	movs	r0, #218	@ 0xda
 8001750:	f7ff ffaa 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001754:	2012      	movs	r0, #18
 8001756:	f7ff ffa7 	bl	80016a8 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 800175a:	20db      	movs	r0, #219	@ 0xdb
 800175c:	f7ff ffa4 	bl	80016a8 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8001760:	2040      	movs	r0, #64	@ 0x40
 8001762:	f7ff ffa1 	bl	80016a8 <OLED_SendCmd>

  OLED_NewFrame();
 8001766:	f000 f807 	bl	8001778 <OLED_NewFrame>
  OLED_ShowFrame();
 800176a:	f000 f811 	bl	8001790 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800176e:	20af      	movs	r0, #175	@ 0xaf
 8001770:	f7ff ff9a 	bl	80016a8 <OLED_SendCmd>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 800177c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001780:	2100      	movs	r1, #0
 8001782:	4802      	ldr	r0, [pc, #8]	@ (800178c <OLED_NewFrame+0x14>)
 8001784:	f003 fff5 	bl	8005772 <memset>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000478 	.word	0x20000478

08001790 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <OLED_ShowFrame+0x5c>)
 8001798:	2240      	movs	r2, #64	@ 0x40
 800179a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 800179c:	2300      	movs	r3, #0
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	e01b      	b.n	80017da <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	3b50      	subs	r3, #80	@ 0x50
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff7d 	bl	80016a8 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff ff7a 	bl	80016a8 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80017b4:	2010      	movs	r0, #16
 80017b6:	f7ff ff77 	bl	80016a8 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80017ba:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <OLED_ShowFrame+0x60>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	01db      	lsls	r3, r3, #7
 80017c0:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <OLED_ShowFrame+0x64>)
 80017c2:	4413      	add	r3, r2
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	4619      	mov	r1, r3
 80017c8:	f004 f861 	bl	800588e <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80017cc:	2181      	movs	r1, #129	@ 0x81
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <OLED_ShowFrame+0x5c>)
 80017d0:	f7ff ff54 	bl	800167c <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	3301      	adds	r3, #1
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b07      	cmp	r3, #7
 80017de:	d9e0      	bls.n	80017a2 <OLED_ShowFrame+0x12>
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000087c 	.word	0x2000087c
 80017f0:	2000087d 	.word	0x2000087d
 80017f4:	20000478 	.word	0x20000478

080017f8 <OLED_SetPixel>:
 * @brief 设置一个像素点
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	460b      	mov	r3, r1
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	4613      	mov	r3, r2
 8001808:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db43      	blt.n	800189a <OLED_SetPixel+0xa2>
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b3f      	cmp	r3, #63	@ 0x3f
 8001816:	d840      	bhi.n	800189a <OLED_SetPixel+0xa2>
  if (!color) {
 8001818:	797b      	ldrb	r3, [r7, #5]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d11d      	bne.n	800185a <OLED_SetPixel+0x62>
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	b2d8      	uxtb	r0, r3
 8001824:	4602      	mov	r2, r0
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	491e      	ldr	r1, [pc, #120]	@ (80018a4 <OLED_SetPixel+0xac>)
 800182a:	01d2      	lsls	r2, r2, #7
 800182c:	440a      	add	r2, r1
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b25a      	sxtb	r2, r3
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	b25b      	sxtb	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b259      	sxtb	r1, r3
 8001846:	4602      	mov	r2, r0
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	b2c8      	uxtb	r0, r1
 800184c:	4915      	ldr	r1, [pc, #84]	@ (80018a4 <OLED_SetPixel+0xac>)
 800184e:	01d2      	lsls	r2, r2, #7
 8001850:	440a      	add	r2, r1
 8001852:	4413      	add	r3, r2
 8001854:	4602      	mov	r2, r0
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e020      	b.n	800189c <OLED_SetPixel+0xa4>
  } else {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	b2d8      	uxtb	r0, r3
 8001860:	4602      	mov	r2, r0
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	490f      	ldr	r1, [pc, #60]	@ (80018a4 <OLED_SetPixel+0xac>)
 8001866:	01d2      	lsls	r2, r2, #7
 8001868:	440a      	add	r2, r1
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25a      	sxtb	r2, r3
 8001870:	79bb      	ldrb	r3, [r7, #6]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	b25b      	sxtb	r3, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	b25b      	sxtb	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	b259      	sxtb	r1, r3
 8001886:	4602      	mov	r2, r0
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	b2c8      	uxtb	r0, r1
 800188c:	4905      	ldr	r1, [pc, #20]	@ (80018a4 <OLED_SetPixel+0xac>)
 800188e:	01d2      	lsls	r2, r2, #7
 8001890:	440a      	add	r2, r1
 8001892:	4413      	add	r3, r2
 8001894:	4602      	mov	r2, r0
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	e000      	b.n	800189c <OLED_SetPixel+0xa4>
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 800189a:	bf00      	nop
  }
}
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000478 	.word	0x20000478

080018a8 <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 80018a8:	b490      	push	{r4, r7}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	4603      	mov	r3, r0
 80018bc:	71bb      	strb	r3, [r7, #6]
 80018be:	460b      	mov	r3, r1
 80018c0:	717b      	strb	r3, [r7, #5]
 80018c2:	4613      	mov	r3, r2
 80018c4:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b07      	cmp	r3, #7
 80018ca:	d860      	bhi.n	800198e <OLED_SetByte_Fine+0xe6>
 80018cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db5c      	blt.n	800198e <OLED_SetByte_Fine+0xe6>
  if (color) data = ~data;
 80018d4:	7d3b      	ldrb	r3, [r7, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <OLED_SetByte_Fine+0x38>
 80018da:	797b      	ldrb	r3, [r7, #5]
 80018dc:	43db      	mvns	r3, r3
 80018de:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80018e0:	7c3b      	ldrb	r3, [r7, #16]
 80018e2:	3301      	adds	r3, #1
 80018e4:	22ff      	movs	r2, #255	@ 0xff
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	b25a      	sxtb	r2, r3
 80018ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	793b      	ldrb	r3, [r7, #4]
 80018f6:	f1c3 0308 	rsb	r3, r3, #8
 80018fa:	21ff      	movs	r1, #255	@ 0xff
 80018fc:	fa41 f303 	asr.w	r3, r1, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b25b      	sxtb	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <OLED_SetByte_Fine+0xf0>)
 800190a:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	4922      	ldr	r1, [pc, #136]	@ (800199c <OLED_SetByte_Fine+0xf4>)
 8001912:	01d2      	lsls	r2, r2, #7
 8001914:	440a      	add	r2, r1
 8001916:	4413      	add	r3, r2
 8001918:	7818      	ldrb	r0, [r3, #0]
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <OLED_SetByte_Fine+0xf0>)
 800191c:	7819      	ldrb	r1, [r3, #0]
 800191e:	79fa      	ldrb	r2, [r7, #7]
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	4001      	ands	r1, r0
 8001924:	b2c8      	uxtb	r0, r1
 8001926:	491d      	ldr	r1, [pc, #116]	@ (800199c <OLED_SetByte_Fine+0xf4>)
 8001928:	01d2      	lsls	r2, r2, #7
 800192a:	440a      	add	r2, r1
 800192c:	4413      	add	r3, r2
 800192e:	4602      	mov	r2, r0
 8001930:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001932:	7c3b      	ldrb	r3, [r7, #16]
 8001934:	3301      	adds	r3, #1
 8001936:	22ff      	movs	r2, #255	@ 0xff
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	b25b      	sxtb	r3, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	b25a      	sxtb	r2, r3
 8001942:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001946:	4013      	ands	r3, r2
 8001948:	b25a      	sxtb	r2, r3
 800194a:	793b      	ldrb	r3, [r7, #4]
 800194c:	f1c3 0308 	rsb	r3, r3, #8
 8001950:	21ff      	movs	r1, #255	@ 0xff
 8001952:	fa41 f303 	asr.w	r3, r1, r3
 8001956:	b25b      	sxtb	r3, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	b25b      	sxtb	r3, r3
 800195c:	4013      	ands	r3, r2
 800195e:	b25b      	sxtb	r3, r3
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <OLED_SetByte_Fine+0xf0>)
 8001964:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	490c      	ldr	r1, [pc, #48]	@ (800199c <OLED_SetByte_Fine+0xf4>)
 800196c:	01d2      	lsls	r2, r2, #7
 800196e:	440a      	add	r2, r1
 8001970:	4413      	add	r3, r2
 8001972:	7818      	ldrb	r0, [r3, #0]
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <OLED_SetByte_Fine+0xf0>)
 8001976:	7819      	ldrb	r1, [r3, #0]
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	4301      	orrs	r1, r0
 800197e:	b2c8      	uxtb	r0, r1
 8001980:	4906      	ldr	r1, [pc, #24]	@ (800199c <OLED_SetByte_Fine+0xf4>)
 8001982:	01d2      	lsls	r2, r2, #7
 8001984:	440a      	add	r2, r1
 8001986:	4413      	add	r3, r2
 8001988:	4602      	mov	r2, r0
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	e000      	b.n	8001990 <OLED_SetByte_Fine+0xe8>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 800198e:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bc90      	pop	{r4, r7}
 8001996:	4770      	bx	lr
 8001998:	200008fd 	.word	0x200008fd
 800199c:	20000478 	.word	0x20000478

080019a0 <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	4604      	mov	r4, r0
 80019a8:	4608      	mov	r0, r1
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	4603      	mov	r3, r0
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	460b      	mov	r3, r1
 80019b8:	717b      	strb	r3, [r7, #5]
 80019ba:	4613      	mov	r3, r2
 80019bc:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80019be:	79bb      	ldrb	r3, [r7, #6]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 80019cc:	7bba      	ldrb	r2, [r7, #14]
 80019ce:	793b      	ldrb	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	dd29      	ble.n	8001a2a <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80019d6:	797a      	ldrb	r2, [r7, #5]
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	7bbc      	ldrb	r4, [r7, #14]
 80019e2:	79f9      	ldrb	r1, [r7, #7]
 80019e4:	7bf8      	ldrb	r0, [r7, #15]
 80019e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2307      	movs	r3, #7
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4623      	mov	r3, r4
 80019f2:	f7ff ff59 	bl	80018a8 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2d8      	uxtb	r0, r3
 80019fc:	797a      	ldrb	r2, [r7, #5]
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	f1c3 0308 	rsb	r3, r3, #8
 8001a04:	fa42 f303 	asr.w	r3, r2, r3
 8001a08:	b2dc      	uxtb	r4, r3
 8001a0a:	793a      	ldrb	r2, [r7, #4]
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3b09      	subs	r3, #9
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	79f9      	ldrb	r1, [r7, #7]
 8001a18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a1c:	9201      	str	r2, [sp, #4]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2300      	movs	r3, #0
 8001a22:	4622      	mov	r2, r4
 8001a24:	f7ff ff40 	bl	80018a8 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001a28:	e015      	b.n	8001a56 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001a2a:	797a      	ldrb	r2, [r7, #5]
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	b2dc      	uxtb	r4, r3
 8001a34:	7bba      	ldrb	r2, [r7, #14]
 8001a36:	793b      	ldrb	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	7bbd      	ldrb	r5, [r7, #14]
 8001a42:	79f9      	ldrb	r1, [r7, #7]
 8001a44:	7bf8      	ldrb	r0, [r7, #15]
 8001a46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	462b      	mov	r3, r5
 8001a50:	4622      	mov	r2, r4
 8001a52:	f7ff ff29 	bl	80018a8 <OLED_SetByte_Fine>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bdb0      	pop	{r4, r5, r7, pc}

08001a5e <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 8001a5e:	b590      	push	{r4, r7, lr}
 8001a60:	b087      	sub	sp, #28
 8001a62:	af02      	add	r7, sp, #8
 8001a64:	4604      	mov	r4, r0
 8001a66:	4608      	mov	r0, r1
 8001a68:	4611      	mov	r1, r2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	4603      	mov	r3, r0
 8001a72:	71bb      	strb	r3, [r7, #6]
 8001a74:	460b      	mov	r3, r1
 8001a76:	717b      	strb	r3, [r7, #5]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001a8a:	797a      	ldrb	r2, [r7, #5]
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	7bbc      	ldrb	r4, [r7, #14]
 8001a96:	79f9      	ldrb	r1, [r7, #7]
 8001a98:	7bf8      	ldrb	r0, [r7, #15]
 8001a9a:	793b      	ldrb	r3, [r7, #4]
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	f7ff ff00 	bl	80018a8 <OLED_SetByte_Fine>
  if (bit) {
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d014      	beq.n	8001ad8 <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2d8      	uxtb	r0, r3
 8001ab4:	797a      	ldrb	r2, [r7, #5]
 8001ab6:	7bbb      	ldrb	r3, [r7, #14]
 8001ab8:	f1c3 0308 	rsb	r3, r3, #8
 8001abc:	fa42 f303 	asr.w	r3, r2, r3
 8001ac0:	b2dc      	uxtb	r4, r3
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	79f9      	ldrb	r1, [r7, #7]
 8001aca:	793a      	ldrb	r2, [r7, #4]
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	f7ff fee8 	bl	80018a8 <OLED_SetByte_Fine>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	603a      	str	r2, [r7, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	460b      	mov	r3, r1
 8001af0:	71bb      	strb	r3, [r7, #6]
 8001af2:	4613      	mov	r3, r2
 8001af4:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001af6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afa:	08db      	lsrs	r3, r3, #3
 8001afc:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001afe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e025      	b.n	8001b5a <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]
 8001b12:	e01b      	b.n	8001b4c <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2d8      	uxtb	r0, r3
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	79bb      	ldrb	r3, [r7, #6]
 8001b24:	4413      	add	r3, r2
 8001b26:	b2dc      	uxtb	r4, r3
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	7bbb      	ldrb	r3, [r7, #14]
 8001b2c:	7979      	ldrb	r1, [r7, #5]
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b40:	4621      	mov	r1, r4
 8001b42:	f7ff ff8c 	bl	8001a5e <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	73bb      	strb	r3, [r7, #14]
 8001b4c:	7bba      	ldrb	r2, [r7, #14]
 8001b4e:	7b3b      	ldrb	r3, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3df      	bcc.n	8001b14 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	3301      	adds	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3d5      	bcc.n	8001b0e <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 8001b62:	7afb      	ldrb	r3, [r7, #11]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d028      	beq.n	8001bba <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	7b3a      	ldrb	r2, [r7, #12]
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	737b      	strb	r3, [r7, #13]
 8001b7a:	e01a      	b.n	8001bb2 <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	7b7b      	ldrb	r3, [r7, #13]
 8001b80:	4413      	add	r3, r2
 8001b82:	b2d8      	uxtb	r0, r3
 8001b84:	7b3b      	ldrb	r3, [r7, #12]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2d9      	uxtb	r1, r3
 8001b90:	893a      	ldrh	r2, [r7, #8]
 8001b92:	7b7b      	ldrb	r3, [r7, #13]
 8001b94:	4413      	add	r3, r2
 8001b96:	461a      	mov	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	7afc      	ldrb	r4, [r7, #11]
 8001ba0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	f7ff fefa 	bl	80019a0 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	737b      	strb	r3, [r7, #13]
 8001bb2:	7b7a      	ldrb	r2, [r7, #13]
 8001bb4:	797b      	ldrb	r3, [r7, #5]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3e0      	bcc.n	8001b7c <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
	...

08001bc4 <OLED_DrawLine>:
 * @param x2 终止点横坐标
 * @param y2 终止点纵坐标
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制线段
 */
void OLED_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, OLED_ColorMode color) {
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4604      	mov	r4, r0
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	71fb      	strb	r3, [r7, #7]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71bb      	strb	r3, [r7, #6]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	717b      	strb	r3, [r7, #5]
 8001bde:	4613      	mov	r3, r2
 8001be0:	713b      	strb	r3, [r7, #4]
  static uint8_t temp = 0;
  if (x1 == x2) {
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	797b      	ldrb	r3, [r7, #5]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11d      	bne.n	8001c26 <OLED_DrawLine+0x62>
    if (y1 > y2) {
 8001bea:	79ba      	ldrb	r2, [r7, #6]
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d907      	bls.n	8001c02 <OLED_DrawLine+0x3e>
      temp = y1;
 8001bf2:	4a69      	ldr	r2, [pc, #420]	@ (8001d98 <OLED_DrawLine+0x1d4>)
 8001bf4:	79bb      	ldrb	r3, [r7, #6]
 8001bf6:	7013      	strb	r3, [r2, #0]
      y1 = y2;
 8001bf8:	793b      	ldrb	r3, [r7, #4]
 8001bfa:	71bb      	strb	r3, [r7, #6]
      y2 = temp;
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <OLED_DrawLine+0x1d4>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	713b      	strb	r3, [r7, #4]
    }
    for (uint8_t y = y1; y <= y2; y++) {
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	75fb      	strb	r3, [r7, #23]
 8001c06:	e009      	b.n	8001c1c <OLED_DrawLine+0x58>
      OLED_SetPixel(x1, y, color);
 8001c08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001c0c:	7df9      	ldrb	r1, [r7, #23]
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fdf1 	bl	80017f8 <OLED_SetPixel>
    for (uint8_t y = y1; y <= y2; y++) {
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	75fb      	strb	r3, [r7, #23]
 8001c1c:	7dfa      	ldrb	r2, [r7, #23]
 8001c1e:	793b      	ldrb	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d9f1      	bls.n	8001c08 <OLED_DrawLine+0x44>
          eps -= dy;
        }
      }
    }
  }
}
 8001c24:	e0b4      	b.n	8001d90 <OLED_DrawLine+0x1cc>
  } else if (y1 == y2) {
 8001c26:	79ba      	ldrb	r2, [r7, #6]
 8001c28:	793b      	ldrb	r3, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11d      	bne.n	8001c6a <OLED_DrawLine+0xa6>
    if (x1 > x2) {
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d907      	bls.n	8001c46 <OLED_DrawLine+0x82>
      temp = x1;
 8001c36:	4a58      	ldr	r2, [pc, #352]	@ (8001d98 <OLED_DrawLine+0x1d4>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	7013      	strb	r3, [r2, #0]
      x1 = x2;
 8001c3c:	797b      	ldrb	r3, [r7, #5]
 8001c3e:	71fb      	strb	r3, [r7, #7]
      x2 = temp;
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <OLED_DrawLine+0x1d4>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	717b      	strb	r3, [r7, #5]
    for (uint8_t x = x1; x <= x2; x++) {
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	75bb      	strb	r3, [r7, #22]
 8001c4a:	e009      	b.n	8001c60 <OLED_DrawLine+0x9c>
      OLED_SetPixel(x, y1, color);
 8001c4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001c50:	79b9      	ldrb	r1, [r7, #6]
 8001c52:	7dbb      	ldrb	r3, [r7, #22]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fdcf 	bl	80017f8 <OLED_SetPixel>
    for (uint8_t x = x1; x <= x2; x++) {
 8001c5a:	7dbb      	ldrb	r3, [r7, #22]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	75bb      	strb	r3, [r7, #22]
 8001c60:	7dba      	ldrb	r2, [r7, #22]
 8001c62:	797b      	ldrb	r3, [r7, #5]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d9f1      	bls.n	8001c4c <OLED_DrawLine+0x88>
}
 8001c68:	e092      	b.n	8001d90 <OLED_DrawLine+0x1cc>
    int16_t dx = x2 - x1;
 8001c6a:	797b      	ldrb	r3, [r7, #5]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	81fb      	strh	r3, [r7, #14]
    int16_t dy = y2 - y1;
 8001c78:	793b      	ldrb	r3, [r7, #4]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	81bb      	strh	r3, [r7, #12]
    int16_t ux = ((dx > 0) << 1) - 1;
 8001c86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	dd01      	ble.n	8001c92 <OLED_DrawLine+0xce>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e001      	b.n	8001c96 <OLED_DrawLine+0xd2>
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	817b      	strh	r3, [r7, #10]
    int16_t uy = ((dy > 0) << 1) - 1;
 8001c98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dd01      	ble.n	8001ca4 <OLED_DrawLine+0xe0>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e001      	b.n	8001ca8 <OLED_DrawLine+0xe4>
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	813b      	strh	r3, [r7, #8]
    int16_t x = x1, y = y1, eps = 0;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	82bb      	strh	r3, [r7, #20]
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	827b      	strh	r3, [r7, #18]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	823b      	strh	r3, [r7, #16]
    dx = abs(dx);
 8001cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bfb8      	it	lt
 8001cbe:	425b      	neglt	r3, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	81fb      	strh	r3, [r7, #14]
    dy = abs(dy);
 8001cc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bfb8      	it	lt
 8001ccc:	425b      	neglt	r3, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	81bb      	strh	r3, [r7, #12]
    if (dx > dy) {
 8001cd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dd2c      	ble.n	8001d38 <OLED_DrawLine+0x174>
      for (x = x1; x != x2; x += ux) {
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	82bb      	strh	r3, [r7, #20]
 8001ce2:	e023      	b.n	8001d2c <OLED_DrawLine+0x168>
        OLED_SetPixel(x, y, color);
 8001ce4:	8abb      	ldrh	r3, [r7, #20]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	8a7a      	ldrh	r2, [r7, #18]
 8001cea:	b2d1      	uxtb	r1, r2
 8001cec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fd81 	bl	80017f8 <OLED_SetPixel>
        eps += dy;
 8001cf6:	8a3a      	ldrh	r2, [r7, #16]
 8001cf8:	89bb      	ldrh	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	823b      	strh	r3, [r7, #16]
        if ((eps << 1) >= dx) {
 8001d00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d04:	005a      	lsls	r2, r3, #1
 8001d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	db09      	blt.n	8001d22 <OLED_DrawLine+0x15e>
          y += uy;
 8001d0e:	8a7a      	ldrh	r2, [r7, #18]
 8001d10:	893b      	ldrh	r3, [r7, #8]
 8001d12:	4413      	add	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	827b      	strh	r3, [r7, #18]
          eps -= dx;
 8001d18:	8a3a      	ldrh	r2, [r7, #16]
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	823b      	strh	r3, [r7, #16]
      for (x = x1; x != x2; x += ux) {
 8001d22:	8aba      	ldrh	r2, [r7, #20]
 8001d24:	897b      	ldrh	r3, [r7, #10]
 8001d26:	4413      	add	r3, r2
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	82bb      	strh	r3, [r7, #20]
 8001d2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d1d6      	bne.n	8001ce4 <OLED_DrawLine+0x120>
}
 8001d36:	e02b      	b.n	8001d90 <OLED_DrawLine+0x1cc>
      for (y = y1; y != y2; y += uy) {
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	827b      	strh	r3, [r7, #18]
 8001d3c:	e023      	b.n	8001d86 <OLED_DrawLine+0x1c2>
        OLED_SetPixel(x, y, color);
 8001d3e:	8abb      	ldrh	r3, [r7, #20]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	8a7a      	ldrh	r2, [r7, #18]
 8001d44:	b2d1      	uxtb	r1, r2
 8001d46:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fd54 	bl	80017f8 <OLED_SetPixel>
        eps += dx;
 8001d50:	8a3a      	ldrh	r2, [r7, #16]
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	4413      	add	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	823b      	strh	r3, [r7, #16]
        if ((eps << 1) >= dy) {
 8001d5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d5e:	005a      	lsls	r2, r3, #1
 8001d60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	db09      	blt.n	8001d7c <OLED_DrawLine+0x1b8>
          x += ux;
 8001d68:	8aba      	ldrh	r2, [r7, #20]
 8001d6a:	897b      	ldrh	r3, [r7, #10]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	82bb      	strh	r3, [r7, #20]
          eps -= dy;
 8001d72:	8a3a      	ldrh	r2, [r7, #16]
 8001d74:	89bb      	ldrh	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	823b      	strh	r3, [r7, #16]
      for (y = y1; y != y2; y += uy) {
 8001d7c:	8a7a      	ldrh	r2, [r7, #18]
 8001d7e:	893b      	ldrh	r3, [r7, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	827b      	strh	r3, [r7, #18]
 8001d86:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d8a:	793b      	ldrb	r3, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1d6      	bne.n	8001d3e <OLED_DrawLine+0x17a>
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	200008fe 	.word	0x200008fe

08001d9c <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	460b      	mov	r3, r1
 8001daa:	71bb      	strb	r3, [r7, #6]
 8001dac:	4613      	mov	r3, r2
 8001dae:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	797b      	ldrb	r3, [r7, #5]
 8001db6:	f1a3 0120 	sub.w	r1, r3, #32
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	3307      	adds	r3, #7
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da00      	bge.n	8001dc6 <OLED_PrintASCIIChar+0x2a>
 8001dc4:	3307      	adds	r3, #7
 8001dc6:	10db      	asrs	r3, r3, #3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	785b      	ldrb	r3, [r3, #1]
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	18d4      	adds	r4, r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	785d      	ldrb	r5, [r3, #1]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	79b9      	ldrb	r1, [r7, #6]
 8001de2:	79f8      	ldrb	r0, [r7, #7]
 8001de4:	7e3a      	ldrb	r2, [r7, #24]
 8001de6:	9201      	str	r2, [sp, #4]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	462b      	mov	r3, r5
 8001dec:	4622      	mov	r2, r4
 8001dee:	f7ff fe77 	bl	8001ae0 <OLED_SetBlock>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}

08001dfa <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b088      	sub	sp, #32
 8001dfe:	af02      	add	r7, sp, #8
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 8001e10:	e011      	b.n	8001e36 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	7bb9      	ldrb	r1, [r7, #14]
 8001e18:	7df8      	ldrb	r0, [r7, #23]
 8001e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f7ff ffbb 	bl	8001d9c <OLED_PrintASCIIChar>
    x0 += font->w;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	785a      	ldrb	r2, [r3, #1]
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	75fb      	strb	r3, [r7, #23]
    str++;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1e9      	bne.n	8001e12 <OLED_PrintASCIIString+0x18>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_MspInit+0x5c>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	4a14      	ldr	r2, [pc, #80]	@ (8001ea4 <HAL_MspInit+0x5c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6193      	str	r3, [r2, #24]
 8001e5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_MspInit+0x5c>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <HAL_MspInit+0x5c>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea4 <HAL_MspInit+0x5c>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_MspInit+0x5c>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_MspInit+0x60>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <HAL_MspInit+0x60>)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efc:	f000 f9b0 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <TIM2_IRQHandler+0x10>)
 8001f0a:	f002 fb61 	bl	80045d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000904 	.word	0x20000904

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <_kill>:

int _kill(int pid, int sig)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f30:	f003 fc72 	bl	8005818 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2216      	movs	r2, #22
 8001f38:	601a      	str	r2, [r3, #0]
  return -1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_exit>:

void _exit (int status)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffe7 	bl	8001f26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <_exit+0x12>

08001f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00a      	b.n	8001f84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f6e:	f3af 8000 	nop.w
 8001f72:	4601      	mov	r1, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf0      	blt.n	8001f6e <_read+0x12>
  }

  return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e009      	b.n	8001fbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf1      	blt.n	8001fa8 <_write+0x12>
  }
  return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_close>:

int _close(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <_isatty>:

int _isatty(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
	...

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f003 fbda 	bl	8005818 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20005000 	.word	0x20005000
 8002090:	00000400 	.word	0x00000400
 8002094:	20000900 	.word	0x20000900
 8002098:	20000aa0 	.word	0x20000aa0

0800209c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	463b      	mov	r3, r7
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020c4:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <MX_TIM2_Init+0x94>)
 80020c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <MX_TIM2_Init+0x94>)
 80020ce:	2247      	movs	r2, #71	@ 0x47
 80020d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d2:	4b1a      	ldr	r3, [pc, #104]	@ (800213c <MX_TIM2_Init+0x94>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <MX_TIM2_Init+0x94>)
 80020da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e0:	4b16      	ldr	r3, [pc, #88]	@ (800213c <MX_TIM2_Init+0x94>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <MX_TIM2_Init+0x94>)
 80020e8:	2280      	movs	r2, #128	@ 0x80
 80020ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020ec:	4813      	ldr	r0, [pc, #76]	@ (800213c <MX_TIM2_Init+0x94>)
 80020ee:	f002 f9cd 	bl	800448c <HAL_TIM_Base_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020f8:	f7ff faba 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	4619      	mov	r1, r3
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <MX_TIM2_Init+0x94>)
 800210a:	f002 fb51 	bl	80047b0 <HAL_TIM_ConfigClockSource>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002114:	f7ff faac 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002120:	463b      	mov	r3, r7
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	@ (800213c <MX_TIM2_Init+0x94>)
 8002126:	f002 fd33 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002130:	f7ff fa9e 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000904 	.word	0x20000904

08002140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002150:	d113      	bne.n	800217a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <HAL_TIM_Base_MspInit+0x44>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a0b      	ldr	r2, [pc, #44]	@ (8002184 <HAL_TIM_Base_MspInit+0x44>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_TIM_Base_MspInit+0x44>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	201c      	movs	r0, #28
 8002170:	f000 fdb9 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002174:	201c      	movs	r0, #28
 8002176:	f000 fdd2 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000

08002188 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002188:	f7ff ff88 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800218c:	480b      	ldr	r0, [pc, #44]	@ (80021bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800218e:	490c      	ldr	r1, [pc, #48]	@ (80021c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002190:	4a0c      	ldr	r2, [pc, #48]	@ (80021c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021a4:	4c09      	ldr	r4, [pc, #36]	@ (80021cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b2:	f003 fb37 	bl	8005824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b6:	f7ff f84b 	bl	8001250 <main>
  bx lr
 80021ba:	4770      	bx	lr
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021c4:	08007f28 	.word	0x08007f28
  ldr r2, =_sbss
 80021c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021cc:	20000a9c 	.word	0x20000a9c

080021d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC1_2_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <HAL_Init+0x28>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a07      	ldr	r2, [pc, #28]	@ (80021fc <HAL_Init+0x28>)
 80021de:	f043 0310 	orr.w	r3, r3, #16
 80021e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f000 fd73 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ea:	200f      	movs	r0, #15
 80021ec:	f000 f808 	bl	8002200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f0:	f7ff fe2a 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40022000 	.word	0x40022000

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_InitTick+0x54>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_InitTick+0x58>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002216:	fbb3 f3f1 	udiv	r3, r3, r1
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fd8b 	bl	8002d3a <HAL_SYSTICK_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e00e      	b.n	800224c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d80a      	bhi.n	800224a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f000 fd53 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002240:	4a06      	ldr	r2, [pc, #24]	@ (800225c <HAL_InitTick+0x5c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000000 	.word	0x20000000
 8002258:	20000008 	.word	0x20000008
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_IncTick+0x1c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_IncTick+0x20>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a03      	ldr	r2, [pc, #12]	@ (8002280 <HAL_IncTick+0x20>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000008 	.word	0x20000008
 8002280:	2000094c 	.word	0x2000094c

08002284 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b02      	ldr	r3, [pc, #8]	@ (8002294 <HAL_GetTick+0x10>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	2000094c 	.word	0x2000094c

08002298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff fff0 	bl	8002284 <HAL_GetTick>
 80022a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d005      	beq.n	80022be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_Delay+0x44>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022be:	bf00      	nop
 80022c0:	f7ff ffe0 	bl	8002284 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d8f7      	bhi.n	80022c0 <HAL_Delay+0x28>
  {
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000008 	.word	0x20000008

080022e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0be      	b.n	8002480 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe febe 	bl	80010a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fbc5 	bl	8002ab4 <ADC_ConversionStop_Disable>
 800232a:	4603      	mov	r3, r0
 800232c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 8099 	bne.w	800246e <HAL_ADC_Init+0x18e>
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 8095 	bne.w	800246e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800234c:	f023 0302 	bic.w	r3, r3, #2
 8002350:	f043 0202 	orr.w	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002360:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7b1b      	ldrb	r3, [r3, #12]
 8002366:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002368:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	4313      	orrs	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002378:	d003      	beq.n	8002382 <HAL_ADC_Init+0xa2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_ADC_Init+0xa8>
 8002382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002386:	e000      	b.n	800238a <HAL_ADC_Init+0xaa>
 8002388:	2300      	movs	r3, #0
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7d1b      	ldrb	r3, [r3, #20]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d119      	bne.n	80023cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7b1b      	ldrb	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	035a      	lsls	r2, r3, #13
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e00b      	b.n	80023cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <HAL_ADC_Init+0x1a8>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023fc:	d003      	beq.n	8002406 <HAL_ADC_Init+0x126>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d104      	bne.n	8002410 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	3b01      	subs	r3, #1
 800240c:	051b      	lsls	r3, r3, #20
 800240e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	430a      	orrs	r2, r1
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	4b18      	ldr	r3, [pc, #96]	@ (800248c <HAL_ADC_Init+0x1ac>)
 800242c:	4013      	ands	r3, r2
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	d10b      	bne.n	800244c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800244a:	e018      	b.n	800247e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f023 0312 	bic.w	r3, r3, #18
 8002454:	f043 0210 	orr.w	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800246c:	e007      	b.n	800247e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800247e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	ffe1f7fd 	.word	0xffe1f7fd
 800248c:	ff1f0efe 	.word	0xff1f0efe

08002490 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Start+0x1a>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e098      	b.n	80025dc <HAL_ADC_Start+0x14c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 faa4 	bl	8002a00 <ADC_Enable>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 8087 	bne.w	80025d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a41      	ldr	r2, [pc, #260]	@ (80025e4 <HAL_ADC_Start+0x154>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_Start+0x5e>
 80024e2:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <HAL_ADC_Start+0x158>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d026      	beq.n	8002556 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002510:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002518:	e01d      	b.n	8002556 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_ADC_Start+0x158>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_ADC_Start+0xaa>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2b      	ldr	r2, [pc, #172]	@ (80025e4 <HAL_ADC_Start+0x154>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10d      	bne.n	8002556 <HAL_ADC_Start+0xc6>
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_ADC_Start+0x158>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800254e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	f023 0206 	bic.w	r2, r3, #6
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800256e:	e002      	b.n	8002576 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0202 	mvn.w	r2, #2
 8002586:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002592:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002596:	d113      	bne.n	80025c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800259c:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <HAL_ADC_Start+0x154>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_ADC_Start+0x158>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d108      	bne.n	80025c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	e00c      	b.n	80025da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	e003      	b.n	80025da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40012800 	.word	0x40012800
 80025e8:	40012400 	.word	0x40012400

080025ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002602:	f7ff fe3f 	bl	8002284 <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0d3      	b.n	80027d6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d131      	bne.n	80026a0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002642:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	d12a      	bne.n	80026a0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800264a:	e021      	b.n	8002690 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d01d      	beq.n	8002690 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_ADC_PollForConversion+0x7e>
 800265a:	f7ff fe13 	bl	8002284 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d212      	bcs.n	8002690 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	f043 0204 	orr.w	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0a2      	b.n	80027d6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0d6      	beq.n	800264c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800269e:	e070      	b.n	8002782 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026a0:	4b4f      	ldr	r3, [pc, #316]	@ (80027e0 <HAL_ADC_PollForConversion+0x1f4>)
 80026a2:	681c      	ldr	r4, [r3, #0]
 80026a4:	2002      	movs	r0, #2
 80026a6:	f001 fe3b 	bl	8004320 <HAL_RCCEx_GetPeriphCLKFreq>
 80026aa:	4603      	mov	r3, r0
 80026ac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	4b4b      	ldr	r3, [pc, #300]	@ (80027e4 <HAL_ADC_PollForConversion+0x1f8>)
 80026b8:	400b      	ands	r3, r1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_ADC_PollForConversion+0x104>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68d9      	ldr	r1, [r3, #12]
 80026c4:	4b48      	ldr	r3, [pc, #288]	@ (80027e8 <HAL_ADC_PollForConversion+0x1fc>)
 80026c6:	400b      	ands	r3, r1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <HAL_ADC_PollForConversion+0x104>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	4b46      	ldr	r3, [pc, #280]	@ (80027ec <HAL_ADC_PollForConversion+0x200>)
 80026d4:	400b      	ands	r3, r1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d108      	bne.n	80026ec <HAL_ADC_PollForConversion+0x100>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <HAL_ADC_PollForConversion+0x204>)
 80026e2:	400b      	ands	r3, r1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_PollForConversion+0x100>
 80026e8:	2314      	movs	r3, #20
 80026ea:	e020      	b.n	800272e <HAL_ADC_PollForConversion+0x142>
 80026ec:	2329      	movs	r3, #41	@ 0x29
 80026ee:	e01e      	b.n	800272e <HAL_ADC_PollForConversion+0x142>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6919      	ldr	r1, [r3, #16]
 80026f6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ec <HAL_ADC_PollForConversion+0x200>)
 80026f8:	400b      	ands	r3, r1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_ADC_PollForConversion+0x120>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68d9      	ldr	r1, [r3, #12]
 8002704:	4b3a      	ldr	r3, [pc, #232]	@ (80027f0 <HAL_ADC_PollForConversion+0x204>)
 8002706:	400b      	ands	r3, r1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <HAL_ADC_PollForConversion+0x13c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <HAL_ADC_PollForConversion+0x208>)
 8002714:	400b      	ands	r3, r1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_ADC_PollForConversion+0x140>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68d9      	ldr	r1, [r3, #12]
 8002720:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_ADC_PollForConversion+0x208>)
 8002722:	400b      	ands	r3, r1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_ADC_PollForConversion+0x140>
 8002728:	2354      	movs	r3, #84	@ 0x54
 800272a:	e000      	b.n	800272e <HAL_ADC_PollForConversion+0x142>
 800272c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002734:	e021      	b.n	800277a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d01a      	beq.n	8002774 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_ADC_PollForConversion+0x168>
 8002744:	f7ff fd9e 	bl	8002284 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d20f      	bcs.n	8002774 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d90b      	bls.n	8002774 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e030      	b.n	80027d6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	429a      	cmp	r2, r3
 8002780:	d8d9      	bhi.n	8002736 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0212 	mvn.w	r2, #18
 800278a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80027a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80027a6:	d115      	bne.n	80027d4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000
 80027e4:	24924924 	.word	0x24924924
 80027e8:	00924924 	.word	0x00924924
 80027ec:	12492492 	.word	0x12492492
 80027f0:	00492492 	.word	0x00492492
 80027f4:	00249249 	.word	0x00249249

080027f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x20>
 800282c:	2302      	movs	r3, #2
 800282e:	e0dc      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1da>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b06      	cmp	r3, #6
 800283e:	d81c      	bhi.n	800287a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3b05      	subs	r3, #5
 8002852:	221f      	movs	r2, #31
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	4019      	ands	r1, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	3b05      	subs	r3, #5
 800286c:	fa00 f203 	lsl.w	r2, r0, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34
 8002878:	e03c      	b.n	80028f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d81c      	bhi.n	80028bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	3b23      	subs	r3, #35	@ 0x23
 8002894:	221f      	movs	r2, #31
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	4019      	ands	r1, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b23      	subs	r3, #35	@ 0x23
 80028ae:	fa00 f203 	lsl.w	r2, r0, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ba:	e01b      	b.n	80028f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b41      	subs	r3, #65	@ 0x41
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4019      	ands	r1, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b41      	subs	r3, #65	@ 0x41
 80028e8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	d91c      	bls.n	8002936 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	3b1e      	subs	r3, #30
 800290e:	2207      	movs	r2, #7
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	4019      	ands	r1, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6898      	ldr	r0, [r3, #8]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	fa00 f203 	lsl.w	r2, r0, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	e019      	b.n	800296a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6919      	ldr	r1, [r3, #16]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	2207      	movs	r2, #7
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	4019      	ands	r1, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6898      	ldr	r0, [r3, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b10      	cmp	r3, #16
 8002970:	d003      	beq.n	800297a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002976:	2b11      	cmp	r3, #17
 8002978:	d132      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1d      	ldr	r2, [pc, #116]	@ (80029f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d125      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d126      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80029a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d11a      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029aa:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <HAL_ADC_ConfigChannel+0x1ec>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	0c9a      	lsrs	r2, r3, #18
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f9      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x1b2>
 80029ce:	e007      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40012400 	.word	0x40012400
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d040      	beq.n	8002aa0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <ADC_Enable+0xac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <ADC_Enable+0xb0>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	0c9b      	lsrs	r3, r3, #18
 8002a3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a3c:	e002      	b.n	8002a44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a4a:	f7ff fc1b 	bl	8002284 <HAL_GetTick>
 8002a4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a50:	e01f      	b.n	8002a92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a52:	f7ff fc17 	bl	8002284 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d918      	bls.n	8002a92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d011      	beq.n	8002a92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e007      	b.n	8002aa2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d1d8      	bne.n	8002a52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	431bde83 	.word	0x431bde83

08002ab4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d12e      	bne.n	8002b2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ade:	f7ff fbd1 	bl	8002284 <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ae4:	e01b      	b.n	8002b1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ae6:	f7ff fbcd 	bl	8002284 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d914      	bls.n	8002b1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10d      	bne.n	8002b1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	f043 0210 	orr.w	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e007      	b.n	8002b2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d0dc      	beq.n	8002ae6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	@ (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4906      	ldr	r1, [pc, #24]	@ (8002bd0 <__NVIC_EnableIRQ+0x34>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100

08002bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	@ (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	@ (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	@ 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f1c3 0307 	rsb	r3, r3, #7
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	bf28      	it	cs
 8002c46:	2304      	movcs	r3, #4
 8002c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d902      	bls.n	8002c58 <NVIC_EncodePriority+0x30>
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3b03      	subs	r3, #3
 8002c56:	e000      	b.n	8002c5a <NVIC_EncodePriority+0x32>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43d9      	mvns	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	4313      	orrs	r3, r2
         );
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3724      	adds	r7, #36	@ 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff90 	bl	8002bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff2d 	bl	8002b38 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff42 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff90 	bl	8002c28 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5f 	bl	8002bd4 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff35 	bl	8002b9c <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b08b      	sub	sp, #44	@ 0x2c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d62:	2300      	movs	r3, #0
 8002d64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d66:	e169      	b.n	800303c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d68:	2201      	movs	r2, #1
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f040 8158 	bne.w	8003036 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a9a      	ldr	r2, [pc, #616]	@ (8002ff4 <HAL_GPIO_Init+0x2a0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d05e      	beq.n	8002e4e <HAL_GPIO_Init+0xfa>
 8002d90:	4a98      	ldr	r2, [pc, #608]	@ (8002ff4 <HAL_GPIO_Init+0x2a0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d875      	bhi.n	8002e82 <HAL_GPIO_Init+0x12e>
 8002d96:	4a98      	ldr	r2, [pc, #608]	@ (8002ff8 <HAL_GPIO_Init+0x2a4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d058      	beq.n	8002e4e <HAL_GPIO_Init+0xfa>
 8002d9c:	4a96      	ldr	r2, [pc, #600]	@ (8002ff8 <HAL_GPIO_Init+0x2a4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d86f      	bhi.n	8002e82 <HAL_GPIO_Init+0x12e>
 8002da2:	4a96      	ldr	r2, [pc, #600]	@ (8002ffc <HAL_GPIO_Init+0x2a8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d052      	beq.n	8002e4e <HAL_GPIO_Init+0xfa>
 8002da8:	4a94      	ldr	r2, [pc, #592]	@ (8002ffc <HAL_GPIO_Init+0x2a8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d869      	bhi.n	8002e82 <HAL_GPIO_Init+0x12e>
 8002dae:	4a94      	ldr	r2, [pc, #592]	@ (8003000 <HAL_GPIO_Init+0x2ac>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04c      	beq.n	8002e4e <HAL_GPIO_Init+0xfa>
 8002db4:	4a92      	ldr	r2, [pc, #584]	@ (8003000 <HAL_GPIO_Init+0x2ac>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d863      	bhi.n	8002e82 <HAL_GPIO_Init+0x12e>
 8002dba:	4a92      	ldr	r2, [pc, #584]	@ (8003004 <HAL_GPIO_Init+0x2b0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d046      	beq.n	8002e4e <HAL_GPIO_Init+0xfa>
 8002dc0:	4a90      	ldr	r2, [pc, #576]	@ (8003004 <HAL_GPIO_Init+0x2b0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d85d      	bhi.n	8002e82 <HAL_GPIO_Init+0x12e>
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d82a      	bhi.n	8002e20 <HAL_GPIO_Init+0xcc>
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	d859      	bhi.n	8002e82 <HAL_GPIO_Init+0x12e>
 8002dce:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <HAL_GPIO_Init+0x80>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002e4f 	.word	0x08002e4f
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	08002e3b 	.word	0x08002e3b
 8002de0:	08002e7d 	.word	0x08002e7d
 8002de4:	08002e83 	.word	0x08002e83
 8002de8:	08002e83 	.word	0x08002e83
 8002dec:	08002e83 	.word	0x08002e83
 8002df0:	08002e83 	.word	0x08002e83
 8002df4:	08002e83 	.word	0x08002e83
 8002df8:	08002e83 	.word	0x08002e83
 8002dfc:	08002e83 	.word	0x08002e83
 8002e00:	08002e83 	.word	0x08002e83
 8002e04:	08002e83 	.word	0x08002e83
 8002e08:	08002e83 	.word	0x08002e83
 8002e0c:	08002e83 	.word	0x08002e83
 8002e10:	08002e83 	.word	0x08002e83
 8002e14:	08002e83 	.word	0x08002e83
 8002e18:	08002e31 	.word	0x08002e31
 8002e1c:	08002e45 	.word	0x08002e45
 8002e20:	4a79      	ldr	r2, [pc, #484]	@ (8003008 <HAL_GPIO_Init+0x2b4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e26:	e02c      	b.n	8002e82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	623b      	str	r3, [r7, #32]
          break;
 8002e2e:	e029      	b.n	8002e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	3304      	adds	r3, #4
 8002e36:	623b      	str	r3, [r7, #32]
          break;
 8002e38:	e024      	b.n	8002e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	3308      	adds	r3, #8
 8002e40:	623b      	str	r3, [r7, #32]
          break;
 8002e42:	e01f      	b.n	8002e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	623b      	str	r3, [r7, #32]
          break;
 8002e4c:	e01a      	b.n	8002e84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e56:	2304      	movs	r3, #4
 8002e58:	623b      	str	r3, [r7, #32]
          break;
 8002e5a:	e013      	b.n	8002e84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e64:	2308      	movs	r3, #8
 8002e66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	611a      	str	r2, [r3, #16]
          break;
 8002e6e:	e009      	b.n	8002e84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e70:	2308      	movs	r3, #8
 8002e72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	615a      	str	r2, [r3, #20]
          break;
 8002e7a:	e003      	b.n	8002e84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	623b      	str	r3, [r7, #32]
          break;
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x130>
          break;
 8002e82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2bff      	cmp	r3, #255	@ 0xff
 8002e88:	d801      	bhi.n	8002e8e <HAL_GPIO_Init+0x13a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	e001      	b.n	8002e92 <HAL_GPIO_Init+0x13e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2bff      	cmp	r3, #255	@ 0xff
 8002e98:	d802      	bhi.n	8002ea0 <HAL_GPIO_Init+0x14c>
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	e002      	b.n	8002ea6 <HAL_GPIO_Init+0x152>
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	3b08      	subs	r3, #8
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	210f      	movs	r1, #15
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	6a39      	ldr	r1, [r7, #32]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80b1 	beq.w	8003036 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800300c <HAL_GPIO_Init+0x2b8>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800300c <HAL_GPIO_Init+0x2b8>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800300c <HAL_GPIO_Init+0x2b8>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002eec:	4a48      	ldr	r2, [pc, #288]	@ (8003010 <HAL_GPIO_Init+0x2bc>)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	220f      	movs	r2, #15
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a40      	ldr	r2, [pc, #256]	@ (8003014 <HAL_GPIO_Init+0x2c0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d013      	beq.n	8002f40 <HAL_GPIO_Init+0x1ec>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003018 <HAL_GPIO_Init+0x2c4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00d      	beq.n	8002f3c <HAL_GPIO_Init+0x1e8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3e      	ldr	r2, [pc, #248]	@ (800301c <HAL_GPIO_Init+0x2c8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d007      	beq.n	8002f38 <HAL_GPIO_Init+0x1e4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003020 <HAL_GPIO_Init+0x2cc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <HAL_GPIO_Init+0x1e0>
 8002f30:	2303      	movs	r3, #3
 8002f32:	e006      	b.n	8002f42 <HAL_GPIO_Init+0x1ee>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e004      	b.n	8002f42 <HAL_GPIO_Init+0x1ee>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e002      	b.n	8002f42 <HAL_GPIO_Init+0x1ee>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_GPIO_Init+0x1ee>
 8002f40:	2300      	movs	r3, #0
 8002f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f44:	f002 0203 	and.w	r2, r2, #3
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	4093      	lsls	r3, r2
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f52:	492f      	ldr	r1, [pc, #188]	@ (8003010 <HAL_GPIO_Init+0x2bc>)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	3302      	adds	r3, #2
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	492c      	ldr	r1, [pc, #176]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	4928      	ldr	r1, [pc, #160]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f94:	4b23      	ldr	r3, [pc, #140]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	4922      	ldr	r1, [pc, #136]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fa2:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	491e      	ldr	r1, [pc, #120]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4918      	ldr	r1, [pc, #96]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fca:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	4914      	ldr	r1, [pc, #80]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d021      	beq.n	8003028 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	490e      	ldr	r1, [pc, #56]	@ (8003024 <HAL_GPIO_Init+0x2d0>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e021      	b.n	8003036 <HAL_GPIO_Init+0x2e2>
 8002ff2:	bf00      	nop
 8002ff4:	10320000 	.word	0x10320000
 8002ff8:	10310000 	.word	0x10310000
 8002ffc:	10220000 	.word	0x10220000
 8003000:	10210000 	.word	0x10210000
 8003004:	10120000 	.word	0x10120000
 8003008:	10110000 	.word	0x10110000
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000
 8003014:	40010800 	.word	0x40010800
 8003018:	40010c00 	.word	0x40010c00
 800301c:	40011000 	.word	0x40011000
 8003020:	40011400 	.word	0x40011400
 8003024:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_GPIO_Init+0x304>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	43db      	mvns	r3, r3
 8003030:	4909      	ldr	r1, [pc, #36]	@ (8003058 <HAL_GPIO_Init+0x304>)
 8003032:	4013      	ands	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	3301      	adds	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	f47f ae8e 	bne.w	8002d68 <HAL_GPIO_Init+0x14>
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	372c      	adds	r7, #44	@ 0x2c
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e12b      	b.n	80032c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe f8a4 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	@ 0x24
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c0:	f001 f832 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 80030c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a81      	ldr	r2, [pc, #516]	@ (80032d0 <HAL_I2C_Init+0x274>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d807      	bhi.n	80030e0 <HAL_I2C_Init+0x84>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4a80      	ldr	r2, [pc, #512]	@ (80032d4 <HAL_I2C_Init+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	bf94      	ite	ls
 80030d8:	2301      	movls	r3, #1
 80030da:	2300      	movhi	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e006      	b.n	80030ee <HAL_I2C_Init+0x92>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a7d      	ldr	r2, [pc, #500]	@ (80032d8 <HAL_I2C_Init+0x27c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bf94      	ite	ls
 80030e8:	2301      	movls	r3, #1
 80030ea:	2300      	movhi	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0e7      	b.n	80032c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a78      	ldr	r2, [pc, #480]	@ (80032dc <HAL_I2C_Init+0x280>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9b      	lsrs	r3, r3, #18
 8003100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a6a      	ldr	r2, [pc, #424]	@ (80032d0 <HAL_I2C_Init+0x274>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d802      	bhi.n	8003130 <HAL_I2C_Init+0xd4>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3301      	adds	r3, #1
 800312e:	e009      	b.n	8003144 <HAL_I2C_Init+0xe8>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	4a69      	ldr	r2, [pc, #420]	@ (80032e0 <HAL_I2C_Init+0x284>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	3301      	adds	r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	430b      	orrs	r3, r1
 800314a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003156:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	495c      	ldr	r1, [pc, #368]	@ (80032d0 <HAL_I2C_Init+0x274>)
 8003160:	428b      	cmp	r3, r1
 8003162:	d819      	bhi.n	8003198 <HAL_I2C_Init+0x13c>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e59      	subs	r1, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003178:	400b      	ands	r3, r1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_I2C_Init+0x138>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e59      	subs	r1, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fbb1 f3f3 	udiv	r3, r1, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003192:	e051      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003194:	2304      	movs	r3, #4
 8003196:	e04f      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <HAL_I2C_Init+0x168>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	440b      	add	r3, r1
 80031ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e012      	b.n	80031ea <HAL_I2C_Init+0x18e>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	0099      	lsls	r1, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Init+0x196>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e022      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10e      	bne.n	8003218 <HAL_I2C_Init+0x1bc>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1e58      	subs	r0, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	440b      	add	r3, r1
 8003208:	fbb0 f3f3 	udiv	r3, r0, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003216:	e00f      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	0099      	lsls	r1, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	6809      	ldr	r1, [r1, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003266:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6911      	ldr	r1, [r2, #16]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	4311      	orrs	r1, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	000186a0 	.word	0x000186a0
 80032d4:	001e847f 	.word	0x001e847f
 80032d8:	003d08ff 	.word	0x003d08ff
 80032dc:	431bde83 	.word	0x431bde83
 80032e0:	10624dd3 	.word	0x10624dd3

080032e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	461a      	mov	r2, r3
 80032f0:	460b      	mov	r3, r1
 80032f2:	817b      	strh	r3, [r7, #10]
 80032f4:	4613      	mov	r3, r2
 80032f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7fe ffc4 	bl	8002284 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b20      	cmp	r3, #32
 8003308:	f040 80e0 	bne.w	80034cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2319      	movs	r3, #25
 8003312:	2201      	movs	r2, #1
 8003314:	4970      	ldr	r1, [pc, #448]	@ (80034d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f964 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
 8003324:	e0d3      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_I2C_Master_Transmit+0x50>
 8003330:	2302      	movs	r3, #2
 8003332:	e0cc      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d007      	beq.n	800335a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003368:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2221      	movs	r2, #33	@ 0x21
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2210      	movs	r2, #16
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	893a      	ldrh	r2, [r7, #8]
 800338a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a50      	ldr	r2, [pc, #320]	@ (80034dc <HAL_I2C_Master_Transmit+0x1f8>)
 800339a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6a3a      	ldr	r2, [r7, #32]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f89c 	bl	80034e0 <I2C_MasterRequestWrite>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e08d      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033c8:	e066      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	6a39      	ldr	r1, [r7, #32]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fa22 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d107      	bne.n	80033f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06b      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b04      	cmp	r3, #4
 8003432:	d11b      	bne.n	800346c <HAL_I2C_Master_Transmit+0x188>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	6a39      	ldr	r1, [r7, #32]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fa19 	bl	80038a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	2b04      	cmp	r3, #4
 8003482:	d107      	bne.n	8003494 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003492:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e01a      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d194      	bne.n	80033ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	00100002 	.word	0x00100002
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d006      	beq.n	800350a <I2C_MasterRequestWrite+0x2a>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d003      	beq.n	800350a <I2C_MasterRequestWrite+0x2a>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003508:	d108      	bne.n	800351c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e00b      	b.n	8003534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	2b12      	cmp	r3, #18
 8003522:	d107      	bne.n	8003534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f84f 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355a:	d103      	bne.n	8003564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e035      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003570:	d108      	bne.n	8003584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	e01b      	b.n	80035bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	11db      	asrs	r3, r3, #7
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 0306 	and.w	r3, r3, #6
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f063 030f 	orn	r3, r3, #15
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	490e      	ldr	r1, [pc, #56]	@ (80035dc <I2C_MasterRequestWrite+0xfc>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f898 	bl	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e010      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4907      	ldr	r1, [pc, #28]	@ (80035e0 <I2C_MasterRequestWrite+0x100>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f888 	bl	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	00010008 	.word	0x00010008
 80035e0:	00010002 	.word	0x00010002

080035e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	e048      	b.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d044      	beq.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe fe41 	bl	8002284 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d139      	bne.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10d      	bne.n	800363a <I2C_WaitOnFlagUntilTimeout+0x56>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	e00c      	b.n	8003654 <I2C_WaitOnFlagUntilTimeout+0x70>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	43da      	mvns	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d116      	bne.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e023      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10d      	bne.n	80036ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	e00c      	b.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	43da      	mvns	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d093      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e6:	e071      	b.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f6:	d123      	bne.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003706:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e067      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d041      	beq.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe fd9c 	bl	8002284 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d136      	bne.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10c      	bne.n	8003782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e00b      	b.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	43da      	mvns	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e021      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10c      	bne.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e00b      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af6d 	bne.w	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003824:	e034      	b.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f886 	bl	8003938 <I2C_IsAcknowledgeFailed>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e034      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d028      	beq.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe fd21 	bl	8002284 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	d016      	beq.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e007      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389a:	2b80      	cmp	r3, #128	@ 0x80
 800389c:	d1c3      	bne.n	8003826 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b4:	e034      	b.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f83e 	bl	8003938 <I2C_IsAcknowledgeFailed>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e034      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d028      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe fcd9 	bl	8002284 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11d      	bne.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d016      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d1c3      	bne.n	80038b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394e:	d11b      	bne.n	8003988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e272      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8087 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b4:	4b92      	ldr	r3, [pc, #584]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d00c      	beq.n	80039da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d112      	bne.n	80039f2 <HAL_RCC_OscConfig+0x5e>
 80039cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d10b      	bne.n	80039f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039da:	4b89      	ldr	r3, [pc, #548]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d06c      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x12c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d168      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e24c      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x76>
 80039fc:	4b80      	ldr	r3, [pc, #512]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7f      	ldr	r2, [pc, #508]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e02e      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x98>
 8003a12:	4b7b      	ldr	r3, [pc, #492]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7a      	ldr	r2, [pc, #488]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b78      	ldr	r3, [pc, #480]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a77      	ldr	r2, [pc, #476]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0xbc>
 8003a36:	4b72      	ldr	r3, [pc, #456]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a71      	ldr	r2, [pc, #452]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b6f      	ldr	r3, [pc, #444]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6e      	ldr	r2, [pc, #440]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a50:	4b6b      	ldr	r3, [pc, #428]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a6a      	ldr	r2, [pc, #424]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b68      	ldr	r3, [pc, #416]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a67      	ldr	r2, [pc, #412]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe fc08 	bl	8002284 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fc04 	bl	8002284 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	@ 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e200      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xe4>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fbf4 	bl	8002284 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fbf0 	bl	8002284 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1ec      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b53      	ldr	r3, [pc, #332]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x10c>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ace:	4b4c      	ldr	r3, [pc, #304]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ada:	4b49      	ldr	r3, [pc, #292]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x18c>
 8003ae6:	4b46      	ldr	r3, [pc, #280]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x176>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1c0      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4939      	ldr	r1, [pc, #228]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b36      	ldr	r3, [pc, #216]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fba9 	bl	8002284 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe fba5 	bl	8002284 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1a1      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2d      	ldr	r3, [pc, #180]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b2a      	ldr	r3, [pc, #168]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4927      	ldr	r1, [pc, #156]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b26      	ldr	r3, [pc, #152]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe fb88 	bl	8002284 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe fb84 	bl	8002284 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e180      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03a      	beq.n	8003c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d019      	beq.n	8003bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <HAL_RCC_OscConfig+0x274>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fe fb68 	bl	8002284 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fb64 	bl	8002284 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e160      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f000 face 	bl	8004178 <RCC_Delay>
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bde:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <HAL_RCC_OscConfig+0x274>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be4:	f7fe fb4e 	bl	8002284 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bea:	e00f      	b.n	8003c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fe fb4a 	bl	8002284 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d908      	bls.n	8003c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e146      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	42420000 	.word	0x42420000
 8003c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0c:	4b92      	ldr	r3, [pc, #584]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e9      	bne.n	8003bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a6 	beq.w	8003d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10d      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	4b88      	ldr	r3, [pc, #544]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4a87      	ldr	r2, [pc, #540]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	61d3      	str	r3, [r2, #28]
 8003c42:	4b85      	ldr	r3, [pc, #532]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	4b82      	ldr	r3, [pc, #520]	@ (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d118      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a7e      	ldr	r2, [pc, #504]	@ (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6a:	f7fe fb0b 	bl	8002284 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fe fb07 	bl	8002284 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b64      	cmp	r3, #100	@ 0x64
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e103      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	4b75      	ldr	r3, [pc, #468]	@ (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x312>
 8003c98:	4b6f      	ldr	r3, [pc, #444]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6213      	str	r3, [r2, #32]
 8003ca4:	e02d      	b.n	8003d02 <HAL_RCC_OscConfig+0x36e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x334>
 8003cae:	4b6a      	ldr	r3, [pc, #424]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a69      	ldr	r2, [pc, #420]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6213      	str	r3, [r2, #32]
 8003cba:	4b67      	ldr	r3, [pc, #412]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a66      	ldr	r2, [pc, #408]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	6213      	str	r3, [r2, #32]
 8003cc6:	e01c      	b.n	8003d02 <HAL_RCC_OscConfig+0x36e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d10c      	bne.n	8003cea <HAL_RCC_OscConfig+0x356>
 8003cd0:	4b61      	ldr	r3, [pc, #388]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	4a60      	ldr	r2, [pc, #384]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	6213      	str	r3, [r2, #32]
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6213      	str	r3, [r2, #32]
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCC_OscConfig+0x36e>
 8003cea:	4b5b      	ldr	r3, [pc, #364]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	4a5a      	ldr	r2, [pc, #360]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	6213      	str	r3, [r2, #32]
 8003cf6:	4b58      	ldr	r3, [pc, #352]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4a57      	ldr	r2, [pc, #348]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fe fabb 	bl	8002284 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fe fab7 	bl	8002284 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0b1      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d28:	4b4b      	ldr	r3, [pc, #300]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ee      	beq.n	8003d12 <HAL_RCC_OscConfig+0x37e>
 8003d34:	e014      	b.n	8003d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fe faa5 	bl	8002284 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe faa1 	bl	8002284 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e09b      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d54:	4b40      	ldr	r3, [pc, #256]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ee      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d66:	4b3c      	ldr	r3, [pc, #240]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8087 	beq.w	8003e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7c:	4b36      	ldr	r3, [pc, #216]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d061      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d146      	bne.n	8003e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b33      	ldr	r3, [pc, #204]	@ (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fa75 	bl	8002284 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fa71 	bl	8002284 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e06d      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db0:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc4:	d108      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4921      	ldr	r1, [pc, #132]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a19      	ldr	r1, [r3, #32]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	430b      	orrs	r3, r1
 8003dea:	491b      	ldr	r1, [pc, #108]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fe fa45 	bl	8002284 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fe fa41 	bl	8002284 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e03d      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e10:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x46a>
 8003e1c:	e035      	b.n	8003e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fa2e 	bl	8002284 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fe fa2a 	bl	8002284 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e026      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3e:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x498>
 8003e4a:	e01e      	b.n	8003e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e019      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e64:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <HAL_RCC_OscConfig+0x500>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000

08003e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0d0      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b6a      	ldr	r3, [pc, #424]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b67      	ldr	r3, [pc, #412]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4965      	ldr	r1, [pc, #404]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a52      	ldr	r2, [pc, #328]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d040      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b41      	ldr	r3, [pc, #260]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e073      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3d      	ldr	r3, [pc, #244]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06b      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b39      	ldr	r3, [pc, #228]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4936      	ldr	r1, [pc, #216]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fe f97c 	bl	8002284 <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fe f978 	bl	8002284 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e053      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d210      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b24      	ldr	r3, [pc, #144]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4922      	ldr	r1, [pc, #136]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004012:	4b12      	ldr	r3, [pc, #72]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4602      	mov	r2, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	490a      	ldr	r1, [pc, #40]	@ (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	@ (8004064 <HAL_RCC_ClockConfig+0x1cc>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <HAL_RCC_ClockConfig+0x1d0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe f8da 	bl	8002200 <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40022000 	.word	0x40022000
 800405c:	40021000 	.word	0x40021000
 8004060:	08007b68 	.word	0x08007b68
 8004064:	20000000 	.word	0x20000000
 8004068:	20000004 	.word	0x20000004

0800406c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004086:	4b1e      	ldr	r3, [pc, #120]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x94>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b04      	cmp	r3, #4
 8004094:	d002      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x30>
 8004096:	2b08      	cmp	r3, #8
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x36>
 800409a:	e027      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800409c:	4b19      	ldr	r3, [pc, #100]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x98>)
 800409e:	613b      	str	r3, [r7, #16]
      break;
 80040a0:	e027      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0c9b      	lsrs	r3, r3, #18
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040ac:	5cd3      	ldrb	r3, [r2, r3]
 80040ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d010      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ba:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x94>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0c5b      	lsrs	r3, r3, #17
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	4a11      	ldr	r2, [pc, #68]	@ (800410c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ce:	fb03 f202 	mul.w	r2, r3, r2
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e004      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0c      	ldr	r2, [pc, #48]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040e0:	fb02 f303 	mul.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	613b      	str	r3, [r7, #16]
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ee:	613b      	str	r3, [r7, #16]
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	693b      	ldr	r3, [r7, #16]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	007a1200 	.word	0x007a1200
 8004108:	08007b80 	.word	0x08007b80
 800410c:	08007b90 	.word	0x08007b90
 8004110:	003d0900 	.word	0x003d0900

08004114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b02      	ldr	r3, [pc, #8]	@ (8004124 <HAL_RCC_GetHCLKFreq+0x10>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	20000000 	.word	0x20000000

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff2 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	@ (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08007b78 	.word	0x08007b78

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff ffde 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	08007b78 	.word	0x08007b78

08004178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004180:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <RCC_Delay+0x34>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0a      	ldr	r2, [pc, #40]	@ (80041b0 <RCC_Delay+0x38>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004194:	bf00      	nop
  }
  while (Delay --);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e5a      	subs	r2, r3, #1
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <RCC_Delay+0x1c>
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000000 	.word	0x20000000
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d07d      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041d0:	2300      	movs	r3, #0
 80041d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	61d3      	str	r3, [r2, #28]
 80041ec:	4b49      	ldr	r3, [pc, #292]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d118      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004208:	4b43      	ldr	r3, [pc, #268]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a42      	ldr	r2, [pc, #264]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004214:	f7fe f836 	bl	8002284 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	e008      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fe f832 	bl	8002284 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	@ 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e06d      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b3a      	ldr	r3, [pc, #232]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800423a:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004242:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02e      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	429a      	cmp	r2, r3
 8004256:	d027      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004258:	4b2e      	ldr	r3, [pc, #184]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004260:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004262:	4b2e      	ldr	r3, [pc, #184]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004268:	4b2c      	ldr	r3, [pc, #176]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800426e:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d014      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fe f801 	bl	8002284 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd fffd 	bl	8002284 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e036      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4917      	ldr	r1, [pc, #92]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b14      	ldr	r3, [pc, #80]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	490b      	ldr	r1, [pc, #44]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f6:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	4904      	ldr	r1, [pc, #16]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
 800431c:	42420440 	.word	0x42420440

08004320 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b10      	cmp	r3, #16
 8004346:	f200 808a 	bhi.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d045      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d075      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004356:	e082      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004358:	4b46      	ldr	r3, [pc, #280]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800435e:	4b45      	ldr	r3, [pc, #276]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d07b      	beq.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0c9b      	lsrs	r3, r3, #18
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004374:	5cd3      	ldrb	r3, [r2, r3]
 8004376:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004382:	4b3c      	ldr	r3, [pc, #240]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0c5b      	lsrs	r3, r3, #17
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	4a3b      	ldr	r2, [pc, #236]	@ (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800438e:	5cd3      	ldrb	r3, [r2, r3]
 8004390:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800439c:	4a38      	ldr	r2, [pc, #224]	@ (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	e004      	b.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4a34      	ldr	r2, [pc, #208]	@ (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80043b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c4:	d102      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	61bb      	str	r3, [r7, #24]
      break;
 80043ca:	e04a      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	61bb      	str	r3, [r7, #24]
      break;
 80043da:	e042      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80043dc:	4b25      	ldr	r3, [pc, #148]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ec:	d108      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80043f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e01f      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440a:	d109      	bne.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004418:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e00f      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442a:	d11c      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004438:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800443c:	61bb      	str	r3, [r7, #24]
      break;
 800443e:	e012      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004440:	e011      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004442:	f7ff fe85 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8004446:	4602      	mov	r2, r0
 8004448:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0b9b      	lsrs	r3, r3, #14
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	3301      	adds	r3, #1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]
      break;
 800445c:	e004      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004466:	bf00      	nop
    }
  }
  return (frequency);
 8004468:	69bb      	ldr	r3, [r7, #24]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	08007b94 	.word	0x08007b94
 800447c:	08007ba4 	.word	0x08007ba4
 8004480:	007a1200 	.word	0x007a1200
 8004484:	003d0900 	.word	0x003d0900
 8004488:	aaaaaaab 	.word	0xaaaaaaab

0800448c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fe44 	bl	8002140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 fa5c 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d001      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e03a      	b.n	80045ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_TIM_Base_Start_IT+0x98>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x58>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456e:	d009      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x58>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x58>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a13      	ldr	r2, [pc, #76]	@ (80045cc <HAL_TIM_Base_Start_IT+0xa0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d111      	bne.n	80045a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b06      	cmp	r3, #6
 8004594:	d010      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a6:	e007      	b.n	80045b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800

080045d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0202 	mvn.w	r2, #2
 8004604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f998 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f98b 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f99a 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d020      	beq.n	8004680 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01b      	beq.n	8004680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0204 	mvn.w	r2, #4
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f972 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f965 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f974 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d020      	beq.n	80046cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0208 	mvn.w	r2, #8
 800469c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2204      	movs	r2, #4
 80046a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f94c 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f93f 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f94e 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d020      	beq.n	8004718 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01b      	beq.n	8004718 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0210 	mvn.w	r2, #16
 80046e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2208      	movs	r2, #8
 80046ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f926 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 8004704:	e005      	b.n	8004712 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f919 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f928 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0201 	mvn.w	r2, #1
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fe6e 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa7f 	bl	8004c5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8f8 	bl	8004974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0220 	mvn.w	r2, #32
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa52 	bl	8004c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIM_ConfigClockSource+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0b4      	b.n	8004936 <HAL_TIM_ConfigClockSource+0x186>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004804:	d03e      	beq.n	8004884 <HAL_TIM_ConfigClockSource+0xd4>
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800480a:	f200 8087 	bhi.w	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004812:	f000 8086 	beq.w	8004922 <HAL_TIM_ConfigClockSource+0x172>
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800481a:	d87f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b70      	cmp	r3, #112	@ 0x70
 800481e:	d01a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xa6>
 8004820:	2b70      	cmp	r3, #112	@ 0x70
 8004822:	d87b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b60      	cmp	r3, #96	@ 0x60
 8004826:	d050      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x11a>
 8004828:	2b60      	cmp	r3, #96	@ 0x60
 800482a:	d877      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b50      	cmp	r3, #80	@ 0x50
 800482e:	d03c      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0xfa>
 8004830:	2b50      	cmp	r3, #80	@ 0x50
 8004832:	d873      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b40      	cmp	r3, #64	@ 0x40
 8004836:	d058      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x13a>
 8004838:	2b40      	cmp	r3, #64	@ 0x40
 800483a:	d86f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b30      	cmp	r3, #48	@ 0x30
 800483e:	d064      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004840:	2b30      	cmp	r3, #48	@ 0x30
 8004842:	d86b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b20      	cmp	r3, #32
 8004846:	d060      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d867      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05c      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d05a      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004854:	e062      	b.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004866:	f000 f974 	bl	8004b52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	609a      	str	r2, [r3, #8]
      break;
 8004882:	e04f      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004894:	f000 f95d 	bl	8004b52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048a6:	609a      	str	r2, [r3, #8]
      break;
 80048a8:	e03c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 f8d4 	bl	8004a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2150      	movs	r1, #80	@ 0x50
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f92b 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 80048c8:	e02c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d6:	461a      	mov	r2, r3
 80048d8:	f000 f8f2 	bl	8004ac0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2160      	movs	r1, #96	@ 0x60
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f91b 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 80048e8:	e01c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 f8b4 	bl	8004a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2140      	movs	r1, #64	@ 0x40
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f90b 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 8004908:	e00c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f000 f902 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 800491a:	e003      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	e000      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
	...

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a58 <TIM_Base_SetConfig+0xd0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_Base_SetConfig+0x30>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a6:	d007      	beq.n	80049b8 <TIM_Base_SetConfig+0x30>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a2c      	ldr	r2, [pc, #176]	@ (8004a5c <TIM_Base_SetConfig+0xd4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_Base_SetConfig+0x30>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <TIM_Base_SetConfig+0xd8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d108      	bne.n	80049ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <TIM_Base_SetConfig+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_Base_SetConfig+0x62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0x62>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a5c <TIM_Base_SetConfig+0xd4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0x62>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a60 <TIM_Base_SetConfig+0xd8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0d      	ldr	r2, [pc, #52]	@ (8004a58 <TIM_Base_SetConfig+0xd0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f023 0201 	bic.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	611a      	str	r2, [r3, #16]
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800

08004a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f023 030a 	bic.w	r3, r3, #10
 8004aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0210 	bic.w	r2, r3, #16
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	031b      	lsls	r3, r3, #12
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004afc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f043 0307 	orr.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b087      	sub	sp, #28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	021a      	lsls	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	609a      	str	r2, [r3, #8]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e046      	b.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a16      	ldr	r2, [pc, #88]	@ (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a12      	ldr	r2, [pc, #72]	@ (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a10      	ldr	r2, [pc, #64]	@ (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10c      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800

08004c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <__cvt>:
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c76:	461d      	mov	r5, r3
 8004c78:	bfbb      	ittet	lt
 8004c7a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004c7e:	461d      	movlt	r5, r3
 8004c80:	2300      	movge	r3, #0
 8004c82:	232d      	movlt	r3, #45	@ 0x2d
 8004c84:	b088      	sub	sp, #32
 8004c86:	4614      	mov	r4, r2
 8004c88:	bfb8      	it	lt
 8004c8a:	4614      	movlt	r4, r2
 8004c8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004c8e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004c90:	7013      	strb	r3, [r2, #0]
 8004c92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c94:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004c98:	f023 0820 	bic.w	r8, r3, #32
 8004c9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ca0:	d005      	beq.n	8004cae <__cvt+0x3e>
 8004ca2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ca6:	d100      	bne.n	8004caa <__cvt+0x3a>
 8004ca8:	3601      	adds	r6, #1
 8004caa:	2302      	movs	r3, #2
 8004cac:	e000      	b.n	8004cb0 <__cvt+0x40>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	aa07      	add	r2, sp, #28
 8004cb2:	9204      	str	r2, [sp, #16]
 8004cb4:	aa06      	add	r2, sp, #24
 8004cb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cba:	e9cd 3600 	strd	r3, r6, [sp]
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	f000 fe7d 	bl	80059c0 <_dtoa_r>
 8004cc6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004cca:	4607      	mov	r7, r0
 8004ccc:	d119      	bne.n	8004d02 <__cvt+0x92>
 8004cce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004cd0:	07db      	lsls	r3, r3, #31
 8004cd2:	d50e      	bpl.n	8004cf2 <__cvt+0x82>
 8004cd4:	eb00 0906 	add.w	r9, r0, r6
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4629      	mov	r1, r5
 8004ce0:	f7fb fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce4:	b108      	cbz	r0, 8004cea <__cvt+0x7a>
 8004ce6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004cea:	2230      	movs	r2, #48	@ 0x30
 8004cec:	9b07      	ldr	r3, [sp, #28]
 8004cee:	454b      	cmp	r3, r9
 8004cf0:	d31e      	bcc.n	8004d30 <__cvt+0xc0>
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	9b07      	ldr	r3, [sp, #28]
 8004cf6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004cf8:	1bdb      	subs	r3, r3, r7
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	b008      	add	sp, #32
 8004cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d06:	eb00 0906 	add.w	r9, r0, r6
 8004d0a:	d1e5      	bne.n	8004cd8 <__cvt+0x68>
 8004d0c:	7803      	ldrb	r3, [r0, #0]
 8004d0e:	2b30      	cmp	r3, #48	@ 0x30
 8004d10:	d10a      	bne.n	8004d28 <__cvt+0xb8>
 8004d12:	2200      	movs	r2, #0
 8004d14:	2300      	movs	r3, #0
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	f7fb fe45 	bl	80009a8 <__aeabi_dcmpeq>
 8004d1e:	b918      	cbnz	r0, 8004d28 <__cvt+0xb8>
 8004d20:	f1c6 0601 	rsb	r6, r6, #1
 8004d24:	f8ca 6000 	str.w	r6, [sl]
 8004d28:	f8da 3000 	ldr.w	r3, [sl]
 8004d2c:	4499      	add	r9, r3
 8004d2e:	e7d3      	b.n	8004cd8 <__cvt+0x68>
 8004d30:	1c59      	adds	r1, r3, #1
 8004d32:	9107      	str	r1, [sp, #28]
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e7d9      	b.n	8004cec <__cvt+0x7c>

08004d38 <__exponent>:
 8004d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	bfb6      	itet	lt
 8004d3e:	232d      	movlt	r3, #45	@ 0x2d
 8004d40:	232b      	movge	r3, #43	@ 0x2b
 8004d42:	4249      	neglt	r1, r1
 8004d44:	2909      	cmp	r1, #9
 8004d46:	7002      	strb	r2, [r0, #0]
 8004d48:	7043      	strb	r3, [r0, #1]
 8004d4a:	dd29      	ble.n	8004da0 <__exponent+0x68>
 8004d4c:	f10d 0307 	add.w	r3, sp, #7
 8004d50:	461d      	mov	r5, r3
 8004d52:	270a      	movs	r7, #10
 8004d54:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d58:	461a      	mov	r2, r3
 8004d5a:	fb07 1416 	mls	r4, r7, r6, r1
 8004d5e:	3430      	adds	r4, #48	@ 0x30
 8004d60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d64:	460c      	mov	r4, r1
 8004d66:	2c63      	cmp	r4, #99	@ 0x63
 8004d68:	4631      	mov	r1, r6
 8004d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d6e:	dcf1      	bgt.n	8004d54 <__exponent+0x1c>
 8004d70:	3130      	adds	r1, #48	@ 0x30
 8004d72:	1e94      	subs	r4, r2, #2
 8004d74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d78:	4623      	mov	r3, r4
 8004d7a:	1c41      	adds	r1, r0, #1
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	d30a      	bcc.n	8004d96 <__exponent+0x5e>
 8004d80:	f10d 0309 	add.w	r3, sp, #9
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	42ac      	cmp	r4, r5
 8004d88:	bf88      	it	hi
 8004d8a:	2300      	movhi	r3, #0
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	4403      	add	r3, r0
 8004d90:	1a18      	subs	r0, r3, r0
 8004d92:	b003      	add	sp, #12
 8004d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d9e:	e7ed      	b.n	8004d7c <__exponent+0x44>
 8004da0:	2330      	movs	r3, #48	@ 0x30
 8004da2:	3130      	adds	r1, #48	@ 0x30
 8004da4:	7083      	strb	r3, [r0, #2]
 8004da6:	70c1      	strb	r1, [r0, #3]
 8004da8:	1d03      	adds	r3, r0, #4
 8004daa:	e7f1      	b.n	8004d90 <__exponent+0x58>

08004dac <_printf_float>:
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	b091      	sub	sp, #68	@ 0x44
 8004db2:	460c      	mov	r4, r1
 8004db4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004db8:	4616      	mov	r6, r2
 8004dba:	461f      	mov	r7, r3
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	f000 fce1 	bl	8005784 <_localeconv_r>
 8004dc2:	6803      	ldr	r3, [r0, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	9308      	str	r3, [sp, #32]
 8004dc8:	f7fb f9c2 	bl	8000150 <strlen>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	930e      	str	r3, [sp, #56]	@ 0x38
 8004dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd4:	9009      	str	r0, [sp, #36]	@ 0x24
 8004dd6:	3307      	adds	r3, #7
 8004dd8:	f023 0307 	bic.w	r3, r3, #7
 8004ddc:	f103 0208 	add.w	r2, r3, #8
 8004de0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004de4:	f8d4 b000 	ldr.w	fp, [r4]
 8004de8:	f8c8 2000 	str.w	r2, [r8]
 8004dec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004df0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004df4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004df6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e06:	4b9c      	ldr	r3, [pc, #624]	@ (8005078 <_printf_float+0x2cc>)
 8004e08:	f7fb fe00 	bl	8000a0c <__aeabi_dcmpun>
 8004e0c:	bb70      	cbnz	r0, 8004e6c <_printf_float+0xc0>
 8004e0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	4b98      	ldr	r3, [pc, #608]	@ (8005078 <_printf_float+0x2cc>)
 8004e18:	f7fb fdda 	bl	80009d0 <__aeabi_dcmple>
 8004e1c:	bb30      	cbnz	r0, 8004e6c <_printf_float+0xc0>
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2300      	movs	r3, #0
 8004e22:	4640      	mov	r0, r8
 8004e24:	4649      	mov	r1, r9
 8004e26:	f7fb fdc9 	bl	80009bc <__aeabi_dcmplt>
 8004e2a:	b110      	cbz	r0, 8004e32 <_printf_float+0x86>
 8004e2c:	232d      	movs	r3, #45	@ 0x2d
 8004e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e32:	4a92      	ldr	r2, [pc, #584]	@ (800507c <_printf_float+0x2d0>)
 8004e34:	4b92      	ldr	r3, [pc, #584]	@ (8005080 <_printf_float+0x2d4>)
 8004e36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e3a:	bf94      	ite	ls
 8004e3c:	4690      	movls	r8, r2
 8004e3e:	4698      	movhi	r8, r3
 8004e40:	2303      	movs	r3, #3
 8004e42:	f04f 0900 	mov.w	r9, #0
 8004e46:	6123      	str	r3, [r4, #16]
 8004e48:	f02b 0304 	bic.w	r3, fp, #4
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	4633      	mov	r3, r6
 8004e50:	4621      	mov	r1, r4
 8004e52:	4628      	mov	r0, r5
 8004e54:	9700      	str	r7, [sp, #0]
 8004e56:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004e58:	f000 f9d4 	bl	8005204 <_printf_common>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f040 8090 	bne.w	8004f82 <_printf_float+0x1d6>
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	b011      	add	sp, #68	@ 0x44
 8004e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fdca 	bl	8000a0c <__aeabi_dcmpun>
 8004e78:	b148      	cbz	r0, 8004e8e <_printf_float+0xe2>
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bfb8      	it	lt
 8004e80:	232d      	movlt	r3, #45	@ 0x2d
 8004e82:	4a80      	ldr	r2, [pc, #512]	@ (8005084 <_printf_float+0x2d8>)
 8004e84:	bfb8      	it	lt
 8004e86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005088 <_printf_float+0x2dc>)
 8004e8c:	e7d3      	b.n	8004e36 <_printf_float+0x8a>
 8004e8e:	6863      	ldr	r3, [r4, #4]
 8004e90:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	d13f      	bne.n	8004f18 <_printf_float+0x16c>
 8004e98:	2306      	movs	r3, #6
 8004e9a:	6063      	str	r3, [r4, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	9206      	str	r2, [sp, #24]
 8004ea6:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ea8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004eac:	aa0d      	add	r2, sp, #52	@ 0x34
 8004eae:	9203      	str	r2, [sp, #12]
 8004eb0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004eb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004eb8:	6863      	ldr	r3, [r4, #4]
 8004eba:	4642      	mov	r2, r8
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ec4:	f7ff fed4 	bl	8004c70 <__cvt>
 8004ec8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004eca:	4680      	mov	r8, r0
 8004ecc:	2947      	cmp	r1, #71	@ 0x47
 8004ece:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004ed0:	d128      	bne.n	8004f24 <_printf_float+0x178>
 8004ed2:	1cc8      	adds	r0, r1, #3
 8004ed4:	db02      	blt.n	8004edc <_printf_float+0x130>
 8004ed6:	6863      	ldr	r3, [r4, #4]
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	dd40      	ble.n	8004f5e <_printf_float+0x1b2>
 8004edc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ee0:	fa5f fa8a 	uxtb.w	sl, sl
 8004ee4:	4652      	mov	r2, sl
 8004ee6:	3901      	subs	r1, #1
 8004ee8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004eec:	910d      	str	r1, [sp, #52]	@ 0x34
 8004eee:	f7ff ff23 	bl	8004d38 <__exponent>
 8004ef2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ef4:	4681      	mov	r9, r0
 8004ef6:	1813      	adds	r3, r2, r0
 8004ef8:	2a01      	cmp	r2, #1
 8004efa:	6123      	str	r3, [r4, #16]
 8004efc:	dc02      	bgt.n	8004f04 <_printf_float+0x158>
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	07d2      	lsls	r2, r2, #31
 8004f02:	d501      	bpl.n	8004f08 <_printf_float+0x15c>
 8004f04:	3301      	adds	r3, #1
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d09e      	beq.n	8004e4e <_printf_float+0xa2>
 8004f10:	232d      	movs	r3, #45	@ 0x2d
 8004f12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f16:	e79a      	b.n	8004e4e <_printf_float+0xa2>
 8004f18:	2947      	cmp	r1, #71	@ 0x47
 8004f1a:	d1bf      	bne.n	8004e9c <_printf_float+0xf0>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1bd      	bne.n	8004e9c <_printf_float+0xf0>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e7ba      	b.n	8004e9a <_printf_float+0xee>
 8004f24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f28:	d9dc      	bls.n	8004ee4 <_printf_float+0x138>
 8004f2a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f2e:	d118      	bne.n	8004f62 <_printf_float+0x1b6>
 8004f30:	2900      	cmp	r1, #0
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	dd0b      	ble.n	8004f4e <_printf_float+0x1a2>
 8004f36:	6121      	str	r1, [r4, #16]
 8004f38:	b913      	cbnz	r3, 8004f40 <_printf_float+0x194>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	07d0      	lsls	r0, r2, #31
 8004f3e:	d502      	bpl.n	8004f46 <_printf_float+0x19a>
 8004f40:	3301      	adds	r3, #1
 8004f42:	440b      	add	r3, r1
 8004f44:	6123      	str	r3, [r4, #16]
 8004f46:	f04f 0900 	mov.w	r9, #0
 8004f4a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004f4c:	e7dc      	b.n	8004f08 <_printf_float+0x15c>
 8004f4e:	b913      	cbnz	r3, 8004f56 <_printf_float+0x1aa>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	07d2      	lsls	r2, r2, #31
 8004f54:	d501      	bpl.n	8004f5a <_printf_float+0x1ae>
 8004f56:	3302      	adds	r3, #2
 8004f58:	e7f4      	b.n	8004f44 <_printf_float+0x198>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7f2      	b.n	8004f44 <_printf_float+0x198>
 8004f5e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f64:	4299      	cmp	r1, r3
 8004f66:	db05      	blt.n	8004f74 <_printf_float+0x1c8>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	6121      	str	r1, [r4, #16]
 8004f6c:	07d8      	lsls	r0, r3, #31
 8004f6e:	d5ea      	bpl.n	8004f46 <_printf_float+0x19a>
 8004f70:	1c4b      	adds	r3, r1, #1
 8004f72:	e7e7      	b.n	8004f44 <_printf_float+0x198>
 8004f74:	2900      	cmp	r1, #0
 8004f76:	bfcc      	ite	gt
 8004f78:	2201      	movgt	r2, #1
 8004f7a:	f1c1 0202 	rsble	r2, r1, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	e7e0      	b.n	8004f44 <_printf_float+0x198>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	055a      	lsls	r2, r3, #21
 8004f86:	d407      	bmi.n	8004f98 <_printf_float+0x1ec>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	4642      	mov	r2, r8
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	d12b      	bne.n	8004fee <_printf_float+0x242>
 8004f96:	e764      	b.n	8004e62 <_printf_float+0xb6>
 8004f98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f9c:	f240 80dc 	bls.w	8005158 <_printf_float+0x3ac>
 8004fa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f7fb fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d033      	beq.n	8005018 <_printf_float+0x26c>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	4a35      	ldr	r2, [pc, #212]	@ (800508c <_printf_float+0x2e0>)
 8004fb8:	47b8      	blx	r7
 8004fba:	3001      	adds	r0, #1
 8004fbc:	f43f af51 	beq.w	8004e62 <_printf_float+0xb6>
 8004fc0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004fc4:	4543      	cmp	r3, r8
 8004fc6:	db02      	blt.n	8004fce <_printf_float+0x222>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	07d8      	lsls	r0, r3, #31
 8004fcc:	d50f      	bpl.n	8004fee <_printf_float+0x242>
 8004fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	f43f af42 	beq.w	8004e62 <_printf_float+0xb6>
 8004fde:	f04f 0900 	mov.w	r9, #0
 8004fe2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fe6:	f104 0a1a 	add.w	sl, r4, #26
 8004fea:	45c8      	cmp	r8, r9
 8004fec:	dc09      	bgt.n	8005002 <_printf_float+0x256>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	079b      	lsls	r3, r3, #30
 8004ff2:	f100 8102 	bmi.w	80051fa <_printf_float+0x44e>
 8004ff6:	68e0      	ldr	r0, [r4, #12]
 8004ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ffa:	4298      	cmp	r0, r3
 8004ffc:	bfb8      	it	lt
 8004ffe:	4618      	movlt	r0, r3
 8005000:	e731      	b.n	8004e66 <_printf_float+0xba>
 8005002:	2301      	movs	r3, #1
 8005004:	4652      	mov	r2, sl
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	f43f af28 	beq.w	8004e62 <_printf_float+0xb6>
 8005012:	f109 0901 	add.w	r9, r9, #1
 8005016:	e7e8      	b.n	8004fea <_printf_float+0x23e>
 8005018:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800501a:	2b00      	cmp	r3, #0
 800501c:	dc38      	bgt.n	8005090 <_printf_float+0x2e4>
 800501e:	2301      	movs	r3, #1
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	4a19      	ldr	r2, [pc, #100]	@ (800508c <_printf_float+0x2e0>)
 8005026:	47b8      	blx	r7
 8005028:	3001      	adds	r0, #1
 800502a:	f43f af1a 	beq.w	8004e62 <_printf_float+0xb6>
 800502e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005032:	ea59 0303 	orrs.w	r3, r9, r3
 8005036:	d102      	bne.n	800503e <_printf_float+0x292>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	07d9      	lsls	r1, r3, #31
 800503c:	d5d7      	bpl.n	8004fee <_printf_float+0x242>
 800503e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f af0a 	beq.w	8004e62 <_printf_float+0xb6>
 800504e:	f04f 0a00 	mov.w	sl, #0
 8005052:	f104 0b1a 	add.w	fp, r4, #26
 8005056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005058:	425b      	negs	r3, r3
 800505a:	4553      	cmp	r3, sl
 800505c:	dc01      	bgt.n	8005062 <_printf_float+0x2b6>
 800505e:	464b      	mov	r3, r9
 8005060:	e793      	b.n	8004f8a <_printf_float+0x1de>
 8005062:	2301      	movs	r3, #1
 8005064:	465a      	mov	r2, fp
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	f43f aef8 	beq.w	8004e62 <_printf_float+0xb6>
 8005072:	f10a 0a01 	add.w	sl, sl, #1
 8005076:	e7ee      	b.n	8005056 <_printf_float+0x2aa>
 8005078:	7fefffff 	.word	0x7fefffff
 800507c:	08007ba6 	.word	0x08007ba6
 8005080:	08007baa 	.word	0x08007baa
 8005084:	08007bae 	.word	0x08007bae
 8005088:	08007bb2 	.word	0x08007bb2
 800508c:	08007bb6 	.word	0x08007bb6
 8005090:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005092:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005096:	4553      	cmp	r3, sl
 8005098:	bfa8      	it	ge
 800509a:	4653      	movge	r3, sl
 800509c:	2b00      	cmp	r3, #0
 800509e:	4699      	mov	r9, r3
 80050a0:	dc36      	bgt.n	8005110 <_printf_float+0x364>
 80050a2:	f04f 0b00 	mov.w	fp, #0
 80050a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050aa:	f104 021a 	add.w	r2, r4, #26
 80050ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80050b2:	eba3 0309 	sub.w	r3, r3, r9
 80050b6:	455b      	cmp	r3, fp
 80050b8:	dc31      	bgt.n	800511e <_printf_float+0x372>
 80050ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050bc:	459a      	cmp	sl, r3
 80050be:	dc3a      	bgt.n	8005136 <_printf_float+0x38a>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	07da      	lsls	r2, r3, #31
 80050c4:	d437      	bmi.n	8005136 <_printf_float+0x38a>
 80050c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050c8:	ebaa 0903 	sub.w	r9, sl, r3
 80050cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050ce:	ebaa 0303 	sub.w	r3, sl, r3
 80050d2:	4599      	cmp	r9, r3
 80050d4:	bfa8      	it	ge
 80050d6:	4699      	movge	r9, r3
 80050d8:	f1b9 0f00 	cmp.w	r9, #0
 80050dc:	dc33      	bgt.n	8005146 <_printf_float+0x39a>
 80050de:	f04f 0800 	mov.w	r8, #0
 80050e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e6:	f104 0b1a 	add.w	fp, r4, #26
 80050ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050ec:	ebaa 0303 	sub.w	r3, sl, r3
 80050f0:	eba3 0309 	sub.w	r3, r3, r9
 80050f4:	4543      	cmp	r3, r8
 80050f6:	f77f af7a 	ble.w	8004fee <_printf_float+0x242>
 80050fa:	2301      	movs	r3, #1
 80050fc:	465a      	mov	r2, fp
 80050fe:	4631      	mov	r1, r6
 8005100:	4628      	mov	r0, r5
 8005102:	47b8      	blx	r7
 8005104:	3001      	adds	r0, #1
 8005106:	f43f aeac 	beq.w	8004e62 <_printf_float+0xb6>
 800510a:	f108 0801 	add.w	r8, r8, #1
 800510e:	e7ec      	b.n	80050ea <_printf_float+0x33e>
 8005110:	4642      	mov	r2, r8
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	d1c2      	bne.n	80050a2 <_printf_float+0x2f6>
 800511c:	e6a1      	b.n	8004e62 <_printf_float+0xb6>
 800511e:	2301      	movs	r3, #1
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	920a      	str	r2, [sp, #40]	@ 0x28
 8005126:	47b8      	blx	r7
 8005128:	3001      	adds	r0, #1
 800512a:	f43f ae9a 	beq.w	8004e62 <_printf_float+0xb6>
 800512e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005130:	f10b 0b01 	add.w	fp, fp, #1
 8005134:	e7bb      	b.n	80050ae <_printf_float+0x302>
 8005136:	4631      	mov	r1, r6
 8005138:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	d1c0      	bne.n	80050c6 <_printf_float+0x31a>
 8005144:	e68d      	b.n	8004e62 <_printf_float+0xb6>
 8005146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005148:	464b      	mov	r3, r9
 800514a:	4631      	mov	r1, r6
 800514c:	4628      	mov	r0, r5
 800514e:	4442      	add	r2, r8
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	d1c3      	bne.n	80050de <_printf_float+0x332>
 8005156:	e684      	b.n	8004e62 <_printf_float+0xb6>
 8005158:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800515c:	f1ba 0f01 	cmp.w	sl, #1
 8005160:	dc01      	bgt.n	8005166 <_printf_float+0x3ba>
 8005162:	07db      	lsls	r3, r3, #31
 8005164:	d536      	bpl.n	80051d4 <_printf_float+0x428>
 8005166:	2301      	movs	r3, #1
 8005168:	4642      	mov	r2, r8
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	47b8      	blx	r7
 8005170:	3001      	adds	r0, #1
 8005172:	f43f ae76 	beq.w	8004e62 <_printf_float+0xb6>
 8005176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	f43f ae6e 	beq.w	8004e62 <_printf_float+0xb6>
 8005186:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800518a:	2200      	movs	r2, #0
 800518c:	2300      	movs	r3, #0
 800518e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005192:	f7fb fc09 	bl	80009a8 <__aeabi_dcmpeq>
 8005196:	b9c0      	cbnz	r0, 80051ca <_printf_float+0x41e>
 8005198:	4653      	mov	r3, sl
 800519a:	f108 0201 	add.w	r2, r8, #1
 800519e:	4631      	mov	r1, r6
 80051a0:	4628      	mov	r0, r5
 80051a2:	47b8      	blx	r7
 80051a4:	3001      	adds	r0, #1
 80051a6:	d10c      	bne.n	80051c2 <_printf_float+0x416>
 80051a8:	e65b      	b.n	8004e62 <_printf_float+0xb6>
 80051aa:	2301      	movs	r3, #1
 80051ac:	465a      	mov	r2, fp
 80051ae:	4631      	mov	r1, r6
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b8      	blx	r7
 80051b4:	3001      	adds	r0, #1
 80051b6:	f43f ae54 	beq.w	8004e62 <_printf_float+0xb6>
 80051ba:	f108 0801 	add.w	r8, r8, #1
 80051be:	45d0      	cmp	r8, sl
 80051c0:	dbf3      	blt.n	80051aa <_printf_float+0x3fe>
 80051c2:	464b      	mov	r3, r9
 80051c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80051c8:	e6e0      	b.n	8004f8c <_printf_float+0x1e0>
 80051ca:	f04f 0800 	mov.w	r8, #0
 80051ce:	f104 0b1a 	add.w	fp, r4, #26
 80051d2:	e7f4      	b.n	80051be <_printf_float+0x412>
 80051d4:	2301      	movs	r3, #1
 80051d6:	4642      	mov	r2, r8
 80051d8:	e7e1      	b.n	800519e <_printf_float+0x3f2>
 80051da:	2301      	movs	r3, #1
 80051dc:	464a      	mov	r2, r9
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	f43f ae3c 	beq.w	8004e62 <_printf_float+0xb6>
 80051ea:	f108 0801 	add.w	r8, r8, #1
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80051f2:	1a5b      	subs	r3, r3, r1
 80051f4:	4543      	cmp	r3, r8
 80051f6:	dcf0      	bgt.n	80051da <_printf_float+0x42e>
 80051f8:	e6fd      	b.n	8004ff6 <_printf_float+0x24a>
 80051fa:	f04f 0800 	mov.w	r8, #0
 80051fe:	f104 0919 	add.w	r9, r4, #25
 8005202:	e7f4      	b.n	80051ee <_printf_float+0x442>

08005204 <_printf_common>:
 8005204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	4616      	mov	r6, r2
 800520a:	4698      	mov	r8, r3
 800520c:	688a      	ldr	r2, [r1, #8]
 800520e:	690b      	ldr	r3, [r1, #16]
 8005210:	4607      	mov	r7, r0
 8005212:	4293      	cmp	r3, r2
 8005214:	bfb8      	it	lt
 8005216:	4613      	movlt	r3, r2
 8005218:	6033      	str	r3, [r6, #0]
 800521a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800521e:	460c      	mov	r4, r1
 8005220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005224:	b10a      	cbz	r2, 800522a <_printf_common+0x26>
 8005226:	3301      	adds	r3, #1
 8005228:	6033      	str	r3, [r6, #0]
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	0699      	lsls	r1, r3, #26
 800522e:	bf42      	ittt	mi
 8005230:	6833      	ldrmi	r3, [r6, #0]
 8005232:	3302      	addmi	r3, #2
 8005234:	6033      	strmi	r3, [r6, #0]
 8005236:	6825      	ldr	r5, [r4, #0]
 8005238:	f015 0506 	ands.w	r5, r5, #6
 800523c:	d106      	bne.n	800524c <_printf_common+0x48>
 800523e:	f104 0a19 	add.w	sl, r4, #25
 8005242:	68e3      	ldr	r3, [r4, #12]
 8005244:	6832      	ldr	r2, [r6, #0]
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	42ab      	cmp	r3, r5
 800524a:	dc2b      	bgt.n	80052a4 <_printf_common+0xa0>
 800524c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005250:	6822      	ldr	r2, [r4, #0]
 8005252:	3b00      	subs	r3, #0
 8005254:	bf18      	it	ne
 8005256:	2301      	movne	r3, #1
 8005258:	0692      	lsls	r2, r2, #26
 800525a:	d430      	bmi.n	80052be <_printf_common+0xba>
 800525c:	4641      	mov	r1, r8
 800525e:	4638      	mov	r0, r7
 8005260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005264:	47c8      	blx	r9
 8005266:	3001      	adds	r0, #1
 8005268:	d023      	beq.n	80052b2 <_printf_common+0xae>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	6922      	ldr	r2, [r4, #16]
 800526e:	f003 0306 	and.w	r3, r3, #6
 8005272:	2b04      	cmp	r3, #4
 8005274:	bf14      	ite	ne
 8005276:	2500      	movne	r5, #0
 8005278:	6833      	ldreq	r3, [r6, #0]
 800527a:	f04f 0600 	mov.w	r6, #0
 800527e:	bf08      	it	eq
 8005280:	68e5      	ldreq	r5, [r4, #12]
 8005282:	f104 041a 	add.w	r4, r4, #26
 8005286:	bf08      	it	eq
 8005288:	1aed      	subeq	r5, r5, r3
 800528a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800528e:	bf08      	it	eq
 8005290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005294:	4293      	cmp	r3, r2
 8005296:	bfc4      	itt	gt
 8005298:	1a9b      	subgt	r3, r3, r2
 800529a:	18ed      	addgt	r5, r5, r3
 800529c:	42b5      	cmp	r5, r6
 800529e:	d11a      	bne.n	80052d6 <_printf_common+0xd2>
 80052a0:	2000      	movs	r0, #0
 80052a2:	e008      	b.n	80052b6 <_printf_common+0xb2>
 80052a4:	2301      	movs	r3, #1
 80052a6:	4652      	mov	r2, sl
 80052a8:	4641      	mov	r1, r8
 80052aa:	4638      	mov	r0, r7
 80052ac:	47c8      	blx	r9
 80052ae:	3001      	adds	r0, #1
 80052b0:	d103      	bne.n	80052ba <_printf_common+0xb6>
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ba:	3501      	adds	r5, #1
 80052bc:	e7c1      	b.n	8005242 <_printf_common+0x3e>
 80052be:	2030      	movs	r0, #48	@ 0x30
 80052c0:	18e1      	adds	r1, r4, r3
 80052c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052cc:	4422      	add	r2, r4
 80052ce:	3302      	adds	r3, #2
 80052d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052d4:	e7c2      	b.n	800525c <_printf_common+0x58>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4622      	mov	r2, r4
 80052da:	4641      	mov	r1, r8
 80052dc:	4638      	mov	r0, r7
 80052de:	47c8      	blx	r9
 80052e0:	3001      	adds	r0, #1
 80052e2:	d0e6      	beq.n	80052b2 <_printf_common+0xae>
 80052e4:	3601      	adds	r6, #1
 80052e6:	e7d9      	b.n	800529c <_printf_common+0x98>

080052e8 <_printf_i>:
 80052e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	7e0f      	ldrb	r7, [r1, #24]
 80052ee:	4691      	mov	r9, r2
 80052f0:	2f78      	cmp	r7, #120	@ 0x78
 80052f2:	4680      	mov	r8, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	469a      	mov	sl, r3
 80052f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052fe:	d807      	bhi.n	8005310 <_printf_i+0x28>
 8005300:	2f62      	cmp	r7, #98	@ 0x62
 8005302:	d80a      	bhi.n	800531a <_printf_i+0x32>
 8005304:	2f00      	cmp	r7, #0
 8005306:	f000 80d3 	beq.w	80054b0 <_printf_i+0x1c8>
 800530a:	2f58      	cmp	r7, #88	@ 0x58
 800530c:	f000 80ba 	beq.w	8005484 <_printf_i+0x19c>
 8005310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005318:	e03a      	b.n	8005390 <_printf_i+0xa8>
 800531a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800531e:	2b15      	cmp	r3, #21
 8005320:	d8f6      	bhi.n	8005310 <_printf_i+0x28>
 8005322:	a101      	add	r1, pc, #4	@ (adr r1, 8005328 <_printf_i+0x40>)
 8005324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005328:	08005381 	.word	0x08005381
 800532c:	08005395 	.word	0x08005395
 8005330:	08005311 	.word	0x08005311
 8005334:	08005311 	.word	0x08005311
 8005338:	08005311 	.word	0x08005311
 800533c:	08005311 	.word	0x08005311
 8005340:	08005395 	.word	0x08005395
 8005344:	08005311 	.word	0x08005311
 8005348:	08005311 	.word	0x08005311
 800534c:	08005311 	.word	0x08005311
 8005350:	08005311 	.word	0x08005311
 8005354:	08005497 	.word	0x08005497
 8005358:	080053bf 	.word	0x080053bf
 800535c:	08005451 	.word	0x08005451
 8005360:	08005311 	.word	0x08005311
 8005364:	08005311 	.word	0x08005311
 8005368:	080054b9 	.word	0x080054b9
 800536c:	08005311 	.word	0x08005311
 8005370:	080053bf 	.word	0x080053bf
 8005374:	08005311 	.word	0x08005311
 8005378:	08005311 	.word	0x08005311
 800537c:	08005459 	.word	0x08005459
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6032      	str	r2, [r6, #0]
 8005388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800538c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005390:	2301      	movs	r3, #1
 8005392:	e09e      	b.n	80054d2 <_printf_i+0x1ea>
 8005394:	6833      	ldr	r3, [r6, #0]
 8005396:	6820      	ldr	r0, [r4, #0]
 8005398:	1d19      	adds	r1, r3, #4
 800539a:	6031      	str	r1, [r6, #0]
 800539c:	0606      	lsls	r6, r0, #24
 800539e:	d501      	bpl.n	80053a4 <_printf_i+0xbc>
 80053a0:	681d      	ldr	r5, [r3, #0]
 80053a2:	e003      	b.n	80053ac <_printf_i+0xc4>
 80053a4:	0645      	lsls	r5, r0, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_printf_i+0xb8>
 80053a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	da03      	bge.n	80053b8 <_printf_i+0xd0>
 80053b0:	232d      	movs	r3, #45	@ 0x2d
 80053b2:	426d      	negs	r5, r5
 80053b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b8:	230a      	movs	r3, #10
 80053ba:	4859      	ldr	r0, [pc, #356]	@ (8005520 <_printf_i+0x238>)
 80053bc:	e011      	b.n	80053e2 <_printf_i+0xfa>
 80053be:	6821      	ldr	r1, [r4, #0]
 80053c0:	6833      	ldr	r3, [r6, #0]
 80053c2:	0608      	lsls	r0, r1, #24
 80053c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80053c8:	d402      	bmi.n	80053d0 <_printf_i+0xe8>
 80053ca:	0649      	lsls	r1, r1, #25
 80053cc:	bf48      	it	mi
 80053ce:	b2ad      	uxthmi	r5, r5
 80053d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80053d2:	6033      	str	r3, [r6, #0]
 80053d4:	bf14      	ite	ne
 80053d6:	230a      	movne	r3, #10
 80053d8:	2308      	moveq	r3, #8
 80053da:	4851      	ldr	r0, [pc, #324]	@ (8005520 <_printf_i+0x238>)
 80053dc:	2100      	movs	r1, #0
 80053de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053e2:	6866      	ldr	r6, [r4, #4]
 80053e4:	2e00      	cmp	r6, #0
 80053e6:	bfa8      	it	ge
 80053e8:	6821      	ldrge	r1, [r4, #0]
 80053ea:	60a6      	str	r6, [r4, #8]
 80053ec:	bfa4      	itt	ge
 80053ee:	f021 0104 	bicge.w	r1, r1, #4
 80053f2:	6021      	strge	r1, [r4, #0]
 80053f4:	b90d      	cbnz	r5, 80053fa <_printf_i+0x112>
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	d04b      	beq.n	8005492 <_printf_i+0x1aa>
 80053fa:	4616      	mov	r6, r2
 80053fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005400:	fb03 5711 	mls	r7, r3, r1, r5
 8005404:	5dc7      	ldrb	r7, [r0, r7]
 8005406:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800540a:	462f      	mov	r7, r5
 800540c:	42bb      	cmp	r3, r7
 800540e:	460d      	mov	r5, r1
 8005410:	d9f4      	bls.n	80053fc <_printf_i+0x114>
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10b      	bne.n	800542e <_printf_i+0x146>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	07df      	lsls	r7, r3, #31
 800541a:	d508      	bpl.n	800542e <_printf_i+0x146>
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	6861      	ldr	r1, [r4, #4]
 8005420:	4299      	cmp	r1, r3
 8005422:	bfde      	ittt	le
 8005424:	2330      	movle	r3, #48	@ 0x30
 8005426:	f806 3c01 	strble.w	r3, [r6, #-1]
 800542a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800542e:	1b92      	subs	r2, r2, r6
 8005430:	6122      	str	r2, [r4, #16]
 8005432:	464b      	mov	r3, r9
 8005434:	4621      	mov	r1, r4
 8005436:	4640      	mov	r0, r8
 8005438:	f8cd a000 	str.w	sl, [sp]
 800543c:	aa03      	add	r2, sp, #12
 800543e:	f7ff fee1 	bl	8005204 <_printf_common>
 8005442:	3001      	adds	r0, #1
 8005444:	d14a      	bne.n	80054dc <_printf_i+0x1f4>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	b004      	add	sp, #16
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f043 0320 	orr.w	r3, r3, #32
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	2778      	movs	r7, #120	@ 0x78
 800545a:	4832      	ldr	r0, [pc, #200]	@ (8005524 <_printf_i+0x23c>)
 800545c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	6831      	ldr	r1, [r6, #0]
 8005464:	061f      	lsls	r7, r3, #24
 8005466:	f851 5b04 	ldr.w	r5, [r1], #4
 800546a:	d402      	bmi.n	8005472 <_printf_i+0x18a>
 800546c:	065f      	lsls	r7, r3, #25
 800546e:	bf48      	it	mi
 8005470:	b2ad      	uxthmi	r5, r5
 8005472:	6031      	str	r1, [r6, #0]
 8005474:	07d9      	lsls	r1, r3, #31
 8005476:	bf44      	itt	mi
 8005478:	f043 0320 	orrmi.w	r3, r3, #32
 800547c:	6023      	strmi	r3, [r4, #0]
 800547e:	b11d      	cbz	r5, 8005488 <_printf_i+0x1a0>
 8005480:	2310      	movs	r3, #16
 8005482:	e7ab      	b.n	80053dc <_printf_i+0xf4>
 8005484:	4826      	ldr	r0, [pc, #152]	@ (8005520 <_printf_i+0x238>)
 8005486:	e7e9      	b.n	800545c <_printf_i+0x174>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	f023 0320 	bic.w	r3, r3, #32
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	e7f6      	b.n	8005480 <_printf_i+0x198>
 8005492:	4616      	mov	r6, r2
 8005494:	e7bd      	b.n	8005412 <_printf_i+0x12a>
 8005496:	6833      	ldr	r3, [r6, #0]
 8005498:	6825      	ldr	r5, [r4, #0]
 800549a:	1d18      	adds	r0, r3, #4
 800549c:	6961      	ldr	r1, [r4, #20]
 800549e:	6030      	str	r0, [r6, #0]
 80054a0:	062e      	lsls	r6, r5, #24
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	d501      	bpl.n	80054aa <_printf_i+0x1c2>
 80054a6:	6019      	str	r1, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <_printf_i+0x1c8>
 80054aa:	0668      	lsls	r0, r5, #25
 80054ac:	d5fb      	bpl.n	80054a6 <_printf_i+0x1be>
 80054ae:	8019      	strh	r1, [r3, #0]
 80054b0:	2300      	movs	r3, #0
 80054b2:	4616      	mov	r6, r2
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	e7bc      	b.n	8005432 <_printf_i+0x14a>
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	2100      	movs	r1, #0
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	6032      	str	r2, [r6, #0]
 80054c0:	681e      	ldr	r6, [r3, #0]
 80054c2:	6862      	ldr	r2, [r4, #4]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f9d4 	bl	8005872 <memchr>
 80054ca:	b108      	cbz	r0, 80054d0 <_printf_i+0x1e8>
 80054cc:	1b80      	subs	r0, r0, r6
 80054ce:	6060      	str	r0, [r4, #4]
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	2300      	movs	r3, #0
 80054d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054da:	e7aa      	b.n	8005432 <_printf_i+0x14a>
 80054dc:	4632      	mov	r2, r6
 80054de:	4649      	mov	r1, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	47d0      	blx	sl
 80054e6:	3001      	adds	r0, #1
 80054e8:	d0ad      	beq.n	8005446 <_printf_i+0x15e>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	079b      	lsls	r3, r3, #30
 80054ee:	d413      	bmi.n	8005518 <_printf_i+0x230>
 80054f0:	68e0      	ldr	r0, [r4, #12]
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	4298      	cmp	r0, r3
 80054f6:	bfb8      	it	lt
 80054f8:	4618      	movlt	r0, r3
 80054fa:	e7a6      	b.n	800544a <_printf_i+0x162>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4632      	mov	r2, r6
 8005500:	4649      	mov	r1, r9
 8005502:	4640      	mov	r0, r8
 8005504:	47d0      	blx	sl
 8005506:	3001      	adds	r0, #1
 8005508:	d09d      	beq.n	8005446 <_printf_i+0x15e>
 800550a:	3501      	adds	r5, #1
 800550c:	68e3      	ldr	r3, [r4, #12]
 800550e:	9903      	ldr	r1, [sp, #12]
 8005510:	1a5b      	subs	r3, r3, r1
 8005512:	42ab      	cmp	r3, r5
 8005514:	dcf2      	bgt.n	80054fc <_printf_i+0x214>
 8005516:	e7eb      	b.n	80054f0 <_printf_i+0x208>
 8005518:	2500      	movs	r5, #0
 800551a:	f104 0619 	add.w	r6, r4, #25
 800551e:	e7f5      	b.n	800550c <_printf_i+0x224>
 8005520:	08007bb8 	.word	0x08007bb8
 8005524:	08007bc9 	.word	0x08007bc9

08005528 <std>:
 8005528:	2300      	movs	r3, #0
 800552a:	b510      	push	{r4, lr}
 800552c:	4604      	mov	r4, r0
 800552e:	e9c0 3300 	strd	r3, r3, [r0]
 8005532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005536:	6083      	str	r3, [r0, #8]
 8005538:	8181      	strh	r1, [r0, #12]
 800553a:	6643      	str	r3, [r0, #100]	@ 0x64
 800553c:	81c2      	strh	r2, [r0, #14]
 800553e:	6183      	str	r3, [r0, #24]
 8005540:	4619      	mov	r1, r3
 8005542:	2208      	movs	r2, #8
 8005544:	305c      	adds	r0, #92	@ 0x5c
 8005546:	f000 f914 	bl	8005772 <memset>
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <std+0x58>)
 800554c:	6224      	str	r4, [r4, #32]
 800554e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005550:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <std+0x5c>)
 8005552:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005554:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <std+0x60>)
 8005556:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005558:	4b0c      	ldr	r3, [pc, #48]	@ (800558c <std+0x64>)
 800555a:	6323      	str	r3, [r4, #48]	@ 0x30
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <std+0x68>)
 800555e:	429c      	cmp	r4, r3
 8005560:	d006      	beq.n	8005570 <std+0x48>
 8005562:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005566:	4294      	cmp	r4, r2
 8005568:	d002      	beq.n	8005570 <std+0x48>
 800556a:	33d0      	adds	r3, #208	@ 0xd0
 800556c:	429c      	cmp	r4, r3
 800556e:	d105      	bne.n	800557c <std+0x54>
 8005570:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005578:	f000 b978 	b.w	800586c <__retarget_lock_init_recursive>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	bf00      	nop
 8005580:	080056ed 	.word	0x080056ed
 8005584:	0800570f 	.word	0x0800570f
 8005588:	08005747 	.word	0x08005747
 800558c:	0800576b 	.word	0x0800576b
 8005590:	20000950 	.word	0x20000950

08005594 <stdio_exit_handler>:
 8005594:	4a02      	ldr	r2, [pc, #8]	@ (80055a0 <stdio_exit_handler+0xc>)
 8005596:	4903      	ldr	r1, [pc, #12]	@ (80055a4 <stdio_exit_handler+0x10>)
 8005598:	4803      	ldr	r0, [pc, #12]	@ (80055a8 <stdio_exit_handler+0x14>)
 800559a:	f000 b869 	b.w	8005670 <_fwalk_sglue>
 800559e:	bf00      	nop
 80055a0:	2000000c 	.word	0x2000000c
 80055a4:	080071fd 	.word	0x080071fd
 80055a8:	2000001c 	.word	0x2000001c

080055ac <cleanup_stdio>:
 80055ac:	6841      	ldr	r1, [r0, #4]
 80055ae:	4b0c      	ldr	r3, [pc, #48]	@ (80055e0 <cleanup_stdio+0x34>)
 80055b0:	b510      	push	{r4, lr}
 80055b2:	4299      	cmp	r1, r3
 80055b4:	4604      	mov	r4, r0
 80055b6:	d001      	beq.n	80055bc <cleanup_stdio+0x10>
 80055b8:	f001 fe20 	bl	80071fc <_fflush_r>
 80055bc:	68a1      	ldr	r1, [r4, #8]
 80055be:	4b09      	ldr	r3, [pc, #36]	@ (80055e4 <cleanup_stdio+0x38>)
 80055c0:	4299      	cmp	r1, r3
 80055c2:	d002      	beq.n	80055ca <cleanup_stdio+0x1e>
 80055c4:	4620      	mov	r0, r4
 80055c6:	f001 fe19 	bl	80071fc <_fflush_r>
 80055ca:	68e1      	ldr	r1, [r4, #12]
 80055cc:	4b06      	ldr	r3, [pc, #24]	@ (80055e8 <cleanup_stdio+0x3c>)
 80055ce:	4299      	cmp	r1, r3
 80055d0:	d004      	beq.n	80055dc <cleanup_stdio+0x30>
 80055d2:	4620      	mov	r0, r4
 80055d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d8:	f001 be10 	b.w	80071fc <_fflush_r>
 80055dc:	bd10      	pop	{r4, pc}
 80055de:	bf00      	nop
 80055e0:	20000950 	.word	0x20000950
 80055e4:	200009b8 	.word	0x200009b8
 80055e8:	20000a20 	.word	0x20000a20

080055ec <global_stdio_init.part.0>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <global_stdio_init.part.0+0x30>)
 80055f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005620 <global_stdio_init.part.0+0x34>)
 80055f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005624 <global_stdio_init.part.0+0x38>)
 80055f4:	4620      	mov	r0, r4
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	2104      	movs	r1, #4
 80055fa:	2200      	movs	r2, #0
 80055fc:	f7ff ff94 	bl	8005528 <std>
 8005600:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005604:	2201      	movs	r2, #1
 8005606:	2109      	movs	r1, #9
 8005608:	f7ff ff8e 	bl	8005528 <std>
 800560c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005610:	2202      	movs	r2, #2
 8005612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005616:	2112      	movs	r1, #18
 8005618:	f7ff bf86 	b.w	8005528 <std>
 800561c:	20000a88 	.word	0x20000a88
 8005620:	20000950 	.word	0x20000950
 8005624:	08005595 	.word	0x08005595

08005628 <__sfp_lock_acquire>:
 8005628:	4801      	ldr	r0, [pc, #4]	@ (8005630 <__sfp_lock_acquire+0x8>)
 800562a:	f000 b920 	b.w	800586e <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	20000a91 	.word	0x20000a91

08005634 <__sfp_lock_release>:
 8005634:	4801      	ldr	r0, [pc, #4]	@ (800563c <__sfp_lock_release+0x8>)
 8005636:	f000 b91b 	b.w	8005870 <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	20000a91 	.word	0x20000a91

08005640 <__sinit>:
 8005640:	b510      	push	{r4, lr}
 8005642:	4604      	mov	r4, r0
 8005644:	f7ff fff0 	bl	8005628 <__sfp_lock_acquire>
 8005648:	6a23      	ldr	r3, [r4, #32]
 800564a:	b11b      	cbz	r3, 8005654 <__sinit+0x14>
 800564c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005650:	f7ff bff0 	b.w	8005634 <__sfp_lock_release>
 8005654:	4b04      	ldr	r3, [pc, #16]	@ (8005668 <__sinit+0x28>)
 8005656:	6223      	str	r3, [r4, #32]
 8005658:	4b04      	ldr	r3, [pc, #16]	@ (800566c <__sinit+0x2c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f5      	bne.n	800564c <__sinit+0xc>
 8005660:	f7ff ffc4 	bl	80055ec <global_stdio_init.part.0>
 8005664:	e7f2      	b.n	800564c <__sinit+0xc>
 8005666:	bf00      	nop
 8005668:	080055ad 	.word	0x080055ad
 800566c:	20000a88 	.word	0x20000a88

08005670 <_fwalk_sglue>:
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	4607      	mov	r7, r0
 8005676:	4688      	mov	r8, r1
 8005678:	4614      	mov	r4, r2
 800567a:	2600      	movs	r6, #0
 800567c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005680:	f1b9 0901 	subs.w	r9, r9, #1
 8005684:	d505      	bpl.n	8005692 <_fwalk_sglue+0x22>
 8005686:	6824      	ldr	r4, [r4, #0]
 8005688:	2c00      	cmp	r4, #0
 800568a:	d1f7      	bne.n	800567c <_fwalk_sglue+0xc>
 800568c:	4630      	mov	r0, r6
 800568e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d907      	bls.n	80056a8 <_fwalk_sglue+0x38>
 8005698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800569c:	3301      	adds	r3, #1
 800569e:	d003      	beq.n	80056a8 <_fwalk_sglue+0x38>
 80056a0:	4629      	mov	r1, r5
 80056a2:	4638      	mov	r0, r7
 80056a4:	47c0      	blx	r8
 80056a6:	4306      	orrs	r6, r0
 80056a8:	3568      	adds	r5, #104	@ 0x68
 80056aa:	e7e9      	b.n	8005680 <_fwalk_sglue+0x10>

080056ac <siprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056b2:	b500      	push	{lr}
 80056b4:	b09c      	sub	sp, #112	@ 0x70
 80056b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80056b8:	9002      	str	r0, [sp, #8]
 80056ba:	9006      	str	r0, [sp, #24]
 80056bc:	9107      	str	r1, [sp, #28]
 80056be:	9104      	str	r1, [sp, #16]
 80056c0:	4808      	ldr	r0, [pc, #32]	@ (80056e4 <siprintf+0x38>)
 80056c2:	4909      	ldr	r1, [pc, #36]	@ (80056e8 <siprintf+0x3c>)
 80056c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c8:	9105      	str	r1, [sp, #20]
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	a902      	add	r1, sp, #8
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	f001 fc18 	bl	8006f04 <_svfiprintf_r>
 80056d4:	2200      	movs	r2, #0
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	b01c      	add	sp, #112	@ 0x70
 80056dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e0:	b003      	add	sp, #12
 80056e2:	4770      	bx	lr
 80056e4:	20000018 	.word	0x20000018
 80056e8:	ffff0208 	.word	0xffff0208

080056ec <__sread>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	460c      	mov	r4, r1
 80056f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f4:	f000 f86c 	bl	80057d0 <_read_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	bfab      	itete	ge
 80056fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005700:	181b      	addge	r3, r3, r0
 8005702:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005706:	bfac      	ite	ge
 8005708:	6563      	strge	r3, [r4, #84]	@ 0x54
 800570a:	81a3      	strhlt	r3, [r4, #12]
 800570c:	bd10      	pop	{r4, pc}

0800570e <__swrite>:
 800570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005712:	461f      	mov	r7, r3
 8005714:	898b      	ldrh	r3, [r1, #12]
 8005716:	4605      	mov	r5, r0
 8005718:	05db      	lsls	r3, r3, #23
 800571a:	460c      	mov	r4, r1
 800571c:	4616      	mov	r6, r2
 800571e:	d505      	bpl.n	800572c <__swrite+0x1e>
 8005720:	2302      	movs	r3, #2
 8005722:	2200      	movs	r2, #0
 8005724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005728:	f000 f840 	bl	80057ac <_lseek_r>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	4632      	mov	r2, r6
 8005730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	4628      	mov	r0, r5
 8005738:	463b      	mov	r3, r7
 800573a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800573e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	f000 b857 	b.w	80057f4 <_write_r>

08005746 <__sseek>:
 8005746:	b510      	push	{r4, lr}
 8005748:	460c      	mov	r4, r1
 800574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574e:	f000 f82d 	bl	80057ac <_lseek_r>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	bf15      	itete	ne
 8005758:	6560      	strne	r0, [r4, #84]	@ 0x54
 800575a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800575e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005762:	81a3      	strheq	r3, [r4, #12]
 8005764:	bf18      	it	ne
 8005766:	81a3      	strhne	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__sclose>:
 800576a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576e:	f000 b80d 	b.w	800578c <_close_r>

08005772 <memset>:
 8005772:	4603      	mov	r3, r0
 8005774:	4402      	add	r2, r0
 8005776:	4293      	cmp	r3, r2
 8005778:	d100      	bne.n	800577c <memset+0xa>
 800577a:	4770      	bx	lr
 800577c:	f803 1b01 	strb.w	r1, [r3], #1
 8005780:	e7f9      	b.n	8005776 <memset+0x4>
	...

08005784 <_localeconv_r>:
 8005784:	4800      	ldr	r0, [pc, #0]	@ (8005788 <_localeconv_r+0x4>)
 8005786:	4770      	bx	lr
 8005788:	20000158 	.word	0x20000158

0800578c <_close_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	2300      	movs	r3, #0
 8005790:	4d05      	ldr	r5, [pc, #20]	@ (80057a8 <_close_r+0x1c>)
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fc fc19 	bl	8001fce <_close>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_close_r+0x1a>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_close_r+0x1a>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000a8c 	.word	0x20000a8c

080057ac <_lseek_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	4611      	mov	r1, r2
 80057b4:	2200      	movs	r2, #0
 80057b6:	4d05      	ldr	r5, [pc, #20]	@ (80057cc <_lseek_r+0x20>)
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fc fc2b 	bl	8002016 <_lseek>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_lseek_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_lseek_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20000a8c 	.word	0x20000a8c

080057d0 <_read_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	2200      	movs	r2, #0
 80057da:	4d05      	ldr	r5, [pc, #20]	@ (80057f0 <_read_r+0x20>)
 80057dc:	602a      	str	r2, [r5, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	f7fc fbbc 	bl	8001f5c <_read>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_read_r+0x1e>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_read_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20000a8c 	.word	0x20000a8c

080057f4 <_write_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4604      	mov	r4, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	2200      	movs	r2, #0
 80057fe:	4d05      	ldr	r5, [pc, #20]	@ (8005814 <_write_r+0x20>)
 8005800:	602a      	str	r2, [r5, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f7fc fbc7 	bl	8001f96 <_write>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_write_r+0x1e>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_write_r+0x1e>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000a8c 	.word	0x20000a8c

08005818 <__errno>:
 8005818:	4b01      	ldr	r3, [pc, #4]	@ (8005820 <__errno+0x8>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000018 	.word	0x20000018

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	2600      	movs	r6, #0
 8005828:	4d0c      	ldr	r5, [pc, #48]	@ (800585c <__libc_init_array+0x38>)
 800582a:	4c0d      	ldr	r4, [pc, #52]	@ (8005860 <__libc_init_array+0x3c>)
 800582c:	1b64      	subs	r4, r4, r5
 800582e:	10a4      	asrs	r4, r4, #2
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	f002 f870 	bl	8007918 <_init>
 8005838:	2600      	movs	r6, #0
 800583a:	4d0a      	ldr	r5, [pc, #40]	@ (8005864 <__libc_init_array+0x40>)
 800583c:	4c0a      	ldr	r4, [pc, #40]	@ (8005868 <__libc_init_array+0x44>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	f855 3b04 	ldr.w	r3, [r5], #4
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	f855 3b04 	ldr.w	r3, [r5], #4
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	08007f20 	.word	0x08007f20
 8005860:	08007f20 	.word	0x08007f20
 8005864:	08007f20 	.word	0x08007f20
 8005868:	08007f24 	.word	0x08007f24

0800586c <__retarget_lock_init_recursive>:
 800586c:	4770      	bx	lr

0800586e <__retarget_lock_acquire_recursive>:
 800586e:	4770      	bx	lr

08005870 <__retarget_lock_release_recursive>:
 8005870:	4770      	bx	lr

08005872 <memchr>:
 8005872:	4603      	mov	r3, r0
 8005874:	b510      	push	{r4, lr}
 8005876:	b2c9      	uxtb	r1, r1
 8005878:	4402      	add	r2, r0
 800587a:	4293      	cmp	r3, r2
 800587c:	4618      	mov	r0, r3
 800587e:	d101      	bne.n	8005884 <memchr+0x12>
 8005880:	2000      	movs	r0, #0
 8005882:	e003      	b.n	800588c <memchr+0x1a>
 8005884:	7804      	ldrb	r4, [r0, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	428c      	cmp	r4, r1
 800588a:	d1f6      	bne.n	800587a <memchr+0x8>
 800588c:	bd10      	pop	{r4, pc}

0800588e <memcpy>:
 800588e:	440a      	add	r2, r1
 8005890:	4291      	cmp	r1, r2
 8005892:	f100 33ff 	add.w	r3, r0, #4294967295
 8005896:	d100      	bne.n	800589a <memcpy+0xc>
 8005898:	4770      	bx	lr
 800589a:	b510      	push	{r4, lr}
 800589c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a0:	4291      	cmp	r1, r2
 80058a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a6:	d1f9      	bne.n	800589c <memcpy+0xe>
 80058a8:	bd10      	pop	{r4, pc}

080058aa <quorem>:
 80058aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ae:	6903      	ldr	r3, [r0, #16]
 80058b0:	690c      	ldr	r4, [r1, #16]
 80058b2:	4607      	mov	r7, r0
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	db7e      	blt.n	80059b6 <quorem+0x10c>
 80058b8:	3c01      	subs	r4, #1
 80058ba:	00a3      	lsls	r3, r4, #2
 80058bc:	f100 0514 	add.w	r5, r0, #20
 80058c0:	f101 0814 	add.w	r8, r1, #20
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ca:	9301      	str	r3, [sp, #4]
 80058cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058d4:	3301      	adds	r3, #1
 80058d6:	429a      	cmp	r2, r3
 80058d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80058dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058e0:	d32e      	bcc.n	8005940 <quorem+0x96>
 80058e2:	f04f 0a00 	mov.w	sl, #0
 80058e6:	46c4      	mov	ip, r8
 80058e8:	46ae      	mov	lr, r5
 80058ea:	46d3      	mov	fp, sl
 80058ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058f0:	b298      	uxth	r0, r3
 80058f2:	fb06 a000 	mla	r0, r6, r0, sl
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	0c02      	lsrs	r2, r0, #16
 80058fa:	fb06 2303 	mla	r3, r6, r3, r2
 80058fe:	f8de 2000 	ldr.w	r2, [lr]
 8005902:	b280      	uxth	r0, r0
 8005904:	b292      	uxth	r2, r2
 8005906:	1a12      	subs	r2, r2, r0
 8005908:	445a      	add	r2, fp
 800590a:	f8de 0000 	ldr.w	r0, [lr]
 800590e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005912:	b29b      	uxth	r3, r3
 8005914:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005918:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800591c:	b292      	uxth	r2, r2
 800591e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005922:	45e1      	cmp	r9, ip
 8005924:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005928:	f84e 2b04 	str.w	r2, [lr], #4
 800592c:	d2de      	bcs.n	80058ec <quorem+0x42>
 800592e:	9b00      	ldr	r3, [sp, #0]
 8005930:	58eb      	ldr	r3, [r5, r3]
 8005932:	b92b      	cbnz	r3, 8005940 <quorem+0x96>
 8005934:	9b01      	ldr	r3, [sp, #4]
 8005936:	3b04      	subs	r3, #4
 8005938:	429d      	cmp	r5, r3
 800593a:	461a      	mov	r2, r3
 800593c:	d32f      	bcc.n	800599e <quorem+0xf4>
 800593e:	613c      	str	r4, [r7, #16]
 8005940:	4638      	mov	r0, r7
 8005942:	f001 f97b 	bl	8006c3c <__mcmp>
 8005946:	2800      	cmp	r0, #0
 8005948:	db25      	blt.n	8005996 <quorem+0xec>
 800594a:	4629      	mov	r1, r5
 800594c:	2000      	movs	r0, #0
 800594e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005952:	f8d1 c000 	ldr.w	ip, [r1]
 8005956:	fa1f fe82 	uxth.w	lr, r2
 800595a:	fa1f f38c 	uxth.w	r3, ip
 800595e:	eba3 030e 	sub.w	r3, r3, lr
 8005962:	4403      	add	r3, r0
 8005964:	0c12      	lsrs	r2, r2, #16
 8005966:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800596a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800596e:	b29b      	uxth	r3, r3
 8005970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005974:	45c1      	cmp	r9, r8
 8005976:	ea4f 4022 	mov.w	r0, r2, asr #16
 800597a:	f841 3b04 	str.w	r3, [r1], #4
 800597e:	d2e6      	bcs.n	800594e <quorem+0xa4>
 8005980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005988:	b922      	cbnz	r2, 8005994 <quorem+0xea>
 800598a:	3b04      	subs	r3, #4
 800598c:	429d      	cmp	r5, r3
 800598e:	461a      	mov	r2, r3
 8005990:	d30b      	bcc.n	80059aa <quorem+0x100>
 8005992:	613c      	str	r4, [r7, #16]
 8005994:	3601      	adds	r6, #1
 8005996:	4630      	mov	r0, r6
 8005998:	b003      	add	sp, #12
 800599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	3b04      	subs	r3, #4
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d1cb      	bne.n	800593e <quorem+0x94>
 80059a6:	3c01      	subs	r4, #1
 80059a8:	e7c6      	b.n	8005938 <quorem+0x8e>
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	3b04      	subs	r3, #4
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	d1ef      	bne.n	8005992 <quorem+0xe8>
 80059b2:	3c01      	subs	r4, #1
 80059b4:	e7ea      	b.n	800598c <quorem+0xe2>
 80059b6:	2000      	movs	r0, #0
 80059b8:	e7ee      	b.n	8005998 <quorem+0xee>
 80059ba:	0000      	movs	r0, r0
 80059bc:	0000      	movs	r0, r0
	...

080059c0 <_dtoa_r>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	4614      	mov	r4, r2
 80059c6:	461d      	mov	r5, r3
 80059c8:	69c7      	ldr	r7, [r0, #28]
 80059ca:	b097      	sub	sp, #92	@ 0x5c
 80059cc:	4683      	mov	fp, r0
 80059ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80059d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80059d4:	b97f      	cbnz	r7, 80059f6 <_dtoa_r+0x36>
 80059d6:	2010      	movs	r0, #16
 80059d8:	f000 fe02 	bl	80065e0 <malloc>
 80059dc:	4602      	mov	r2, r0
 80059de:	f8cb 001c 	str.w	r0, [fp, #28]
 80059e2:	b920      	cbnz	r0, 80059ee <_dtoa_r+0x2e>
 80059e4:	21ef      	movs	r1, #239	@ 0xef
 80059e6:	4ba8      	ldr	r3, [pc, #672]	@ (8005c88 <_dtoa_r+0x2c8>)
 80059e8:	48a8      	ldr	r0, [pc, #672]	@ (8005c8c <_dtoa_r+0x2cc>)
 80059ea:	f001 fc59 	bl	80072a0 <__assert_func>
 80059ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80059f2:	6007      	str	r7, [r0, #0]
 80059f4:	60c7      	str	r7, [r0, #12]
 80059f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059fa:	6819      	ldr	r1, [r3, #0]
 80059fc:	b159      	cbz	r1, 8005a16 <_dtoa_r+0x56>
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	2301      	movs	r3, #1
 8005a02:	4093      	lsls	r3, r2
 8005a04:	604a      	str	r2, [r1, #4]
 8005a06:	608b      	str	r3, [r1, #8]
 8005a08:	4658      	mov	r0, fp
 8005a0a:	f000 fedf 	bl	80067cc <_Bfree>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	1e2b      	subs	r3, r5, #0
 8005a18:	bfaf      	iteee	ge
 8005a1a:	2300      	movge	r3, #0
 8005a1c:	2201      	movlt	r2, #1
 8005a1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005a22:	9303      	strlt	r3, [sp, #12]
 8005a24:	bfa8      	it	ge
 8005a26:	6033      	strge	r3, [r6, #0]
 8005a28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a2c:	4b98      	ldr	r3, [pc, #608]	@ (8005c90 <_dtoa_r+0x2d0>)
 8005a2e:	bfb8      	it	lt
 8005a30:	6032      	strlt	r2, [r6, #0]
 8005a32:	ea33 0308 	bics.w	r3, r3, r8
 8005a36:	d112      	bne.n	8005a5e <_dtoa_r+0x9e>
 8005a38:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005a3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005a44:	4323      	orrs	r3, r4
 8005a46:	f000 8550 	beq.w	80064ea <_dtoa_r+0xb2a>
 8005a4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005c94 <_dtoa_r+0x2d4>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8552 	beq.w	80064fa <_dtoa_r+0xb3a>
 8005a56:	f10a 0303 	add.w	r3, sl, #3
 8005a5a:	f000 bd4c 	b.w	80064f6 <_dtoa_r+0xb36>
 8005a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f7fa ff9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005a72:	4607      	mov	r7, r0
 8005a74:	b158      	cbz	r0, 8005a8e <_dtoa_r+0xce>
 8005a76:	2301      	movs	r3, #1
 8005a78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a7e:	b113      	cbz	r3, 8005a86 <_dtoa_r+0xc6>
 8005a80:	4b85      	ldr	r3, [pc, #532]	@ (8005c98 <_dtoa_r+0x2d8>)
 8005a82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005c9c <_dtoa_r+0x2dc>
 8005a8a:	f000 bd36 	b.w	80064fa <_dtoa_r+0xb3a>
 8005a8e:	ab14      	add	r3, sp, #80	@ 0x50
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	ab15      	add	r3, sp, #84	@ 0x54
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4658      	mov	r0, fp
 8005a98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005a9c:	f001 f97e 	bl	8006d9c <__d2b>
 8005aa0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005aa4:	4681      	mov	r9, r0
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	d077      	beq.n	8005b9a <_dtoa_r+0x1da>
 8005aaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ab0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ab8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005abc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ac0:	9712      	str	r7, [sp, #72]	@ 0x48
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4b76      	ldr	r3, [pc, #472]	@ (8005ca0 <_dtoa_r+0x2e0>)
 8005ac8:	f7fa fb4e 	bl	8000168 <__aeabi_dsub>
 8005acc:	a368      	add	r3, pc, #416	@ (adr r3, 8005c70 <_dtoa_r+0x2b0>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fd01 	bl	80004d8 <__aeabi_dmul>
 8005ad6:	a368      	add	r3, pc, #416	@ (adr r3, 8005c78 <_dtoa_r+0x2b8>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fb46 	bl	800016c <__adddf3>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	460d      	mov	r5, r1
 8005ae6:	f7fa fc8d 	bl	8000404 <__aeabi_i2d>
 8005aea:	a365      	add	r3, pc, #404	@ (adr r3, 8005c80 <_dtoa_r+0x2c0>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fcf2 	bl	80004d8 <__aeabi_dmul>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4620      	mov	r0, r4
 8005afa:	4629      	mov	r1, r5
 8005afc:	f7fa fb36 	bl	800016c <__adddf3>
 8005b00:	4604      	mov	r4, r0
 8005b02:	460d      	mov	r5, r1
 8005b04:	f7fa ff98 	bl	8000a38 <__aeabi_d2iz>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa ff53 	bl	80009bc <__aeabi_dcmplt>
 8005b16:	b140      	cbz	r0, 8005b2a <_dtoa_r+0x16a>
 8005b18:	4638      	mov	r0, r7
 8005b1a:	f7fa fc73 	bl	8000404 <__aeabi_i2d>
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	f7fa ff41 	bl	80009a8 <__aeabi_dcmpeq>
 8005b26:	b900      	cbnz	r0, 8005b2a <_dtoa_r+0x16a>
 8005b28:	3f01      	subs	r7, #1
 8005b2a:	2f16      	cmp	r7, #22
 8005b2c:	d853      	bhi.n	8005bd6 <_dtoa_r+0x216>
 8005b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b32:	4b5c      	ldr	r3, [pc, #368]	@ (8005ca4 <_dtoa_r+0x2e4>)
 8005b34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa ff3e 	bl	80009bc <__aeabi_dcmplt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d04a      	beq.n	8005bda <_dtoa_r+0x21a>
 8005b44:	2300      	movs	r3, #0
 8005b46:	3f01      	subs	r7, #1
 8005b48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b4c:	1b9b      	subs	r3, r3, r6
 8005b4e:	1e5a      	subs	r2, r3, #1
 8005b50:	bf46      	itte	mi
 8005b52:	f1c3 0801 	rsbmi	r8, r3, #1
 8005b56:	2300      	movmi	r3, #0
 8005b58:	f04f 0800 	movpl.w	r8, #0
 8005b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b5e:	bf48      	it	mi
 8005b60:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005b62:	2f00      	cmp	r7, #0
 8005b64:	db3b      	blt.n	8005bde <_dtoa_r+0x21e>
 8005b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b68:	970e      	str	r7, [sp, #56]	@ 0x38
 8005b6a:	443b      	add	r3, r7
 8005b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b6e:	2300      	movs	r3, #0
 8005b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b74:	2b09      	cmp	r3, #9
 8005b76:	d866      	bhi.n	8005c46 <_dtoa_r+0x286>
 8005b78:	2b05      	cmp	r3, #5
 8005b7a:	bfc4      	itt	gt
 8005b7c:	3b04      	subgt	r3, #4
 8005b7e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005b80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b82:	bfc8      	it	gt
 8005b84:	2400      	movgt	r4, #0
 8005b86:	f1a3 0302 	sub.w	r3, r3, #2
 8005b8a:	bfd8      	it	le
 8005b8c:	2401      	movle	r4, #1
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d864      	bhi.n	8005c5c <_dtoa_r+0x29c>
 8005b92:	e8df f003 	tbb	[pc, r3]
 8005b96:	382b      	.short	0x382b
 8005b98:	5636      	.short	0x5636
 8005b9a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005b9e:	441e      	add	r6, r3
 8005ba0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	bfc1      	itttt	gt
 8005ba8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005bac:	fa08 f803 	lslgt.w	r8, r8, r3
 8005bb0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005bb4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005bb8:	bfd6      	itet	le
 8005bba:	f1c3 0320 	rsble	r3, r3, #32
 8005bbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005bc2:	fa04 f003 	lslle.w	r0, r4, r3
 8005bc6:	f7fa fc0d 	bl	80003e4 <__aeabi_ui2d>
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005bd0:	3e01      	subs	r6, #1
 8005bd2:	9212      	str	r2, [sp, #72]	@ 0x48
 8005bd4:	e775      	b.n	8005ac2 <_dtoa_r+0x102>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e7b6      	b.n	8005b48 <_dtoa_r+0x188>
 8005bda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005bdc:	e7b5      	b.n	8005b4a <_dtoa_r+0x18a>
 8005bde:	427b      	negs	r3, r7
 8005be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be2:	2300      	movs	r3, #0
 8005be4:	eba8 0807 	sub.w	r8, r8, r7
 8005be8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005bea:	e7c2      	b.n	8005b72 <_dtoa_r+0x1b2>
 8005bec:	2300      	movs	r3, #0
 8005bee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dc35      	bgt.n	8005c62 <_dtoa_r+0x2a2>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005bfe:	9221      	str	r2, [sp, #132]	@ 0x84
 8005c00:	e00b      	b.n	8005c1a <_dtoa_r+0x25a>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7f3      	b.n	8005bee <_dtoa_r+0x22e>
 8005c06:	2300      	movs	r3, #0
 8005c08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	9308      	str	r3, [sp, #32]
 8005c10:	3301      	adds	r3, #1
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	9307      	str	r3, [sp, #28]
 8005c16:	bfb8      	it	lt
 8005c18:	2301      	movlt	r3, #1
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005c22:	f102 0514 	add.w	r5, r2, #20
 8005c26:	429d      	cmp	r5, r3
 8005c28:	d91f      	bls.n	8005c6a <_dtoa_r+0x2aa>
 8005c2a:	6041      	str	r1, [r0, #4]
 8005c2c:	4658      	mov	r0, fp
 8005c2e:	f000 fd8d 	bl	800674c <_Balloc>
 8005c32:	4682      	mov	sl, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d139      	bne.n	8005cac <_dtoa_r+0x2ec>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <_dtoa_r+0x2e8>)
 8005c40:	e6d2      	b.n	80059e8 <_dtoa_r+0x28>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e7e0      	b.n	8005c08 <_dtoa_r+0x248>
 8005c46:	2401      	movs	r4, #1
 8005c48:	2300      	movs	r3, #0
 8005c4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	2200      	movs	r2, #0
 8005c54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005c58:	2312      	movs	r3, #18
 8005c5a:	e7d0      	b.n	8005bfe <_dtoa_r+0x23e>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c60:	e7f5      	b.n	8005c4e <_dtoa_r+0x28e>
 8005c62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005c68:	e7d7      	b.n	8005c1a <_dtoa_r+0x25a>
 8005c6a:	3101      	adds	r1, #1
 8005c6c:	0052      	lsls	r2, r2, #1
 8005c6e:	e7d8      	b.n	8005c22 <_dtoa_r+0x262>
 8005c70:	636f4361 	.word	0x636f4361
 8005c74:	3fd287a7 	.word	0x3fd287a7
 8005c78:	8b60c8b3 	.word	0x8b60c8b3
 8005c7c:	3fc68a28 	.word	0x3fc68a28
 8005c80:	509f79fb 	.word	0x509f79fb
 8005c84:	3fd34413 	.word	0x3fd34413
 8005c88:	08007be7 	.word	0x08007be7
 8005c8c:	08007bfe 	.word	0x08007bfe
 8005c90:	7ff00000 	.word	0x7ff00000
 8005c94:	08007be3 	.word	0x08007be3
 8005c98:	08007bb7 	.word	0x08007bb7
 8005c9c:	08007bb6 	.word	0x08007bb6
 8005ca0:	3ff80000 	.word	0x3ff80000
 8005ca4:	08007cf8 	.word	0x08007cf8
 8005ca8:	08007c56 	.word	0x08007c56
 8005cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005cb0:	6018      	str	r0, [r3, #0]
 8005cb2:	9b07      	ldr	r3, [sp, #28]
 8005cb4:	2b0e      	cmp	r3, #14
 8005cb6:	f200 80a4 	bhi.w	8005e02 <_dtoa_r+0x442>
 8005cba:	2c00      	cmp	r4, #0
 8005cbc:	f000 80a1 	beq.w	8005e02 <_dtoa_r+0x442>
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	dd33      	ble.n	8005d2c <_dtoa_r+0x36c>
 8005cc4:	4b86      	ldr	r3, [pc, #536]	@ (8005ee0 <_dtoa_r+0x520>)
 8005cc6:	f007 020f 	and.w	r2, r7, #15
 8005cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cce:	05f8      	lsls	r0, r7, #23
 8005cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005cd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005cdc:	d516      	bpl.n	8005d0c <_dtoa_r+0x34c>
 8005cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ce2:	4b80      	ldr	r3, [pc, #512]	@ (8005ee4 <_dtoa_r+0x524>)
 8005ce4:	2603      	movs	r6, #3
 8005ce6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cea:	f7fa fd1f 	bl	800072c <__aeabi_ddiv>
 8005cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf2:	f004 040f 	and.w	r4, r4, #15
 8005cf6:	4d7b      	ldr	r5, [pc, #492]	@ (8005ee4 <_dtoa_r+0x524>)
 8005cf8:	b954      	cbnz	r4, 8005d10 <_dtoa_r+0x350>
 8005cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d02:	f7fa fd13 	bl	800072c <__aeabi_ddiv>
 8005d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d0a:	e028      	b.n	8005d5e <_dtoa_r+0x39e>
 8005d0c:	2602      	movs	r6, #2
 8005d0e:	e7f2      	b.n	8005cf6 <_dtoa_r+0x336>
 8005d10:	07e1      	lsls	r1, r4, #31
 8005d12:	d508      	bpl.n	8005d26 <_dtoa_r+0x366>
 8005d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d1c:	f7fa fbdc 	bl	80004d8 <__aeabi_dmul>
 8005d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d24:	3601      	adds	r6, #1
 8005d26:	1064      	asrs	r4, r4, #1
 8005d28:	3508      	adds	r5, #8
 8005d2a:	e7e5      	b.n	8005cf8 <_dtoa_r+0x338>
 8005d2c:	f000 80d2 	beq.w	8005ed4 <_dtoa_r+0x514>
 8005d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d34:	427c      	negs	r4, r7
 8005d36:	4b6a      	ldr	r3, [pc, #424]	@ (8005ee0 <_dtoa_r+0x520>)
 8005d38:	f004 020f 	and.w	r2, r4, #15
 8005d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f7fa fbc8 	bl	80004d8 <__aeabi_dmul>
 8005d48:	2602      	movs	r6, #2
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d50:	4d64      	ldr	r5, [pc, #400]	@ (8005ee4 <_dtoa_r+0x524>)
 8005d52:	1124      	asrs	r4, r4, #4
 8005d54:	2c00      	cmp	r4, #0
 8005d56:	f040 80b2 	bne.w	8005ebe <_dtoa_r+0x4fe>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1d3      	bne.n	8005d06 <_dtoa_r+0x346>
 8005d5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80b7 	beq.w	8005ed8 <_dtoa_r+0x518>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	4b5d      	ldr	r3, [pc, #372]	@ (8005ee8 <_dtoa_r+0x528>)
 8005d72:	f7fa fe23 	bl	80009bc <__aeabi_dcmplt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f000 80ae 	beq.w	8005ed8 <_dtoa_r+0x518>
 8005d7c:	9b07      	ldr	r3, [sp, #28]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80aa 	beq.w	8005ed8 <_dtoa_r+0x518>
 8005d84:	9b08      	ldr	r3, [sp, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	dd37      	ble.n	8005dfa <_dtoa_r+0x43a>
 8005d8a:	1e7b      	subs	r3, r7, #1
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	2200      	movs	r2, #0
 8005d92:	4629      	mov	r1, r5
 8005d94:	4b55      	ldr	r3, [pc, #340]	@ (8005eec <_dtoa_r+0x52c>)
 8005d96:	f7fa fb9f 	bl	80004d8 <__aeabi_dmul>
 8005d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d9e:	9c08      	ldr	r4, [sp, #32]
 8005da0:	3601      	adds	r6, #1
 8005da2:	4630      	mov	r0, r6
 8005da4:	f7fa fb2e 	bl	8000404 <__aeabi_i2d>
 8005da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dac:	f7fa fb94 	bl	80004d8 <__aeabi_dmul>
 8005db0:	2200      	movs	r2, #0
 8005db2:	4b4f      	ldr	r3, [pc, #316]	@ (8005ef0 <_dtoa_r+0x530>)
 8005db4:	f7fa f9da 	bl	800016c <__adddf3>
 8005db8:	4605      	mov	r5, r0
 8005dba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005dbe:	2c00      	cmp	r4, #0
 8005dc0:	f040 809a 	bne.w	8005ef8 <_dtoa_r+0x538>
 8005dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4b4a      	ldr	r3, [pc, #296]	@ (8005ef4 <_dtoa_r+0x534>)
 8005dcc:	f7fa f9cc 	bl	8000168 <__aeabi_dsub>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4633      	mov	r3, r6
 8005ddc:	f7fa fe0c 	bl	80009f8 <__aeabi_dcmpgt>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	f040 828e 	bne.w	8006302 <_dtoa_r+0x942>
 8005de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dea:	462a      	mov	r2, r5
 8005dec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005df0:	f7fa fde4 	bl	80009bc <__aeabi_dcmplt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	f040 8127 	bne.w	8006048 <_dtoa_r+0x688>
 8005dfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005dfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005e02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f2c0 8163 	blt.w	80060d0 <_dtoa_r+0x710>
 8005e0a:	2f0e      	cmp	r7, #14
 8005e0c:	f300 8160 	bgt.w	80060d0 <_dtoa_r+0x710>
 8005e10:	4b33      	ldr	r3, [pc, #204]	@ (8005ee0 <_dtoa_r+0x520>)
 8005e12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	da03      	bge.n	8005e2c <_dtoa_r+0x46c>
 8005e24:	9b07      	ldr	r3, [sp, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f340 8100 	ble.w	800602c <_dtoa_r+0x66c>
 8005e2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e30:	4656      	mov	r6, sl
 8005e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e36:	4620      	mov	r0, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7fa fc77 	bl	800072c <__aeabi_ddiv>
 8005e3e:	f7fa fdfb 	bl	8000a38 <__aeabi_d2iz>
 8005e42:	4680      	mov	r8, r0
 8005e44:	f7fa fade 	bl	8000404 <__aeabi_i2d>
 8005e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e4c:	f7fa fb44 	bl	80004d8 <__aeabi_dmul>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa f986 	bl	8000168 <__aeabi_dsub>
 8005e5c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005e60:	9d07      	ldr	r5, [sp, #28]
 8005e62:	f806 4b01 	strb.w	r4, [r6], #1
 8005e66:	eba6 040a 	sub.w	r4, r6, sl
 8005e6a:	42a5      	cmp	r5, r4
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	f040 8116 	bne.w	80060a0 <_dtoa_r+0x6e0>
 8005e74:	f7fa f97a 	bl	800016c <__adddf3>
 8005e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	f7fa fdba 	bl	80009f8 <__aeabi_dcmpgt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f040 80f8 	bne.w	800607a <_dtoa_r+0x6ba>
 8005e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	f7fa fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8005e96:	b118      	cbz	r0, 8005ea0 <_dtoa_r+0x4e0>
 8005e98:	f018 0f01 	tst.w	r8, #1
 8005e9c:	f040 80ed 	bne.w	800607a <_dtoa_r+0x6ba>
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4658      	mov	r0, fp
 8005ea4:	f000 fc92 	bl	80067cc <_Bfree>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	7033      	strb	r3, [r6, #0]
 8005eac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005eae:	3701      	adds	r7, #1
 8005eb0:	601f      	str	r7, [r3, #0]
 8005eb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8320 	beq.w	80064fa <_dtoa_r+0xb3a>
 8005eba:	601e      	str	r6, [r3, #0]
 8005ebc:	e31d      	b.n	80064fa <_dtoa_r+0xb3a>
 8005ebe:	07e2      	lsls	r2, r4, #31
 8005ec0:	d505      	bpl.n	8005ece <_dtoa_r+0x50e>
 8005ec2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ec6:	f7fa fb07 	bl	80004d8 <__aeabi_dmul>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	3601      	adds	r6, #1
 8005ece:	1064      	asrs	r4, r4, #1
 8005ed0:	3508      	adds	r5, #8
 8005ed2:	e73f      	b.n	8005d54 <_dtoa_r+0x394>
 8005ed4:	2602      	movs	r6, #2
 8005ed6:	e742      	b.n	8005d5e <_dtoa_r+0x39e>
 8005ed8:	9c07      	ldr	r4, [sp, #28]
 8005eda:	9704      	str	r7, [sp, #16]
 8005edc:	e761      	b.n	8005da2 <_dtoa_r+0x3e2>
 8005ede:	bf00      	nop
 8005ee0:	08007cf8 	.word	0x08007cf8
 8005ee4:	08007cd0 	.word	0x08007cd0
 8005ee8:	3ff00000 	.word	0x3ff00000
 8005eec:	40240000 	.word	0x40240000
 8005ef0:	401c0000 	.word	0x401c0000
 8005ef4:	40140000 	.word	0x40140000
 8005ef8:	4b70      	ldr	r3, [pc, #448]	@ (80060bc <_dtoa_r+0x6fc>)
 8005efa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005efc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f04:	4454      	add	r4, sl
 8005f06:	2900      	cmp	r1, #0
 8005f08:	d045      	beq.n	8005f96 <_dtoa_r+0x5d6>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	496c      	ldr	r1, [pc, #432]	@ (80060c0 <_dtoa_r+0x700>)
 8005f0e:	f7fa fc0d 	bl	800072c <__aeabi_ddiv>
 8005f12:	4633      	mov	r3, r6
 8005f14:	462a      	mov	r2, r5
 8005f16:	f7fa f927 	bl	8000168 <__aeabi_dsub>
 8005f1a:	4656      	mov	r6, sl
 8005f1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f24:	f7fa fd88 	bl	8000a38 <__aeabi_d2iz>
 8005f28:	4605      	mov	r5, r0
 8005f2a:	f7fa fa6b 	bl	8000404 <__aeabi_i2d>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f36:	f7fa f917 	bl	8000168 <__aeabi_dsub>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	3530      	adds	r5, #48	@ 0x30
 8005f40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f48:	f806 5b01 	strb.w	r5, [r6], #1
 8005f4c:	f7fa fd36 	bl	80009bc <__aeabi_dcmplt>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d163      	bne.n	800601c <_dtoa_r+0x65c>
 8005f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f58:	2000      	movs	r0, #0
 8005f5a:	495a      	ldr	r1, [pc, #360]	@ (80060c4 <_dtoa_r+0x704>)
 8005f5c:	f7fa f904 	bl	8000168 <__aeabi_dsub>
 8005f60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f64:	f7fa fd2a 	bl	80009bc <__aeabi_dcmplt>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f040 8087 	bne.w	800607c <_dtoa_r+0x6bc>
 8005f6e:	42a6      	cmp	r6, r4
 8005f70:	f43f af43 	beq.w	8005dfa <_dtoa_r+0x43a>
 8005f74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4b53      	ldr	r3, [pc, #332]	@ (80060c8 <_dtoa_r+0x708>)
 8005f7c:	f7fa faac 	bl	80004d8 <__aeabi_dmul>
 8005f80:	2200      	movs	r2, #0
 8005f82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80060c8 <_dtoa_r+0x708>)
 8005f8c:	f7fa faa4 	bl	80004d8 <__aeabi_dmul>
 8005f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f94:	e7c4      	b.n	8005f20 <_dtoa_r+0x560>
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f7fa fa9d 	bl	80004d8 <__aeabi_dmul>
 8005f9e:	4656      	mov	r6, sl
 8005fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fa4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005faa:	f7fa fd45 	bl	8000a38 <__aeabi_d2iz>
 8005fae:	4605      	mov	r5, r0
 8005fb0:	f7fa fa28 	bl	8000404 <__aeabi_i2d>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fbc:	f7fa f8d4 	bl	8000168 <__aeabi_dsub>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	3530      	adds	r5, #48	@ 0x30
 8005fc6:	f806 5b01 	strb.w	r5, [r6], #1
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	d124      	bne.n	8006020 <_dtoa_r+0x660>
 8005fd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005fda:	4b39      	ldr	r3, [pc, #228]	@ (80060c0 <_dtoa_r+0x700>)
 8005fdc:	f7fa f8c6 	bl	800016c <__adddf3>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe8:	f7fa fd06 	bl	80009f8 <__aeabi_dcmpgt>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d145      	bne.n	800607c <_dtoa_r+0x6bc>
 8005ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	4932      	ldr	r1, [pc, #200]	@ (80060c0 <_dtoa_r+0x700>)
 8005ff8:	f7fa f8b6 	bl	8000168 <__aeabi_dsub>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006004:	f7fa fcda 	bl	80009bc <__aeabi_dcmplt>
 8006008:	2800      	cmp	r0, #0
 800600a:	f43f aef6 	beq.w	8005dfa <_dtoa_r+0x43a>
 800600e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006010:	1e73      	subs	r3, r6, #1
 8006012:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006014:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006018:	2b30      	cmp	r3, #48	@ 0x30
 800601a:	d0f8      	beq.n	800600e <_dtoa_r+0x64e>
 800601c:	9f04      	ldr	r7, [sp, #16]
 800601e:	e73f      	b.n	8005ea0 <_dtoa_r+0x4e0>
 8006020:	4b29      	ldr	r3, [pc, #164]	@ (80060c8 <_dtoa_r+0x708>)
 8006022:	f7fa fa59 	bl	80004d8 <__aeabi_dmul>
 8006026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800602a:	e7bc      	b.n	8005fa6 <_dtoa_r+0x5e6>
 800602c:	d10c      	bne.n	8006048 <_dtoa_r+0x688>
 800602e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006032:	2200      	movs	r2, #0
 8006034:	4b25      	ldr	r3, [pc, #148]	@ (80060cc <_dtoa_r+0x70c>)
 8006036:	f7fa fa4f 	bl	80004d8 <__aeabi_dmul>
 800603a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800603e:	f7fa fcd1 	bl	80009e4 <__aeabi_dcmpge>
 8006042:	2800      	cmp	r0, #0
 8006044:	f000 815b 	beq.w	80062fe <_dtoa_r+0x93e>
 8006048:	2400      	movs	r4, #0
 800604a:	4625      	mov	r5, r4
 800604c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800604e:	4656      	mov	r6, sl
 8006050:	43db      	mvns	r3, r3
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	2700      	movs	r7, #0
 8006056:	4621      	mov	r1, r4
 8006058:	4658      	mov	r0, fp
 800605a:	f000 fbb7 	bl	80067cc <_Bfree>
 800605e:	2d00      	cmp	r5, #0
 8006060:	d0dc      	beq.n	800601c <_dtoa_r+0x65c>
 8006062:	b12f      	cbz	r7, 8006070 <_dtoa_r+0x6b0>
 8006064:	42af      	cmp	r7, r5
 8006066:	d003      	beq.n	8006070 <_dtoa_r+0x6b0>
 8006068:	4639      	mov	r1, r7
 800606a:	4658      	mov	r0, fp
 800606c:	f000 fbae 	bl	80067cc <_Bfree>
 8006070:	4629      	mov	r1, r5
 8006072:	4658      	mov	r0, fp
 8006074:	f000 fbaa 	bl	80067cc <_Bfree>
 8006078:	e7d0      	b.n	800601c <_dtoa_r+0x65c>
 800607a:	9704      	str	r7, [sp, #16]
 800607c:	4633      	mov	r3, r6
 800607e:	461e      	mov	r6, r3
 8006080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006084:	2a39      	cmp	r2, #57	@ 0x39
 8006086:	d107      	bne.n	8006098 <_dtoa_r+0x6d8>
 8006088:	459a      	cmp	sl, r3
 800608a:	d1f8      	bne.n	800607e <_dtoa_r+0x6be>
 800608c:	9a04      	ldr	r2, [sp, #16]
 800608e:	3201      	adds	r2, #1
 8006090:	9204      	str	r2, [sp, #16]
 8006092:	2230      	movs	r2, #48	@ 0x30
 8006094:	f88a 2000 	strb.w	r2, [sl]
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	3201      	adds	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e7bd      	b.n	800601c <_dtoa_r+0x65c>
 80060a0:	2200      	movs	r2, #0
 80060a2:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <_dtoa_r+0x708>)
 80060a4:	f7fa fa18 	bl	80004d8 <__aeabi_dmul>
 80060a8:	2200      	movs	r2, #0
 80060aa:	2300      	movs	r3, #0
 80060ac:	4604      	mov	r4, r0
 80060ae:	460d      	mov	r5, r1
 80060b0:	f7fa fc7a 	bl	80009a8 <__aeabi_dcmpeq>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f43f aebc 	beq.w	8005e32 <_dtoa_r+0x472>
 80060ba:	e6f1      	b.n	8005ea0 <_dtoa_r+0x4e0>
 80060bc:	08007cf8 	.word	0x08007cf8
 80060c0:	3fe00000 	.word	0x3fe00000
 80060c4:	3ff00000 	.word	0x3ff00000
 80060c8:	40240000 	.word	0x40240000
 80060cc:	40140000 	.word	0x40140000
 80060d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	f000 80db 	beq.w	800628e <_dtoa_r+0x8ce>
 80060d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060da:	2a01      	cmp	r2, #1
 80060dc:	f300 80bf 	bgt.w	800625e <_dtoa_r+0x89e>
 80060e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	f000 80b7 	beq.w	8006256 <_dtoa_r+0x896>
 80060e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80060ec:	4646      	mov	r6, r8
 80060ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060f2:	2101      	movs	r1, #1
 80060f4:	441a      	add	r2, r3
 80060f6:	4658      	mov	r0, fp
 80060f8:	4498      	add	r8, r3
 80060fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80060fc:	f000 fc1a 	bl	8006934 <__i2b>
 8006100:	4605      	mov	r5, r0
 8006102:	b15e      	cbz	r6, 800611c <_dtoa_r+0x75c>
 8006104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	dd08      	ble.n	800611c <_dtoa_r+0x75c>
 800610a:	42b3      	cmp	r3, r6
 800610c:	bfa8      	it	ge
 800610e:	4633      	movge	r3, r6
 8006110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006112:	eba8 0803 	sub.w	r8, r8, r3
 8006116:	1af6      	subs	r6, r6, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	9309      	str	r3, [sp, #36]	@ 0x24
 800611c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800611e:	b1f3      	cbz	r3, 800615e <_dtoa_r+0x79e>
 8006120:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80b7 	beq.w	8006296 <_dtoa_r+0x8d6>
 8006128:	b18c      	cbz	r4, 800614e <_dtoa_r+0x78e>
 800612a:	4629      	mov	r1, r5
 800612c:	4622      	mov	r2, r4
 800612e:	4658      	mov	r0, fp
 8006130:	f000 fcbe 	bl	8006ab0 <__pow5mult>
 8006134:	464a      	mov	r2, r9
 8006136:	4601      	mov	r1, r0
 8006138:	4605      	mov	r5, r0
 800613a:	4658      	mov	r0, fp
 800613c:	f000 fc10 	bl	8006960 <__multiply>
 8006140:	4649      	mov	r1, r9
 8006142:	9004      	str	r0, [sp, #16]
 8006144:	4658      	mov	r0, fp
 8006146:	f000 fb41 	bl	80067cc <_Bfree>
 800614a:	9b04      	ldr	r3, [sp, #16]
 800614c:	4699      	mov	r9, r3
 800614e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006150:	1b1a      	subs	r2, r3, r4
 8006152:	d004      	beq.n	800615e <_dtoa_r+0x79e>
 8006154:	4649      	mov	r1, r9
 8006156:	4658      	mov	r0, fp
 8006158:	f000 fcaa 	bl	8006ab0 <__pow5mult>
 800615c:	4681      	mov	r9, r0
 800615e:	2101      	movs	r1, #1
 8006160:	4658      	mov	r0, fp
 8006162:	f000 fbe7 	bl	8006934 <__i2b>
 8006166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006168:	4604      	mov	r4, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 81c9 	beq.w	8006502 <_dtoa_r+0xb42>
 8006170:	461a      	mov	r2, r3
 8006172:	4601      	mov	r1, r0
 8006174:	4658      	mov	r0, fp
 8006176:	f000 fc9b 	bl	8006ab0 <__pow5mult>
 800617a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800617c:	4604      	mov	r4, r0
 800617e:	2b01      	cmp	r3, #1
 8006180:	f300 808f 	bgt.w	80062a2 <_dtoa_r+0x8e2>
 8006184:	9b02      	ldr	r3, [sp, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 8087 	bne.w	800629a <_dtoa_r+0x8da>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 8083 	bne.w	800629e <_dtoa_r+0x8de>
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800619e:	0d1b      	lsrs	r3, r3, #20
 80061a0:	051b      	lsls	r3, r3, #20
 80061a2:	b12b      	cbz	r3, 80061b0 <_dtoa_r+0x7f0>
 80061a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a6:	f108 0801 	add.w	r8, r8, #1
 80061aa:	3301      	adds	r3, #1
 80061ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ae:	2301      	movs	r3, #1
 80061b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 81aa 	beq.w	800650e <_dtoa_r+0xb4e>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061c0:	6918      	ldr	r0, [r3, #16]
 80061c2:	f000 fb6b 	bl	800689c <__hi0bits>
 80061c6:	f1c0 0020 	rsb	r0, r0, #32
 80061ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061cc:	4418      	add	r0, r3
 80061ce:	f010 001f 	ands.w	r0, r0, #31
 80061d2:	d071      	beq.n	80062b8 <_dtoa_r+0x8f8>
 80061d4:	f1c0 0320 	rsb	r3, r0, #32
 80061d8:	2b04      	cmp	r3, #4
 80061da:	dd65      	ble.n	80062a8 <_dtoa_r+0x8e8>
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	f1c0 001c 	rsb	r0, r0, #28
 80061e2:	4403      	add	r3, r0
 80061e4:	4480      	add	r8, r0
 80061e6:	4406      	add	r6, r0
 80061e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ea:	f1b8 0f00 	cmp.w	r8, #0
 80061ee:	dd05      	ble.n	80061fc <_dtoa_r+0x83c>
 80061f0:	4649      	mov	r1, r9
 80061f2:	4642      	mov	r2, r8
 80061f4:	4658      	mov	r0, fp
 80061f6:	f000 fcb5 	bl	8006b64 <__lshift>
 80061fa:	4681      	mov	r9, r0
 80061fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	dd05      	ble.n	800620e <_dtoa_r+0x84e>
 8006202:	4621      	mov	r1, r4
 8006204:	461a      	mov	r2, r3
 8006206:	4658      	mov	r0, fp
 8006208:	f000 fcac 	bl	8006b64 <__lshift>
 800620c:	4604      	mov	r4, r0
 800620e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d053      	beq.n	80062bc <_dtoa_r+0x8fc>
 8006214:	4621      	mov	r1, r4
 8006216:	4648      	mov	r0, r9
 8006218:	f000 fd10 	bl	8006c3c <__mcmp>
 800621c:	2800      	cmp	r0, #0
 800621e:	da4d      	bge.n	80062bc <_dtoa_r+0x8fc>
 8006220:	1e7b      	subs	r3, r7, #1
 8006222:	4649      	mov	r1, r9
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	220a      	movs	r2, #10
 8006228:	2300      	movs	r3, #0
 800622a:	4658      	mov	r0, fp
 800622c:	f000 faf0 	bl	8006810 <__multadd>
 8006230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006232:	4681      	mov	r9, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 816c 	beq.w	8006512 <_dtoa_r+0xb52>
 800623a:	2300      	movs	r3, #0
 800623c:	4629      	mov	r1, r5
 800623e:	220a      	movs	r2, #10
 8006240:	4658      	mov	r0, fp
 8006242:	f000 fae5 	bl	8006810 <__multadd>
 8006246:	9b08      	ldr	r3, [sp, #32]
 8006248:	4605      	mov	r5, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	dc61      	bgt.n	8006312 <_dtoa_r+0x952>
 800624e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006250:	2b02      	cmp	r3, #2
 8006252:	dc3b      	bgt.n	80062cc <_dtoa_r+0x90c>
 8006254:	e05d      	b.n	8006312 <_dtoa_r+0x952>
 8006256:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006258:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800625c:	e746      	b.n	80060ec <_dtoa_r+0x72c>
 800625e:	9b07      	ldr	r3, [sp, #28]
 8006260:	1e5c      	subs	r4, r3, #1
 8006262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006264:	42a3      	cmp	r3, r4
 8006266:	bfbf      	itttt	lt
 8006268:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800626a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800626c:	1ae3      	sublt	r3, r4, r3
 800626e:	18d2      	addlt	r2, r2, r3
 8006270:	bfa8      	it	ge
 8006272:	1b1c      	subge	r4, r3, r4
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	bfbe      	ittt	lt
 8006278:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800627a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800627c:	2400      	movlt	r4, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	bfb5      	itete	lt
 8006282:	eba8 0603 	sublt.w	r6, r8, r3
 8006286:	4646      	movge	r6, r8
 8006288:	2300      	movlt	r3, #0
 800628a:	9b07      	ldrge	r3, [sp, #28]
 800628c:	e730      	b.n	80060f0 <_dtoa_r+0x730>
 800628e:	4646      	mov	r6, r8
 8006290:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006292:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006294:	e735      	b.n	8006102 <_dtoa_r+0x742>
 8006296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006298:	e75c      	b.n	8006154 <_dtoa_r+0x794>
 800629a:	2300      	movs	r3, #0
 800629c:	e788      	b.n	80061b0 <_dtoa_r+0x7f0>
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	e786      	b.n	80061b0 <_dtoa_r+0x7f0>
 80062a2:	2300      	movs	r3, #0
 80062a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80062a6:	e788      	b.n	80061ba <_dtoa_r+0x7fa>
 80062a8:	d09f      	beq.n	80061ea <_dtoa_r+0x82a>
 80062aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062ac:	331c      	adds	r3, #28
 80062ae:	441a      	add	r2, r3
 80062b0:	4498      	add	r8, r3
 80062b2:	441e      	add	r6, r3
 80062b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062b6:	e798      	b.n	80061ea <_dtoa_r+0x82a>
 80062b8:	4603      	mov	r3, r0
 80062ba:	e7f6      	b.n	80062aa <_dtoa_r+0x8ea>
 80062bc:	9b07      	ldr	r3, [sp, #28]
 80062be:	9704      	str	r7, [sp, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dc20      	bgt.n	8006306 <_dtoa_r+0x946>
 80062c4:	9308      	str	r3, [sp, #32]
 80062c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	dd1e      	ble.n	800630a <_dtoa_r+0x94a>
 80062cc:	9b08      	ldr	r3, [sp, #32]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f47f aebc 	bne.w	800604c <_dtoa_r+0x68c>
 80062d4:	4621      	mov	r1, r4
 80062d6:	2205      	movs	r2, #5
 80062d8:	4658      	mov	r0, fp
 80062da:	f000 fa99 	bl	8006810 <__multadd>
 80062de:	4601      	mov	r1, r0
 80062e0:	4604      	mov	r4, r0
 80062e2:	4648      	mov	r0, r9
 80062e4:	f000 fcaa 	bl	8006c3c <__mcmp>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	f77f aeaf 	ble.w	800604c <_dtoa_r+0x68c>
 80062ee:	2331      	movs	r3, #49	@ 0x31
 80062f0:	4656      	mov	r6, sl
 80062f2:	f806 3b01 	strb.w	r3, [r6], #1
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	3301      	adds	r3, #1
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	e6aa      	b.n	8006054 <_dtoa_r+0x694>
 80062fe:	9c07      	ldr	r4, [sp, #28]
 8006300:	9704      	str	r7, [sp, #16]
 8006302:	4625      	mov	r5, r4
 8006304:	e7f3      	b.n	80062ee <_dtoa_r+0x92e>
 8006306:	9b07      	ldr	r3, [sp, #28]
 8006308:	9308      	str	r3, [sp, #32]
 800630a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8104 	beq.w	800651a <_dtoa_r+0xb5a>
 8006312:	2e00      	cmp	r6, #0
 8006314:	dd05      	ble.n	8006322 <_dtoa_r+0x962>
 8006316:	4629      	mov	r1, r5
 8006318:	4632      	mov	r2, r6
 800631a:	4658      	mov	r0, fp
 800631c:	f000 fc22 	bl	8006b64 <__lshift>
 8006320:	4605      	mov	r5, r0
 8006322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d05a      	beq.n	80063de <_dtoa_r+0xa1e>
 8006328:	4658      	mov	r0, fp
 800632a:	6869      	ldr	r1, [r5, #4]
 800632c:	f000 fa0e 	bl	800674c <_Balloc>
 8006330:	4606      	mov	r6, r0
 8006332:	b928      	cbnz	r0, 8006340 <_dtoa_r+0x980>
 8006334:	4602      	mov	r2, r0
 8006336:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800633a:	4b83      	ldr	r3, [pc, #524]	@ (8006548 <_dtoa_r+0xb88>)
 800633c:	f7ff bb54 	b.w	80059e8 <_dtoa_r+0x28>
 8006340:	692a      	ldr	r2, [r5, #16]
 8006342:	f105 010c 	add.w	r1, r5, #12
 8006346:	3202      	adds	r2, #2
 8006348:	0092      	lsls	r2, r2, #2
 800634a:	300c      	adds	r0, #12
 800634c:	f7ff fa9f 	bl	800588e <memcpy>
 8006350:	2201      	movs	r2, #1
 8006352:	4631      	mov	r1, r6
 8006354:	4658      	mov	r0, fp
 8006356:	f000 fc05 	bl	8006b64 <__lshift>
 800635a:	462f      	mov	r7, r5
 800635c:	4605      	mov	r5, r0
 800635e:	f10a 0301 	add.w	r3, sl, #1
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	9b08      	ldr	r3, [sp, #32]
 8006366:	4453      	add	r3, sl
 8006368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800636a:	9b02      	ldr	r3, [sp, #8]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	930a      	str	r3, [sp, #40]	@ 0x28
 8006372:	9b07      	ldr	r3, [sp, #28]
 8006374:	4621      	mov	r1, r4
 8006376:	3b01      	subs	r3, #1
 8006378:	4648      	mov	r0, r9
 800637a:	9302      	str	r3, [sp, #8]
 800637c:	f7ff fa95 	bl	80058aa <quorem>
 8006380:	4639      	mov	r1, r7
 8006382:	9008      	str	r0, [sp, #32]
 8006384:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006388:	4648      	mov	r0, r9
 800638a:	f000 fc57 	bl	8006c3c <__mcmp>
 800638e:	462a      	mov	r2, r5
 8006390:	9009      	str	r0, [sp, #36]	@ 0x24
 8006392:	4621      	mov	r1, r4
 8006394:	4658      	mov	r0, fp
 8006396:	f000 fc6d 	bl	8006c74 <__mdiff>
 800639a:	68c2      	ldr	r2, [r0, #12]
 800639c:	4606      	mov	r6, r0
 800639e:	bb02      	cbnz	r2, 80063e2 <_dtoa_r+0xa22>
 80063a0:	4601      	mov	r1, r0
 80063a2:	4648      	mov	r0, r9
 80063a4:	f000 fc4a 	bl	8006c3c <__mcmp>
 80063a8:	4602      	mov	r2, r0
 80063aa:	4631      	mov	r1, r6
 80063ac:	4658      	mov	r0, fp
 80063ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80063b0:	f000 fa0c 	bl	80067cc <_Bfree>
 80063b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80063b8:	9e07      	ldr	r6, [sp, #28]
 80063ba:	ea43 0102 	orr.w	r1, r3, r2
 80063be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c0:	4319      	orrs	r1, r3
 80063c2:	d110      	bne.n	80063e6 <_dtoa_r+0xa26>
 80063c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063c8:	d029      	beq.n	800641e <_dtoa_r+0xa5e>
 80063ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dd02      	ble.n	80063d6 <_dtoa_r+0xa16>
 80063d0:	9b08      	ldr	r3, [sp, #32]
 80063d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	f883 8000 	strb.w	r8, [r3]
 80063dc:	e63b      	b.n	8006056 <_dtoa_r+0x696>
 80063de:	4628      	mov	r0, r5
 80063e0:	e7bb      	b.n	800635a <_dtoa_r+0x99a>
 80063e2:	2201      	movs	r2, #1
 80063e4:	e7e1      	b.n	80063aa <_dtoa_r+0x9ea>
 80063e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	db04      	blt.n	80063f6 <_dtoa_r+0xa36>
 80063ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80063ee:	430b      	orrs	r3, r1
 80063f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063f2:	430b      	orrs	r3, r1
 80063f4:	d120      	bne.n	8006438 <_dtoa_r+0xa78>
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	dded      	ble.n	80063d6 <_dtoa_r+0xa16>
 80063fa:	4649      	mov	r1, r9
 80063fc:	2201      	movs	r2, #1
 80063fe:	4658      	mov	r0, fp
 8006400:	f000 fbb0 	bl	8006b64 <__lshift>
 8006404:	4621      	mov	r1, r4
 8006406:	4681      	mov	r9, r0
 8006408:	f000 fc18 	bl	8006c3c <__mcmp>
 800640c:	2800      	cmp	r0, #0
 800640e:	dc03      	bgt.n	8006418 <_dtoa_r+0xa58>
 8006410:	d1e1      	bne.n	80063d6 <_dtoa_r+0xa16>
 8006412:	f018 0f01 	tst.w	r8, #1
 8006416:	d0de      	beq.n	80063d6 <_dtoa_r+0xa16>
 8006418:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800641c:	d1d8      	bne.n	80063d0 <_dtoa_r+0xa10>
 800641e:	2339      	movs	r3, #57	@ 0x39
 8006420:	9a02      	ldr	r2, [sp, #8]
 8006422:	7013      	strb	r3, [r2, #0]
 8006424:	4633      	mov	r3, r6
 8006426:	461e      	mov	r6, r3
 8006428:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800642c:	3b01      	subs	r3, #1
 800642e:	2a39      	cmp	r2, #57	@ 0x39
 8006430:	d052      	beq.n	80064d8 <_dtoa_r+0xb18>
 8006432:	3201      	adds	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	e60e      	b.n	8006056 <_dtoa_r+0x696>
 8006438:	2a00      	cmp	r2, #0
 800643a:	dd07      	ble.n	800644c <_dtoa_r+0xa8c>
 800643c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006440:	d0ed      	beq.n	800641e <_dtoa_r+0xa5e>
 8006442:	9a02      	ldr	r2, [sp, #8]
 8006444:	f108 0301 	add.w	r3, r8, #1
 8006448:	7013      	strb	r3, [r2, #0]
 800644a:	e604      	b.n	8006056 <_dtoa_r+0x696>
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	9a07      	ldr	r2, [sp, #28]
 8006450:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006456:	4293      	cmp	r3, r2
 8006458:	d028      	beq.n	80064ac <_dtoa_r+0xaec>
 800645a:	4649      	mov	r1, r9
 800645c:	2300      	movs	r3, #0
 800645e:	220a      	movs	r2, #10
 8006460:	4658      	mov	r0, fp
 8006462:	f000 f9d5 	bl	8006810 <__multadd>
 8006466:	42af      	cmp	r7, r5
 8006468:	4681      	mov	r9, r0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	f04f 020a 	mov.w	r2, #10
 8006472:	4639      	mov	r1, r7
 8006474:	4658      	mov	r0, fp
 8006476:	d107      	bne.n	8006488 <_dtoa_r+0xac8>
 8006478:	f000 f9ca 	bl	8006810 <__multadd>
 800647c:	4607      	mov	r7, r0
 800647e:	4605      	mov	r5, r0
 8006480:	9b07      	ldr	r3, [sp, #28]
 8006482:	3301      	adds	r3, #1
 8006484:	9307      	str	r3, [sp, #28]
 8006486:	e774      	b.n	8006372 <_dtoa_r+0x9b2>
 8006488:	f000 f9c2 	bl	8006810 <__multadd>
 800648c:	4629      	mov	r1, r5
 800648e:	4607      	mov	r7, r0
 8006490:	2300      	movs	r3, #0
 8006492:	220a      	movs	r2, #10
 8006494:	4658      	mov	r0, fp
 8006496:	f000 f9bb 	bl	8006810 <__multadd>
 800649a:	4605      	mov	r5, r0
 800649c:	e7f0      	b.n	8006480 <_dtoa_r+0xac0>
 800649e:	9b08      	ldr	r3, [sp, #32]
 80064a0:	2700      	movs	r7, #0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfcc      	ite	gt
 80064a6:	461e      	movgt	r6, r3
 80064a8:	2601      	movle	r6, #1
 80064aa:	4456      	add	r6, sl
 80064ac:	4649      	mov	r1, r9
 80064ae:	2201      	movs	r2, #1
 80064b0:	4658      	mov	r0, fp
 80064b2:	f000 fb57 	bl	8006b64 <__lshift>
 80064b6:	4621      	mov	r1, r4
 80064b8:	4681      	mov	r9, r0
 80064ba:	f000 fbbf 	bl	8006c3c <__mcmp>
 80064be:	2800      	cmp	r0, #0
 80064c0:	dcb0      	bgt.n	8006424 <_dtoa_r+0xa64>
 80064c2:	d102      	bne.n	80064ca <_dtoa_r+0xb0a>
 80064c4:	f018 0f01 	tst.w	r8, #1
 80064c8:	d1ac      	bne.n	8006424 <_dtoa_r+0xa64>
 80064ca:	4633      	mov	r3, r6
 80064cc:	461e      	mov	r6, r3
 80064ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064d2:	2a30      	cmp	r2, #48	@ 0x30
 80064d4:	d0fa      	beq.n	80064cc <_dtoa_r+0xb0c>
 80064d6:	e5be      	b.n	8006056 <_dtoa_r+0x696>
 80064d8:	459a      	cmp	sl, r3
 80064da:	d1a4      	bne.n	8006426 <_dtoa_r+0xa66>
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	3301      	adds	r3, #1
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	2331      	movs	r3, #49	@ 0x31
 80064e4:	f88a 3000 	strb.w	r3, [sl]
 80064e8:	e5b5      	b.n	8006056 <_dtoa_r+0x696>
 80064ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800654c <_dtoa_r+0xb8c>
 80064f0:	b11b      	cbz	r3, 80064fa <_dtoa_r+0xb3a>
 80064f2:	f10a 0308 	add.w	r3, sl, #8
 80064f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4650      	mov	r0, sl
 80064fc:	b017      	add	sp, #92	@ 0x5c
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006504:	2b01      	cmp	r3, #1
 8006506:	f77f ae3d 	ble.w	8006184 <_dtoa_r+0x7c4>
 800650a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800650c:	930a      	str	r3, [sp, #40]	@ 0x28
 800650e:	2001      	movs	r0, #1
 8006510:	e65b      	b.n	80061ca <_dtoa_r+0x80a>
 8006512:	9b08      	ldr	r3, [sp, #32]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f77f aed6 	ble.w	80062c6 <_dtoa_r+0x906>
 800651a:	4656      	mov	r6, sl
 800651c:	4621      	mov	r1, r4
 800651e:	4648      	mov	r0, r9
 8006520:	f7ff f9c3 	bl	80058aa <quorem>
 8006524:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006528:	9b08      	ldr	r3, [sp, #32]
 800652a:	f806 8b01 	strb.w	r8, [r6], #1
 800652e:	eba6 020a 	sub.w	r2, r6, sl
 8006532:	4293      	cmp	r3, r2
 8006534:	ddb3      	ble.n	800649e <_dtoa_r+0xade>
 8006536:	4649      	mov	r1, r9
 8006538:	2300      	movs	r3, #0
 800653a:	220a      	movs	r2, #10
 800653c:	4658      	mov	r0, fp
 800653e:	f000 f967 	bl	8006810 <__multadd>
 8006542:	4681      	mov	r9, r0
 8006544:	e7ea      	b.n	800651c <_dtoa_r+0xb5c>
 8006546:	bf00      	nop
 8006548:	08007c56 	.word	0x08007c56
 800654c:	08007bda 	.word	0x08007bda

08006550 <_free_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4605      	mov	r5, r0
 8006554:	2900      	cmp	r1, #0
 8006556:	d040      	beq.n	80065da <_free_r+0x8a>
 8006558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800655c:	1f0c      	subs	r4, r1, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	bfb8      	it	lt
 8006562:	18e4      	addlt	r4, r4, r3
 8006564:	f000 f8e6 	bl	8006734 <__malloc_lock>
 8006568:	4a1c      	ldr	r2, [pc, #112]	@ (80065dc <_free_r+0x8c>)
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	b933      	cbnz	r3, 800657c <_free_r+0x2c>
 800656e:	6063      	str	r3, [r4, #4]
 8006570:	6014      	str	r4, [r2, #0]
 8006572:	4628      	mov	r0, r5
 8006574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006578:	f000 b8e2 	b.w	8006740 <__malloc_unlock>
 800657c:	42a3      	cmp	r3, r4
 800657e:	d908      	bls.n	8006592 <_free_r+0x42>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	1821      	adds	r1, r4, r0
 8006584:	428b      	cmp	r3, r1
 8006586:	bf01      	itttt	eq
 8006588:	6819      	ldreq	r1, [r3, #0]
 800658a:	685b      	ldreq	r3, [r3, #4]
 800658c:	1809      	addeq	r1, r1, r0
 800658e:	6021      	streq	r1, [r4, #0]
 8006590:	e7ed      	b.n	800656e <_free_r+0x1e>
 8006592:	461a      	mov	r2, r3
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b10b      	cbz	r3, 800659c <_free_r+0x4c>
 8006598:	42a3      	cmp	r3, r4
 800659a:	d9fa      	bls.n	8006592 <_free_r+0x42>
 800659c:	6811      	ldr	r1, [r2, #0]
 800659e:	1850      	adds	r0, r2, r1
 80065a0:	42a0      	cmp	r0, r4
 80065a2:	d10b      	bne.n	80065bc <_free_r+0x6c>
 80065a4:	6820      	ldr	r0, [r4, #0]
 80065a6:	4401      	add	r1, r0
 80065a8:	1850      	adds	r0, r2, r1
 80065aa:	4283      	cmp	r3, r0
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	d1e0      	bne.n	8006572 <_free_r+0x22>
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4408      	add	r0, r1
 80065b6:	6010      	str	r0, [r2, #0]
 80065b8:	6053      	str	r3, [r2, #4]
 80065ba:	e7da      	b.n	8006572 <_free_r+0x22>
 80065bc:	d902      	bls.n	80065c4 <_free_r+0x74>
 80065be:	230c      	movs	r3, #12
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	e7d6      	b.n	8006572 <_free_r+0x22>
 80065c4:	6820      	ldr	r0, [r4, #0]
 80065c6:	1821      	adds	r1, r4, r0
 80065c8:	428b      	cmp	r3, r1
 80065ca:	bf01      	itttt	eq
 80065cc:	6819      	ldreq	r1, [r3, #0]
 80065ce:	685b      	ldreq	r3, [r3, #4]
 80065d0:	1809      	addeq	r1, r1, r0
 80065d2:	6021      	streq	r1, [r4, #0]
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	6054      	str	r4, [r2, #4]
 80065d8:	e7cb      	b.n	8006572 <_free_r+0x22>
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	20000a98 	.word	0x20000a98

080065e0 <malloc>:
 80065e0:	4b02      	ldr	r3, [pc, #8]	@ (80065ec <malloc+0xc>)
 80065e2:	4601      	mov	r1, r0
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	f000 b825 	b.w	8006634 <_malloc_r>
 80065ea:	bf00      	nop
 80065ec:	20000018 	.word	0x20000018

080065f0 <sbrk_aligned>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006630 <sbrk_aligned+0x40>)
 80065f4:	460c      	mov	r4, r1
 80065f6:	6831      	ldr	r1, [r6, #0]
 80065f8:	4605      	mov	r5, r0
 80065fa:	b911      	cbnz	r1, 8006602 <sbrk_aligned+0x12>
 80065fc:	f000 fe40 	bl	8007280 <_sbrk_r>
 8006600:	6030      	str	r0, [r6, #0]
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f000 fe3b 	bl	8007280 <_sbrk_r>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	d103      	bne.n	8006616 <sbrk_aligned+0x26>
 800660e:	f04f 34ff 	mov.w	r4, #4294967295
 8006612:	4620      	mov	r0, r4
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	1cc4      	adds	r4, r0, #3
 8006618:	f024 0403 	bic.w	r4, r4, #3
 800661c:	42a0      	cmp	r0, r4
 800661e:	d0f8      	beq.n	8006612 <sbrk_aligned+0x22>
 8006620:	1a21      	subs	r1, r4, r0
 8006622:	4628      	mov	r0, r5
 8006624:	f000 fe2c 	bl	8007280 <_sbrk_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d1f2      	bne.n	8006612 <sbrk_aligned+0x22>
 800662c:	e7ef      	b.n	800660e <sbrk_aligned+0x1e>
 800662e:	bf00      	nop
 8006630:	20000a94 	.word	0x20000a94

08006634 <_malloc_r>:
 8006634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006638:	1ccd      	adds	r5, r1, #3
 800663a:	f025 0503 	bic.w	r5, r5, #3
 800663e:	3508      	adds	r5, #8
 8006640:	2d0c      	cmp	r5, #12
 8006642:	bf38      	it	cc
 8006644:	250c      	movcc	r5, #12
 8006646:	2d00      	cmp	r5, #0
 8006648:	4606      	mov	r6, r0
 800664a:	db01      	blt.n	8006650 <_malloc_r+0x1c>
 800664c:	42a9      	cmp	r1, r5
 800664e:	d904      	bls.n	800665a <_malloc_r+0x26>
 8006650:	230c      	movs	r3, #12
 8006652:	6033      	str	r3, [r6, #0]
 8006654:	2000      	movs	r0, #0
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006730 <_malloc_r+0xfc>
 800665e:	f000 f869 	bl	8006734 <__malloc_lock>
 8006662:	f8d8 3000 	ldr.w	r3, [r8]
 8006666:	461c      	mov	r4, r3
 8006668:	bb44      	cbnz	r4, 80066bc <_malloc_r+0x88>
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ffbf 	bl	80065f0 <sbrk_aligned>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	4604      	mov	r4, r0
 8006676:	d158      	bne.n	800672a <_malloc_r+0xf6>
 8006678:	f8d8 4000 	ldr.w	r4, [r8]
 800667c:	4627      	mov	r7, r4
 800667e:	2f00      	cmp	r7, #0
 8006680:	d143      	bne.n	800670a <_malloc_r+0xd6>
 8006682:	2c00      	cmp	r4, #0
 8006684:	d04b      	beq.n	800671e <_malloc_r+0xea>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	4639      	mov	r1, r7
 800668a:	4630      	mov	r0, r6
 800668c:	eb04 0903 	add.w	r9, r4, r3
 8006690:	f000 fdf6 	bl	8007280 <_sbrk_r>
 8006694:	4581      	cmp	r9, r0
 8006696:	d142      	bne.n	800671e <_malloc_r+0xea>
 8006698:	6821      	ldr	r1, [r4, #0]
 800669a:	4630      	mov	r0, r6
 800669c:	1a6d      	subs	r5, r5, r1
 800669e:	4629      	mov	r1, r5
 80066a0:	f7ff ffa6 	bl	80065f0 <sbrk_aligned>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d03a      	beq.n	800671e <_malloc_r+0xea>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	442b      	add	r3, r5
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	f8d8 3000 	ldr.w	r3, [r8]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	bb62      	cbnz	r2, 8006710 <_malloc_r+0xdc>
 80066b6:	f8c8 7000 	str.w	r7, [r8]
 80066ba:	e00f      	b.n	80066dc <_malloc_r+0xa8>
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	1b52      	subs	r2, r2, r5
 80066c0:	d420      	bmi.n	8006704 <_malloc_r+0xd0>
 80066c2:	2a0b      	cmp	r2, #11
 80066c4:	d917      	bls.n	80066f6 <_malloc_r+0xc2>
 80066c6:	1961      	adds	r1, r4, r5
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	6025      	str	r5, [r4, #0]
 80066cc:	bf18      	it	ne
 80066ce:	6059      	strne	r1, [r3, #4]
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	bf08      	it	eq
 80066d4:	f8c8 1000 	streq.w	r1, [r8]
 80066d8:	5162      	str	r2, [r4, r5]
 80066da:	604b      	str	r3, [r1, #4]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f82f 	bl	8006740 <__malloc_unlock>
 80066e2:	f104 000b 	add.w	r0, r4, #11
 80066e6:	1d23      	adds	r3, r4, #4
 80066e8:	f020 0007 	bic.w	r0, r0, #7
 80066ec:	1ac2      	subs	r2, r0, r3
 80066ee:	bf1c      	itt	ne
 80066f0:	1a1b      	subne	r3, r3, r0
 80066f2:	50a3      	strne	r3, [r4, r2]
 80066f4:	e7af      	b.n	8006656 <_malloc_r+0x22>
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	bf0c      	ite	eq
 80066fc:	f8c8 2000 	streq.w	r2, [r8]
 8006700:	605a      	strne	r2, [r3, #4]
 8006702:	e7eb      	b.n	80066dc <_malloc_r+0xa8>
 8006704:	4623      	mov	r3, r4
 8006706:	6864      	ldr	r4, [r4, #4]
 8006708:	e7ae      	b.n	8006668 <_malloc_r+0x34>
 800670a:	463c      	mov	r4, r7
 800670c:	687f      	ldr	r7, [r7, #4]
 800670e:	e7b6      	b.n	800667e <_malloc_r+0x4a>
 8006710:	461a      	mov	r2, r3
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	42a3      	cmp	r3, r4
 8006716:	d1fb      	bne.n	8006710 <_malloc_r+0xdc>
 8006718:	2300      	movs	r3, #0
 800671a:	6053      	str	r3, [r2, #4]
 800671c:	e7de      	b.n	80066dc <_malloc_r+0xa8>
 800671e:	230c      	movs	r3, #12
 8006720:	4630      	mov	r0, r6
 8006722:	6033      	str	r3, [r6, #0]
 8006724:	f000 f80c 	bl	8006740 <__malloc_unlock>
 8006728:	e794      	b.n	8006654 <_malloc_r+0x20>
 800672a:	6005      	str	r5, [r0, #0]
 800672c:	e7d6      	b.n	80066dc <_malloc_r+0xa8>
 800672e:	bf00      	nop
 8006730:	20000a98 	.word	0x20000a98

08006734 <__malloc_lock>:
 8006734:	4801      	ldr	r0, [pc, #4]	@ (800673c <__malloc_lock+0x8>)
 8006736:	f7ff b89a 	b.w	800586e <__retarget_lock_acquire_recursive>
 800673a:	bf00      	nop
 800673c:	20000a90 	.word	0x20000a90

08006740 <__malloc_unlock>:
 8006740:	4801      	ldr	r0, [pc, #4]	@ (8006748 <__malloc_unlock+0x8>)
 8006742:	f7ff b895 	b.w	8005870 <__retarget_lock_release_recursive>
 8006746:	bf00      	nop
 8006748:	20000a90 	.word	0x20000a90

0800674c <_Balloc>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	69c6      	ldr	r6, [r0, #28]
 8006750:	4604      	mov	r4, r0
 8006752:	460d      	mov	r5, r1
 8006754:	b976      	cbnz	r6, 8006774 <_Balloc+0x28>
 8006756:	2010      	movs	r0, #16
 8006758:	f7ff ff42 	bl	80065e0 <malloc>
 800675c:	4602      	mov	r2, r0
 800675e:	61e0      	str	r0, [r4, #28]
 8006760:	b920      	cbnz	r0, 800676c <_Balloc+0x20>
 8006762:	216b      	movs	r1, #107	@ 0x6b
 8006764:	4b17      	ldr	r3, [pc, #92]	@ (80067c4 <_Balloc+0x78>)
 8006766:	4818      	ldr	r0, [pc, #96]	@ (80067c8 <_Balloc+0x7c>)
 8006768:	f000 fd9a 	bl	80072a0 <__assert_func>
 800676c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006770:	6006      	str	r6, [r0, #0]
 8006772:	60c6      	str	r6, [r0, #12]
 8006774:	69e6      	ldr	r6, [r4, #28]
 8006776:	68f3      	ldr	r3, [r6, #12]
 8006778:	b183      	cbz	r3, 800679c <_Balloc+0x50>
 800677a:	69e3      	ldr	r3, [r4, #28]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006782:	b9b8      	cbnz	r0, 80067b4 <_Balloc+0x68>
 8006784:	2101      	movs	r1, #1
 8006786:	fa01 f605 	lsl.w	r6, r1, r5
 800678a:	1d72      	adds	r2, r6, #5
 800678c:	4620      	mov	r0, r4
 800678e:	0092      	lsls	r2, r2, #2
 8006790:	f000 fda4 	bl	80072dc <_calloc_r>
 8006794:	b160      	cbz	r0, 80067b0 <_Balloc+0x64>
 8006796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800679a:	e00e      	b.n	80067ba <_Balloc+0x6e>
 800679c:	2221      	movs	r2, #33	@ 0x21
 800679e:	2104      	movs	r1, #4
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fd9b 	bl	80072dc <_calloc_r>
 80067a6:	69e3      	ldr	r3, [r4, #28]
 80067a8:	60f0      	str	r0, [r6, #12]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e4      	bne.n	800677a <_Balloc+0x2e>
 80067b0:	2000      	movs	r0, #0
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	6802      	ldr	r2, [r0, #0]
 80067b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067ba:	2300      	movs	r3, #0
 80067bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067c0:	e7f7      	b.n	80067b2 <_Balloc+0x66>
 80067c2:	bf00      	nop
 80067c4:	08007be7 	.word	0x08007be7
 80067c8:	08007c67 	.word	0x08007c67

080067cc <_Bfree>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	69c6      	ldr	r6, [r0, #28]
 80067d0:	4605      	mov	r5, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	b976      	cbnz	r6, 80067f4 <_Bfree+0x28>
 80067d6:	2010      	movs	r0, #16
 80067d8:	f7ff ff02 	bl	80065e0 <malloc>
 80067dc:	4602      	mov	r2, r0
 80067de:	61e8      	str	r0, [r5, #28]
 80067e0:	b920      	cbnz	r0, 80067ec <_Bfree+0x20>
 80067e2:	218f      	movs	r1, #143	@ 0x8f
 80067e4:	4b08      	ldr	r3, [pc, #32]	@ (8006808 <_Bfree+0x3c>)
 80067e6:	4809      	ldr	r0, [pc, #36]	@ (800680c <_Bfree+0x40>)
 80067e8:	f000 fd5a 	bl	80072a0 <__assert_func>
 80067ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067f0:	6006      	str	r6, [r0, #0]
 80067f2:	60c6      	str	r6, [r0, #12]
 80067f4:	b13c      	cbz	r4, 8006806 <_Bfree+0x3a>
 80067f6:	69eb      	ldr	r3, [r5, #28]
 80067f8:	6862      	ldr	r2, [r4, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006800:	6021      	str	r1, [r4, #0]
 8006802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	08007be7 	.word	0x08007be7
 800680c:	08007c67 	.word	0x08007c67

08006810 <__multadd>:
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	4607      	mov	r7, r0
 8006816:	460c      	mov	r4, r1
 8006818:	461e      	mov	r6, r3
 800681a:	2000      	movs	r0, #0
 800681c:	690d      	ldr	r5, [r1, #16]
 800681e:	f101 0c14 	add.w	ip, r1, #20
 8006822:	f8dc 3000 	ldr.w	r3, [ip]
 8006826:	3001      	adds	r0, #1
 8006828:	b299      	uxth	r1, r3
 800682a:	fb02 6101 	mla	r1, r2, r1, r6
 800682e:	0c1e      	lsrs	r6, r3, #16
 8006830:	0c0b      	lsrs	r3, r1, #16
 8006832:	fb02 3306 	mla	r3, r2, r6, r3
 8006836:	b289      	uxth	r1, r1
 8006838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800683c:	4285      	cmp	r5, r0
 800683e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006842:	f84c 1b04 	str.w	r1, [ip], #4
 8006846:	dcec      	bgt.n	8006822 <__multadd+0x12>
 8006848:	b30e      	cbz	r6, 800688e <__multadd+0x7e>
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	42ab      	cmp	r3, r5
 800684e:	dc19      	bgt.n	8006884 <__multadd+0x74>
 8006850:	6861      	ldr	r1, [r4, #4]
 8006852:	4638      	mov	r0, r7
 8006854:	3101      	adds	r1, #1
 8006856:	f7ff ff79 	bl	800674c <_Balloc>
 800685a:	4680      	mov	r8, r0
 800685c:	b928      	cbnz	r0, 800686a <__multadd+0x5a>
 800685e:	4602      	mov	r2, r0
 8006860:	21ba      	movs	r1, #186	@ 0xba
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <__multadd+0x84>)
 8006864:	480c      	ldr	r0, [pc, #48]	@ (8006898 <__multadd+0x88>)
 8006866:	f000 fd1b 	bl	80072a0 <__assert_func>
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	f104 010c 	add.w	r1, r4, #12
 8006870:	3202      	adds	r2, #2
 8006872:	0092      	lsls	r2, r2, #2
 8006874:	300c      	adds	r0, #12
 8006876:	f7ff f80a 	bl	800588e <memcpy>
 800687a:	4621      	mov	r1, r4
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff ffa5 	bl	80067cc <_Bfree>
 8006882:	4644      	mov	r4, r8
 8006884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006888:	3501      	adds	r5, #1
 800688a:	615e      	str	r6, [r3, #20]
 800688c:	6125      	str	r5, [r4, #16]
 800688e:	4620      	mov	r0, r4
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006894:	08007c56 	.word	0x08007c56
 8006898:	08007c67 	.word	0x08007c67

0800689c <__hi0bits>:
 800689c:	4603      	mov	r3, r0
 800689e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80068a2:	bf3a      	itte	cc
 80068a4:	0403      	lslcc	r3, r0, #16
 80068a6:	2010      	movcc	r0, #16
 80068a8:	2000      	movcs	r0, #0
 80068aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068ae:	bf3c      	itt	cc
 80068b0:	021b      	lslcc	r3, r3, #8
 80068b2:	3008      	addcc	r0, #8
 80068b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068b8:	bf3c      	itt	cc
 80068ba:	011b      	lslcc	r3, r3, #4
 80068bc:	3004      	addcc	r0, #4
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c2:	bf3c      	itt	cc
 80068c4:	009b      	lslcc	r3, r3, #2
 80068c6:	3002      	addcc	r0, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	db05      	blt.n	80068d8 <__hi0bits+0x3c>
 80068cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80068d0:	f100 0001 	add.w	r0, r0, #1
 80068d4:	bf08      	it	eq
 80068d6:	2020      	moveq	r0, #32
 80068d8:	4770      	bx	lr

080068da <__lo0bits>:
 80068da:	6803      	ldr	r3, [r0, #0]
 80068dc:	4602      	mov	r2, r0
 80068de:	f013 0007 	ands.w	r0, r3, #7
 80068e2:	d00b      	beq.n	80068fc <__lo0bits+0x22>
 80068e4:	07d9      	lsls	r1, r3, #31
 80068e6:	d421      	bmi.n	800692c <__lo0bits+0x52>
 80068e8:	0798      	lsls	r0, r3, #30
 80068ea:	bf49      	itett	mi
 80068ec:	085b      	lsrmi	r3, r3, #1
 80068ee:	089b      	lsrpl	r3, r3, #2
 80068f0:	2001      	movmi	r0, #1
 80068f2:	6013      	strmi	r3, [r2, #0]
 80068f4:	bf5c      	itt	pl
 80068f6:	2002      	movpl	r0, #2
 80068f8:	6013      	strpl	r3, [r2, #0]
 80068fa:	4770      	bx	lr
 80068fc:	b299      	uxth	r1, r3
 80068fe:	b909      	cbnz	r1, 8006904 <__lo0bits+0x2a>
 8006900:	2010      	movs	r0, #16
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	b2d9      	uxtb	r1, r3
 8006906:	b909      	cbnz	r1, 800690c <__lo0bits+0x32>
 8006908:	3008      	adds	r0, #8
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	0719      	lsls	r1, r3, #28
 800690e:	bf04      	itt	eq
 8006910:	091b      	lsreq	r3, r3, #4
 8006912:	3004      	addeq	r0, #4
 8006914:	0799      	lsls	r1, r3, #30
 8006916:	bf04      	itt	eq
 8006918:	089b      	lsreq	r3, r3, #2
 800691a:	3002      	addeq	r0, #2
 800691c:	07d9      	lsls	r1, r3, #31
 800691e:	d403      	bmi.n	8006928 <__lo0bits+0x4e>
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	f100 0001 	add.w	r0, r0, #1
 8006926:	d003      	beq.n	8006930 <__lo0bits+0x56>
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	4770      	bx	lr
 800692c:	2000      	movs	r0, #0
 800692e:	4770      	bx	lr
 8006930:	2020      	movs	r0, #32
 8006932:	4770      	bx	lr

08006934 <__i2b>:
 8006934:	b510      	push	{r4, lr}
 8006936:	460c      	mov	r4, r1
 8006938:	2101      	movs	r1, #1
 800693a:	f7ff ff07 	bl	800674c <_Balloc>
 800693e:	4602      	mov	r2, r0
 8006940:	b928      	cbnz	r0, 800694e <__i2b+0x1a>
 8006942:	f240 1145 	movw	r1, #325	@ 0x145
 8006946:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <__i2b+0x24>)
 8006948:	4804      	ldr	r0, [pc, #16]	@ (800695c <__i2b+0x28>)
 800694a:	f000 fca9 	bl	80072a0 <__assert_func>
 800694e:	2301      	movs	r3, #1
 8006950:	6144      	str	r4, [r0, #20]
 8006952:	6103      	str	r3, [r0, #16]
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop
 8006958:	08007c56 	.word	0x08007c56
 800695c:	08007c67 	.word	0x08007c67

08006960 <__multiply>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	4614      	mov	r4, r2
 8006966:	690a      	ldr	r2, [r1, #16]
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	460f      	mov	r7, r1
 800696c:	429a      	cmp	r2, r3
 800696e:	bfa2      	ittt	ge
 8006970:	4623      	movge	r3, r4
 8006972:	460c      	movge	r4, r1
 8006974:	461f      	movge	r7, r3
 8006976:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800697a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800697e:	68a3      	ldr	r3, [r4, #8]
 8006980:	6861      	ldr	r1, [r4, #4]
 8006982:	eb0a 0609 	add.w	r6, sl, r9
 8006986:	42b3      	cmp	r3, r6
 8006988:	b085      	sub	sp, #20
 800698a:	bfb8      	it	lt
 800698c:	3101      	addlt	r1, #1
 800698e:	f7ff fedd 	bl	800674c <_Balloc>
 8006992:	b930      	cbnz	r0, 80069a2 <__multiply+0x42>
 8006994:	4602      	mov	r2, r0
 8006996:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800699a:	4b43      	ldr	r3, [pc, #268]	@ (8006aa8 <__multiply+0x148>)
 800699c:	4843      	ldr	r0, [pc, #268]	@ (8006aac <__multiply+0x14c>)
 800699e:	f000 fc7f 	bl	80072a0 <__assert_func>
 80069a2:	f100 0514 	add.w	r5, r0, #20
 80069a6:	462b      	mov	r3, r5
 80069a8:	2200      	movs	r2, #0
 80069aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069ae:	4543      	cmp	r3, r8
 80069b0:	d321      	bcc.n	80069f6 <__multiply+0x96>
 80069b2:	f107 0114 	add.w	r1, r7, #20
 80069b6:	f104 0214 	add.w	r2, r4, #20
 80069ba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80069be:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80069c2:	9302      	str	r3, [sp, #8]
 80069c4:	1b13      	subs	r3, r2, r4
 80069c6:	3b15      	subs	r3, #21
 80069c8:	f023 0303 	bic.w	r3, r3, #3
 80069cc:	3304      	adds	r3, #4
 80069ce:	f104 0715 	add.w	r7, r4, #21
 80069d2:	42ba      	cmp	r2, r7
 80069d4:	bf38      	it	cc
 80069d6:	2304      	movcc	r3, #4
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	9b02      	ldr	r3, [sp, #8]
 80069dc:	9103      	str	r1, [sp, #12]
 80069de:	428b      	cmp	r3, r1
 80069e0:	d80c      	bhi.n	80069fc <__multiply+0x9c>
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	dd03      	ble.n	80069ee <__multiply+0x8e>
 80069e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d05a      	beq.n	8006aa4 <__multiply+0x144>
 80069ee:	6106      	str	r6, [r0, #16]
 80069f0:	b005      	add	sp, #20
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	f843 2b04 	str.w	r2, [r3], #4
 80069fa:	e7d8      	b.n	80069ae <__multiply+0x4e>
 80069fc:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a00:	f1ba 0f00 	cmp.w	sl, #0
 8006a04:	d023      	beq.n	8006a4e <__multiply+0xee>
 8006a06:	46a9      	mov	r9, r5
 8006a08:	f04f 0c00 	mov.w	ip, #0
 8006a0c:	f104 0e14 	add.w	lr, r4, #20
 8006a10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a14:	f8d9 3000 	ldr.w	r3, [r9]
 8006a18:	fa1f fb87 	uxth.w	fp, r7
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a22:	4463      	add	r3, ip
 8006a24:	f8d9 c000 	ldr.w	ip, [r9]
 8006a28:	0c3f      	lsrs	r7, r7, #16
 8006a2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006a2e:	fb0a c707 	mla	r7, sl, r7, ip
 8006a32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a3c:	4572      	cmp	r2, lr
 8006a3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006a42:	f849 3b04 	str.w	r3, [r9], #4
 8006a46:	d8e3      	bhi.n	8006a10 <__multiply+0xb0>
 8006a48:	9b01      	ldr	r3, [sp, #4]
 8006a4a:	f845 c003 	str.w	ip, [r5, r3]
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	3104      	adds	r1, #4
 8006a52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a56:	f1b9 0f00 	cmp.w	r9, #0
 8006a5a:	d021      	beq.n	8006aa0 <__multiply+0x140>
 8006a5c:	46ae      	mov	lr, r5
 8006a5e:	f04f 0a00 	mov.w	sl, #0
 8006a62:	682b      	ldr	r3, [r5, #0]
 8006a64:	f104 0c14 	add.w	ip, r4, #20
 8006a68:	f8bc b000 	ldrh.w	fp, [ip]
 8006a6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	fb09 770b 	mla	r7, r9, fp, r7
 8006a76:	4457      	add	r7, sl
 8006a78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a7c:	f84e 3b04 	str.w	r3, [lr], #4
 8006a80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a88:	f8be 3000 	ldrh.w	r3, [lr]
 8006a8c:	4562      	cmp	r2, ip
 8006a8e:	fb09 330a 	mla	r3, r9, sl, r3
 8006a92:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a9a:	d8e5      	bhi.n	8006a68 <__multiply+0x108>
 8006a9c:	9f01      	ldr	r7, [sp, #4]
 8006a9e:	51eb      	str	r3, [r5, r7]
 8006aa0:	3504      	adds	r5, #4
 8006aa2:	e79a      	b.n	80069da <__multiply+0x7a>
 8006aa4:	3e01      	subs	r6, #1
 8006aa6:	e79c      	b.n	80069e2 <__multiply+0x82>
 8006aa8:	08007c56 	.word	0x08007c56
 8006aac:	08007c67 	.word	0x08007c67

08006ab0 <__pow5mult>:
 8006ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	4615      	mov	r5, r2
 8006ab6:	f012 0203 	ands.w	r2, r2, #3
 8006aba:	4607      	mov	r7, r0
 8006abc:	460e      	mov	r6, r1
 8006abe:	d007      	beq.n	8006ad0 <__pow5mult+0x20>
 8006ac0:	4c25      	ldr	r4, [pc, #148]	@ (8006b58 <__pow5mult+0xa8>)
 8006ac2:	3a01      	subs	r2, #1
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aca:	f7ff fea1 	bl	8006810 <__multadd>
 8006ace:	4606      	mov	r6, r0
 8006ad0:	10ad      	asrs	r5, r5, #2
 8006ad2:	d03d      	beq.n	8006b50 <__pow5mult+0xa0>
 8006ad4:	69fc      	ldr	r4, [r7, #28]
 8006ad6:	b97c      	cbnz	r4, 8006af8 <__pow5mult+0x48>
 8006ad8:	2010      	movs	r0, #16
 8006ada:	f7ff fd81 	bl	80065e0 <malloc>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	61f8      	str	r0, [r7, #28]
 8006ae2:	b928      	cbnz	r0, 8006af0 <__pow5mult+0x40>
 8006ae4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8006b5c <__pow5mult+0xac>)
 8006aea:	481d      	ldr	r0, [pc, #116]	@ (8006b60 <__pow5mult+0xb0>)
 8006aec:	f000 fbd8 	bl	80072a0 <__assert_func>
 8006af0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006af4:	6004      	str	r4, [r0, #0]
 8006af6:	60c4      	str	r4, [r0, #12]
 8006af8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006afc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b00:	b94c      	cbnz	r4, 8006b16 <__pow5mult+0x66>
 8006b02:	f240 2171 	movw	r1, #625	@ 0x271
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7ff ff14 	bl	8006934 <__i2b>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b14:	6003      	str	r3, [r0, #0]
 8006b16:	f04f 0900 	mov.w	r9, #0
 8006b1a:	07eb      	lsls	r3, r5, #31
 8006b1c:	d50a      	bpl.n	8006b34 <__pow5mult+0x84>
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4622      	mov	r2, r4
 8006b22:	4638      	mov	r0, r7
 8006b24:	f7ff ff1c 	bl	8006960 <__multiply>
 8006b28:	4680      	mov	r8, r0
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	f7ff fe4d 	bl	80067cc <_Bfree>
 8006b32:	4646      	mov	r6, r8
 8006b34:	106d      	asrs	r5, r5, #1
 8006b36:	d00b      	beq.n	8006b50 <__pow5mult+0xa0>
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	b938      	cbnz	r0, 8006b4c <__pow5mult+0x9c>
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7ff ff0d 	bl	8006960 <__multiply>
 8006b46:	6020      	str	r0, [r4, #0]
 8006b48:	f8c0 9000 	str.w	r9, [r0]
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	e7e4      	b.n	8006b1a <__pow5mult+0x6a>
 8006b50:	4630      	mov	r0, r6
 8006b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b56:	bf00      	nop
 8006b58:	08007cc0 	.word	0x08007cc0
 8006b5c:	08007be7 	.word	0x08007be7
 8006b60:	08007c67 	.word	0x08007c67

08006b64 <__lshift>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	460c      	mov	r4, r1
 8006b6a:	4607      	mov	r7, r0
 8006b6c:	4691      	mov	r9, r2
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	6849      	ldr	r1, [r1, #4]
 8006b72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b7c:	f108 0601 	add.w	r6, r8, #1
 8006b80:	42b3      	cmp	r3, r6
 8006b82:	db0b      	blt.n	8006b9c <__lshift+0x38>
 8006b84:	4638      	mov	r0, r7
 8006b86:	f7ff fde1 	bl	800674c <_Balloc>
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	b948      	cbnz	r0, 8006ba2 <__lshift+0x3e>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b94:	4b27      	ldr	r3, [pc, #156]	@ (8006c34 <__lshift+0xd0>)
 8006b96:	4828      	ldr	r0, [pc, #160]	@ (8006c38 <__lshift+0xd4>)
 8006b98:	f000 fb82 	bl	80072a0 <__assert_func>
 8006b9c:	3101      	adds	r1, #1
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	e7ee      	b.n	8006b80 <__lshift+0x1c>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f100 0114 	add.w	r1, r0, #20
 8006ba8:	f100 0210 	add.w	r2, r0, #16
 8006bac:	4618      	mov	r0, r3
 8006bae:	4553      	cmp	r3, sl
 8006bb0:	db33      	blt.n	8006c1a <__lshift+0xb6>
 8006bb2:	6920      	ldr	r0, [r4, #16]
 8006bb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bb8:	f104 0314 	add.w	r3, r4, #20
 8006bbc:	f019 091f 	ands.w	r9, r9, #31
 8006bc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bc8:	d02b      	beq.n	8006c22 <__lshift+0xbe>
 8006bca:	468a      	mov	sl, r1
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f1c9 0e20 	rsb	lr, r9, #32
 8006bd2:	6818      	ldr	r0, [r3, #0]
 8006bd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006bd8:	4310      	orrs	r0, r2
 8006bda:	f84a 0b04 	str.w	r0, [sl], #4
 8006bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be2:	459c      	cmp	ip, r3
 8006be4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006be8:	d8f3      	bhi.n	8006bd2 <__lshift+0x6e>
 8006bea:	ebac 0304 	sub.w	r3, ip, r4
 8006bee:	3b15      	subs	r3, #21
 8006bf0:	f023 0303 	bic.w	r3, r3, #3
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	f104 0015 	add.w	r0, r4, #21
 8006bfa:	4584      	cmp	ip, r0
 8006bfc:	bf38      	it	cc
 8006bfe:	2304      	movcc	r3, #4
 8006c00:	50ca      	str	r2, [r1, r3]
 8006c02:	b10a      	cbz	r2, 8006c08 <__lshift+0xa4>
 8006c04:	f108 0602 	add.w	r6, r8, #2
 8006c08:	3e01      	subs	r6, #1
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	612e      	str	r6, [r5, #16]
 8006c10:	f7ff fddc 	bl	80067cc <_Bfree>
 8006c14:	4628      	mov	r0, r5
 8006c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c1e:	3301      	adds	r3, #1
 8006c20:	e7c5      	b.n	8006bae <__lshift+0x4a>
 8006c22:	3904      	subs	r1, #4
 8006c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c28:	459c      	cmp	ip, r3
 8006c2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c2e:	d8f9      	bhi.n	8006c24 <__lshift+0xc0>
 8006c30:	e7ea      	b.n	8006c08 <__lshift+0xa4>
 8006c32:	bf00      	nop
 8006c34:	08007c56 	.word	0x08007c56
 8006c38:	08007c67 	.word	0x08007c67

08006c3c <__mcmp>:
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	690a      	ldr	r2, [r1, #16]
 8006c40:	6900      	ldr	r0, [r0, #16]
 8006c42:	b530      	push	{r4, r5, lr}
 8006c44:	1a80      	subs	r0, r0, r2
 8006c46:	d10e      	bne.n	8006c66 <__mcmp+0x2a>
 8006c48:	3314      	adds	r3, #20
 8006c4a:	3114      	adds	r1, #20
 8006c4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c5c:	4295      	cmp	r5, r2
 8006c5e:	d003      	beq.n	8006c68 <__mcmp+0x2c>
 8006c60:	d205      	bcs.n	8006c6e <__mcmp+0x32>
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	bd30      	pop	{r4, r5, pc}
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	d3f3      	bcc.n	8006c54 <__mcmp+0x18>
 8006c6c:	e7fb      	b.n	8006c66 <__mcmp+0x2a>
 8006c6e:	2001      	movs	r0, #1
 8006c70:	e7f9      	b.n	8006c66 <__mcmp+0x2a>
	...

08006c74 <__mdiff>:
 8006c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c78:	4689      	mov	r9, r1
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4648      	mov	r0, r9
 8006c80:	4614      	mov	r4, r2
 8006c82:	f7ff ffdb 	bl	8006c3c <__mcmp>
 8006c86:	1e05      	subs	r5, r0, #0
 8006c88:	d112      	bne.n	8006cb0 <__mdiff+0x3c>
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff fd5d 	bl	800674c <_Balloc>
 8006c92:	4602      	mov	r2, r0
 8006c94:	b928      	cbnz	r0, 8006ca2 <__mdiff+0x2e>
 8006c96:	f240 2137 	movw	r1, #567	@ 0x237
 8006c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d94 <__mdiff+0x120>)
 8006c9c:	483e      	ldr	r0, [pc, #248]	@ (8006d98 <__mdiff+0x124>)
 8006c9e:	f000 faff 	bl	80072a0 <__assert_func>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ca8:	4610      	mov	r0, r2
 8006caa:	b003      	add	sp, #12
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	bfbc      	itt	lt
 8006cb2:	464b      	movlt	r3, r9
 8006cb4:	46a1      	movlt	r9, r4
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006cbc:	bfba      	itte	lt
 8006cbe:	461c      	movlt	r4, r3
 8006cc0:	2501      	movlt	r5, #1
 8006cc2:	2500      	movge	r5, #0
 8006cc4:	f7ff fd42 	bl	800674c <_Balloc>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	b918      	cbnz	r0, 8006cd4 <__mdiff+0x60>
 8006ccc:	f240 2145 	movw	r1, #581	@ 0x245
 8006cd0:	4b30      	ldr	r3, [pc, #192]	@ (8006d94 <__mdiff+0x120>)
 8006cd2:	e7e3      	b.n	8006c9c <__mdiff+0x28>
 8006cd4:	f100 0b14 	add.w	fp, r0, #20
 8006cd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006cdc:	f109 0310 	add.w	r3, r9, #16
 8006ce0:	60c5      	str	r5, [r0, #12]
 8006ce2:	f04f 0c00 	mov.w	ip, #0
 8006ce6:	f109 0514 	add.w	r5, r9, #20
 8006cea:	46d9      	mov	r9, fp
 8006cec:	6926      	ldr	r6, [r4, #16]
 8006cee:	f104 0e14 	add.w	lr, r4, #20
 8006cf2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006cf6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d06:	b281      	uxth	r1, r0
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	fa1f f38a 	uxth.w	r3, sl
 8006d0e:	1a5b      	subs	r3, r3, r1
 8006d10:	0c00      	lsrs	r0, r0, #16
 8006d12:	4463      	add	r3, ip
 8006d14:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d18:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d22:	4576      	cmp	r6, lr
 8006d24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d28:	f849 3b04 	str.w	r3, [r9], #4
 8006d2c:	d8e6      	bhi.n	8006cfc <__mdiff+0x88>
 8006d2e:	1b33      	subs	r3, r6, r4
 8006d30:	3b15      	subs	r3, #21
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	3415      	adds	r4, #21
 8006d38:	3304      	adds	r3, #4
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	bf38      	it	cc
 8006d3e:	2304      	movcc	r3, #4
 8006d40:	441d      	add	r5, r3
 8006d42:	445b      	add	r3, fp
 8006d44:	461e      	mov	r6, r3
 8006d46:	462c      	mov	r4, r5
 8006d48:	4544      	cmp	r4, r8
 8006d4a:	d30e      	bcc.n	8006d6a <__mdiff+0xf6>
 8006d4c:	f108 0103 	add.w	r1, r8, #3
 8006d50:	1b49      	subs	r1, r1, r5
 8006d52:	f021 0103 	bic.w	r1, r1, #3
 8006d56:	3d03      	subs	r5, #3
 8006d58:	45a8      	cmp	r8, r5
 8006d5a:	bf38      	it	cc
 8006d5c:	2100      	movcc	r1, #0
 8006d5e:	440b      	add	r3, r1
 8006d60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d64:	b199      	cbz	r1, 8006d8e <__mdiff+0x11a>
 8006d66:	6117      	str	r7, [r2, #16]
 8006d68:	e79e      	b.n	8006ca8 <__mdiff+0x34>
 8006d6a:	46e6      	mov	lr, ip
 8006d6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d70:	fa1f fc81 	uxth.w	ip, r1
 8006d74:	44f4      	add	ip, lr
 8006d76:	0c08      	lsrs	r0, r1, #16
 8006d78:	4471      	add	r1, lr
 8006d7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d7e:	b289      	uxth	r1, r1
 8006d80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d88:	f846 1b04 	str.w	r1, [r6], #4
 8006d8c:	e7dc      	b.n	8006d48 <__mdiff+0xd4>
 8006d8e:	3f01      	subs	r7, #1
 8006d90:	e7e6      	b.n	8006d60 <__mdiff+0xec>
 8006d92:	bf00      	nop
 8006d94:	08007c56 	.word	0x08007c56
 8006d98:	08007c67 	.word	0x08007c67

08006d9c <__d2b>:
 8006d9c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006da0:	2101      	movs	r1, #1
 8006da2:	4690      	mov	r8, r2
 8006da4:	4699      	mov	r9, r3
 8006da6:	9e08      	ldr	r6, [sp, #32]
 8006da8:	f7ff fcd0 	bl	800674c <_Balloc>
 8006dac:	4604      	mov	r4, r0
 8006dae:	b930      	cbnz	r0, 8006dbe <__d2b+0x22>
 8006db0:	4602      	mov	r2, r0
 8006db2:	f240 310f 	movw	r1, #783	@ 0x30f
 8006db6:	4b23      	ldr	r3, [pc, #140]	@ (8006e44 <__d2b+0xa8>)
 8006db8:	4823      	ldr	r0, [pc, #140]	@ (8006e48 <__d2b+0xac>)
 8006dba:	f000 fa71 	bl	80072a0 <__assert_func>
 8006dbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dc6:	b10d      	cbz	r5, 8006dcc <__d2b+0x30>
 8006dc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	f1b8 0300 	subs.w	r3, r8, #0
 8006dd2:	d024      	beq.n	8006e1e <__d2b+0x82>
 8006dd4:	4668      	mov	r0, sp
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	f7ff fd7f 	bl	80068da <__lo0bits>
 8006ddc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006de0:	b1d8      	cbz	r0, 8006e1a <__d2b+0x7e>
 8006de2:	f1c0 0320 	rsb	r3, r0, #32
 8006de6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dea:	430b      	orrs	r3, r1
 8006dec:	40c2      	lsrs	r2, r0
 8006dee:	6163      	str	r3, [r4, #20]
 8006df0:	9201      	str	r2, [sp, #4]
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bf0c      	ite	eq
 8006df8:	2201      	moveq	r2, #1
 8006dfa:	2202      	movne	r2, #2
 8006dfc:	61a3      	str	r3, [r4, #24]
 8006dfe:	6122      	str	r2, [r4, #16]
 8006e00:	b1ad      	cbz	r5, 8006e2e <__d2b+0x92>
 8006e02:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e06:	4405      	add	r5, r0
 8006e08:	6035      	str	r5, [r6, #0]
 8006e0a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e10:	6018      	str	r0, [r3, #0]
 8006e12:	4620      	mov	r0, r4
 8006e14:	b002      	add	sp, #8
 8006e16:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006e1a:	6161      	str	r1, [r4, #20]
 8006e1c:	e7e9      	b.n	8006df2 <__d2b+0x56>
 8006e1e:	a801      	add	r0, sp, #4
 8006e20:	f7ff fd5b 	bl	80068da <__lo0bits>
 8006e24:	9b01      	ldr	r3, [sp, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	6163      	str	r3, [r4, #20]
 8006e2a:	3020      	adds	r0, #32
 8006e2c:	e7e7      	b.n	8006dfe <__d2b+0x62>
 8006e2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e36:	6030      	str	r0, [r6, #0]
 8006e38:	6918      	ldr	r0, [r3, #16]
 8006e3a:	f7ff fd2f 	bl	800689c <__hi0bits>
 8006e3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e42:	e7e4      	b.n	8006e0e <__d2b+0x72>
 8006e44:	08007c56 	.word	0x08007c56
 8006e48:	08007c67 	.word	0x08007c67

08006e4c <__ssputs_r>:
 8006e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e50:	461f      	mov	r7, r3
 8006e52:	688e      	ldr	r6, [r1, #8]
 8006e54:	4682      	mov	sl, r0
 8006e56:	42be      	cmp	r6, r7
 8006e58:	460c      	mov	r4, r1
 8006e5a:	4690      	mov	r8, r2
 8006e5c:	680b      	ldr	r3, [r1, #0]
 8006e5e:	d82d      	bhi.n	8006ebc <__ssputs_r+0x70>
 8006e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e68:	d026      	beq.n	8006eb8 <__ssputs_r+0x6c>
 8006e6a:	6965      	ldr	r5, [r4, #20]
 8006e6c:	6909      	ldr	r1, [r1, #16]
 8006e6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e72:	eba3 0901 	sub.w	r9, r3, r1
 8006e76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e7a:	1c7b      	adds	r3, r7, #1
 8006e7c:	444b      	add	r3, r9
 8006e7e:	106d      	asrs	r5, r5, #1
 8006e80:	429d      	cmp	r5, r3
 8006e82:	bf38      	it	cc
 8006e84:	461d      	movcc	r5, r3
 8006e86:	0553      	lsls	r3, r2, #21
 8006e88:	d527      	bpl.n	8006eda <__ssputs_r+0x8e>
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7ff fbd2 	bl	8006634 <_malloc_r>
 8006e90:	4606      	mov	r6, r0
 8006e92:	b360      	cbz	r0, 8006eee <__ssputs_r+0xa2>
 8006e94:	464a      	mov	r2, r9
 8006e96:	6921      	ldr	r1, [r4, #16]
 8006e98:	f7fe fcf9 	bl	800588e <memcpy>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea6:	81a3      	strh	r3, [r4, #12]
 8006ea8:	6126      	str	r6, [r4, #16]
 8006eaa:	444e      	add	r6, r9
 8006eac:	6026      	str	r6, [r4, #0]
 8006eae:	463e      	mov	r6, r7
 8006eb0:	6165      	str	r5, [r4, #20]
 8006eb2:	eba5 0509 	sub.w	r5, r5, r9
 8006eb6:	60a5      	str	r5, [r4, #8]
 8006eb8:	42be      	cmp	r6, r7
 8006eba:	d900      	bls.n	8006ebe <__ssputs_r+0x72>
 8006ebc:	463e      	mov	r6, r7
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	f000 f9c2 	bl	800724c <memmove>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	68a3      	ldr	r3, [r4, #8]
 8006ecc:	1b9b      	subs	r3, r3, r6
 8006ece:	60a3      	str	r3, [r4, #8]
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	4433      	add	r3, r6
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eda:	462a      	mov	r2, r5
 8006edc:	f000 fa24 	bl	8007328 <_realloc_r>
 8006ee0:	4606      	mov	r6, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d1e0      	bne.n	8006ea8 <__ssputs_r+0x5c>
 8006ee6:	4650      	mov	r0, sl
 8006ee8:	6921      	ldr	r1, [r4, #16]
 8006eea:	f7ff fb31 	bl	8006550 <_free_r>
 8006eee:	230c      	movs	r3, #12
 8006ef0:	f8ca 3000 	str.w	r3, [sl]
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	e7e9      	b.n	8006ed6 <__ssputs_r+0x8a>
	...

08006f04 <_svfiprintf_r>:
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	4698      	mov	r8, r3
 8006f0a:	898b      	ldrh	r3, [r1, #12]
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	061b      	lsls	r3, r3, #24
 8006f10:	460d      	mov	r5, r1
 8006f12:	4614      	mov	r4, r2
 8006f14:	b09d      	sub	sp, #116	@ 0x74
 8006f16:	d510      	bpl.n	8006f3a <_svfiprintf_r+0x36>
 8006f18:	690b      	ldr	r3, [r1, #16]
 8006f1a:	b973      	cbnz	r3, 8006f3a <_svfiprintf_r+0x36>
 8006f1c:	2140      	movs	r1, #64	@ 0x40
 8006f1e:	f7ff fb89 	bl	8006634 <_malloc_r>
 8006f22:	6028      	str	r0, [r5, #0]
 8006f24:	6128      	str	r0, [r5, #16]
 8006f26:	b930      	cbnz	r0, 8006f36 <_svfiprintf_r+0x32>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	b01d      	add	sp, #116	@ 0x74
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	2340      	movs	r3, #64	@ 0x40
 8006f38:	616b      	str	r3, [r5, #20]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3e:	2320      	movs	r3, #32
 8006f40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f44:	2330      	movs	r3, #48	@ 0x30
 8006f46:	f04f 0901 	mov.w	r9, #1
 8006f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f4e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80070e8 <_svfiprintf_r+0x1e4>
 8006f52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f56:	4623      	mov	r3, r4
 8006f58:	469a      	mov	sl, r3
 8006f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f5e:	b10a      	cbz	r2, 8006f64 <_svfiprintf_r+0x60>
 8006f60:	2a25      	cmp	r2, #37	@ 0x25
 8006f62:	d1f9      	bne.n	8006f58 <_svfiprintf_r+0x54>
 8006f64:	ebba 0b04 	subs.w	fp, sl, r4
 8006f68:	d00b      	beq.n	8006f82 <_svfiprintf_r+0x7e>
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ff6b 	bl	8006e4c <__ssputs_r>
 8006f76:	3001      	adds	r0, #1
 8006f78:	f000 80a7 	beq.w	80070ca <_svfiprintf_r+0x1c6>
 8006f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f7e:	445a      	add	r2, fp
 8006f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f82:	f89a 3000 	ldrb.w	r3, [sl]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 809f 	beq.w	80070ca <_svfiprintf_r+0x1c6>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f96:	f10a 0a01 	add.w	sl, sl, #1
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	9307      	str	r3, [sp, #28]
 8006f9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fa4:	4654      	mov	r4, sl
 8006fa6:	2205      	movs	r2, #5
 8006fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fac:	484e      	ldr	r0, [pc, #312]	@ (80070e8 <_svfiprintf_r+0x1e4>)
 8006fae:	f7fe fc60 	bl	8005872 <memchr>
 8006fb2:	9a04      	ldr	r2, [sp, #16]
 8006fb4:	b9d8      	cbnz	r0, 8006fee <_svfiprintf_r+0xea>
 8006fb6:	06d0      	lsls	r0, r2, #27
 8006fb8:	bf44      	itt	mi
 8006fba:	2320      	movmi	r3, #32
 8006fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc0:	0711      	lsls	r1, r2, #28
 8006fc2:	bf44      	itt	mi
 8006fc4:	232b      	movmi	r3, #43	@ 0x2b
 8006fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fca:	f89a 3000 	ldrb.w	r3, [sl]
 8006fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fd0:	d015      	beq.n	8006ffe <_svfiprintf_r+0xfa>
 8006fd2:	4654      	mov	r4, sl
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f04f 0c0a 	mov.w	ip, #10
 8006fda:	9a07      	ldr	r2, [sp, #28]
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe2:	3b30      	subs	r3, #48	@ 0x30
 8006fe4:	2b09      	cmp	r3, #9
 8006fe6:	d94b      	bls.n	8007080 <_svfiprintf_r+0x17c>
 8006fe8:	b1b0      	cbz	r0, 8007018 <_svfiprintf_r+0x114>
 8006fea:	9207      	str	r2, [sp, #28]
 8006fec:	e014      	b.n	8007018 <_svfiprintf_r+0x114>
 8006fee:	eba0 0308 	sub.w	r3, r0, r8
 8006ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	46a2      	mov	sl, r4
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	e7d2      	b.n	8006fa4 <_svfiprintf_r+0xa0>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	1d19      	adds	r1, r3, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	9103      	str	r1, [sp, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfbb      	ittet	lt
 800700a:	425b      	neglt	r3, r3
 800700c:	f042 0202 	orrlt.w	r2, r2, #2
 8007010:	9307      	strge	r3, [sp, #28]
 8007012:	9307      	strlt	r3, [sp, #28]
 8007014:	bfb8      	it	lt
 8007016:	9204      	strlt	r2, [sp, #16]
 8007018:	7823      	ldrb	r3, [r4, #0]
 800701a:	2b2e      	cmp	r3, #46	@ 0x2e
 800701c:	d10a      	bne.n	8007034 <_svfiprintf_r+0x130>
 800701e:	7863      	ldrb	r3, [r4, #1]
 8007020:	2b2a      	cmp	r3, #42	@ 0x2a
 8007022:	d132      	bne.n	800708a <_svfiprintf_r+0x186>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	3402      	adds	r4, #2
 8007028:	1d1a      	adds	r2, r3, #4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	9203      	str	r2, [sp, #12]
 800702e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007032:	9305      	str	r3, [sp, #20]
 8007034:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80070ec <_svfiprintf_r+0x1e8>
 8007038:	2203      	movs	r2, #3
 800703a:	4650      	mov	r0, sl
 800703c:	7821      	ldrb	r1, [r4, #0]
 800703e:	f7fe fc18 	bl	8005872 <memchr>
 8007042:	b138      	cbz	r0, 8007054 <_svfiprintf_r+0x150>
 8007044:	2240      	movs	r2, #64	@ 0x40
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	eba0 000a 	sub.w	r0, r0, sl
 800704c:	4082      	lsls	r2, r0
 800704e:	4313      	orrs	r3, r2
 8007050:	3401      	adds	r4, #1
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007058:	2206      	movs	r2, #6
 800705a:	4825      	ldr	r0, [pc, #148]	@ (80070f0 <_svfiprintf_r+0x1ec>)
 800705c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007060:	f7fe fc07 	bl	8005872 <memchr>
 8007064:	2800      	cmp	r0, #0
 8007066:	d036      	beq.n	80070d6 <_svfiprintf_r+0x1d2>
 8007068:	4b22      	ldr	r3, [pc, #136]	@ (80070f4 <_svfiprintf_r+0x1f0>)
 800706a:	bb1b      	cbnz	r3, 80070b4 <_svfiprintf_r+0x1b0>
 800706c:	9b03      	ldr	r3, [sp, #12]
 800706e:	3307      	adds	r3, #7
 8007070:	f023 0307 	bic.w	r3, r3, #7
 8007074:	3308      	adds	r3, #8
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800707a:	4433      	add	r3, r6
 800707c:	9309      	str	r3, [sp, #36]	@ 0x24
 800707e:	e76a      	b.n	8006f56 <_svfiprintf_r+0x52>
 8007080:	460c      	mov	r4, r1
 8007082:	2001      	movs	r0, #1
 8007084:	fb0c 3202 	mla	r2, ip, r2, r3
 8007088:	e7a8      	b.n	8006fdc <_svfiprintf_r+0xd8>
 800708a:	2300      	movs	r3, #0
 800708c:	f04f 0c0a 	mov.w	ip, #10
 8007090:	4619      	mov	r1, r3
 8007092:	3401      	adds	r4, #1
 8007094:	9305      	str	r3, [sp, #20]
 8007096:	4620      	mov	r0, r4
 8007098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800709c:	3a30      	subs	r2, #48	@ 0x30
 800709e:	2a09      	cmp	r2, #9
 80070a0:	d903      	bls.n	80070aa <_svfiprintf_r+0x1a6>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0c6      	beq.n	8007034 <_svfiprintf_r+0x130>
 80070a6:	9105      	str	r1, [sp, #20]
 80070a8:	e7c4      	b.n	8007034 <_svfiprintf_r+0x130>
 80070aa:	4604      	mov	r4, r0
 80070ac:	2301      	movs	r3, #1
 80070ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b2:	e7f0      	b.n	8007096 <_svfiprintf_r+0x192>
 80070b4:	ab03      	add	r3, sp, #12
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	462a      	mov	r2, r5
 80070ba:	4638      	mov	r0, r7
 80070bc:	4b0e      	ldr	r3, [pc, #56]	@ (80070f8 <_svfiprintf_r+0x1f4>)
 80070be:	a904      	add	r1, sp, #16
 80070c0:	f7fd fe74 	bl	8004dac <_printf_float>
 80070c4:	1c42      	adds	r2, r0, #1
 80070c6:	4606      	mov	r6, r0
 80070c8:	d1d6      	bne.n	8007078 <_svfiprintf_r+0x174>
 80070ca:	89ab      	ldrh	r3, [r5, #12]
 80070cc:	065b      	lsls	r3, r3, #25
 80070ce:	f53f af2d 	bmi.w	8006f2c <_svfiprintf_r+0x28>
 80070d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070d4:	e72c      	b.n	8006f30 <_svfiprintf_r+0x2c>
 80070d6:	ab03      	add	r3, sp, #12
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	462a      	mov	r2, r5
 80070dc:	4638      	mov	r0, r7
 80070de:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <_svfiprintf_r+0x1f4>)
 80070e0:	a904      	add	r1, sp, #16
 80070e2:	f7fe f901 	bl	80052e8 <_printf_i>
 80070e6:	e7ed      	b.n	80070c4 <_svfiprintf_r+0x1c0>
 80070e8:	08007dc0 	.word	0x08007dc0
 80070ec:	08007dc6 	.word	0x08007dc6
 80070f0:	08007dca 	.word	0x08007dca
 80070f4:	08004dad 	.word	0x08004dad
 80070f8:	08006e4d 	.word	0x08006e4d

080070fc <__sflush_r>:
 80070fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	0716      	lsls	r6, r2, #28
 8007104:	4605      	mov	r5, r0
 8007106:	460c      	mov	r4, r1
 8007108:	d454      	bmi.n	80071b4 <__sflush_r+0xb8>
 800710a:	684b      	ldr	r3, [r1, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	dc02      	bgt.n	8007116 <__sflush_r+0x1a>
 8007110:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	dd48      	ble.n	80071a8 <__sflush_r+0xac>
 8007116:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007118:	2e00      	cmp	r6, #0
 800711a:	d045      	beq.n	80071a8 <__sflush_r+0xac>
 800711c:	2300      	movs	r3, #0
 800711e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007122:	682f      	ldr	r7, [r5, #0]
 8007124:	6a21      	ldr	r1, [r4, #32]
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	d030      	beq.n	800718c <__sflush_r+0x90>
 800712a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	0759      	lsls	r1, r3, #29
 8007130:	d505      	bpl.n	800713e <__sflush_r+0x42>
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	1ad2      	subs	r2, r2, r3
 8007136:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007138:	b10b      	cbz	r3, 800713e <__sflush_r+0x42>
 800713a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800713c:	1ad2      	subs	r2, r2, r3
 800713e:	2300      	movs	r3, #0
 8007140:	4628      	mov	r0, r5
 8007142:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007144:	6a21      	ldr	r1, [r4, #32]
 8007146:	47b0      	blx	r6
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	d106      	bne.n	800715c <__sflush_r+0x60>
 800714e:	6829      	ldr	r1, [r5, #0]
 8007150:	291d      	cmp	r1, #29
 8007152:	d82b      	bhi.n	80071ac <__sflush_r+0xb0>
 8007154:	4a28      	ldr	r2, [pc, #160]	@ (80071f8 <__sflush_r+0xfc>)
 8007156:	410a      	asrs	r2, r1
 8007158:	07d6      	lsls	r6, r2, #31
 800715a:	d427      	bmi.n	80071ac <__sflush_r+0xb0>
 800715c:	2200      	movs	r2, #0
 800715e:	6062      	str	r2, [r4, #4]
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	04d9      	lsls	r1, r3, #19
 8007164:	6022      	str	r2, [r4, #0]
 8007166:	d504      	bpl.n	8007172 <__sflush_r+0x76>
 8007168:	1c42      	adds	r2, r0, #1
 800716a:	d101      	bne.n	8007170 <__sflush_r+0x74>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b903      	cbnz	r3, 8007172 <__sflush_r+0x76>
 8007170:	6560      	str	r0, [r4, #84]	@ 0x54
 8007172:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007174:	602f      	str	r7, [r5, #0]
 8007176:	b1b9      	cbz	r1, 80071a8 <__sflush_r+0xac>
 8007178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800717c:	4299      	cmp	r1, r3
 800717e:	d002      	beq.n	8007186 <__sflush_r+0x8a>
 8007180:	4628      	mov	r0, r5
 8007182:	f7ff f9e5 	bl	8006550 <_free_r>
 8007186:	2300      	movs	r3, #0
 8007188:	6363      	str	r3, [r4, #52]	@ 0x34
 800718a:	e00d      	b.n	80071a8 <__sflush_r+0xac>
 800718c:	2301      	movs	r3, #1
 800718e:	4628      	mov	r0, r5
 8007190:	47b0      	blx	r6
 8007192:	4602      	mov	r2, r0
 8007194:	1c50      	adds	r0, r2, #1
 8007196:	d1c9      	bne.n	800712c <__sflush_r+0x30>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0c6      	beq.n	800712c <__sflush_r+0x30>
 800719e:	2b1d      	cmp	r3, #29
 80071a0:	d001      	beq.n	80071a6 <__sflush_r+0xaa>
 80071a2:	2b16      	cmp	r3, #22
 80071a4:	d11d      	bne.n	80071e2 <__sflush_r+0xe6>
 80071a6:	602f      	str	r7, [r5, #0]
 80071a8:	2000      	movs	r0, #0
 80071aa:	e021      	b.n	80071f0 <__sflush_r+0xf4>
 80071ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b0:	b21b      	sxth	r3, r3
 80071b2:	e01a      	b.n	80071ea <__sflush_r+0xee>
 80071b4:	690f      	ldr	r7, [r1, #16]
 80071b6:	2f00      	cmp	r7, #0
 80071b8:	d0f6      	beq.n	80071a8 <__sflush_r+0xac>
 80071ba:	0793      	lsls	r3, r2, #30
 80071bc:	bf18      	it	ne
 80071be:	2300      	movne	r3, #0
 80071c0:	680e      	ldr	r6, [r1, #0]
 80071c2:	bf08      	it	eq
 80071c4:	694b      	ldreq	r3, [r1, #20]
 80071c6:	1bf6      	subs	r6, r6, r7
 80071c8:	600f      	str	r7, [r1, #0]
 80071ca:	608b      	str	r3, [r1, #8]
 80071cc:	2e00      	cmp	r6, #0
 80071ce:	ddeb      	ble.n	80071a8 <__sflush_r+0xac>
 80071d0:	4633      	mov	r3, r6
 80071d2:	463a      	mov	r2, r7
 80071d4:	4628      	mov	r0, r5
 80071d6:	6a21      	ldr	r1, [r4, #32]
 80071d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80071dc:	47e0      	blx	ip
 80071de:	2800      	cmp	r0, #0
 80071e0:	dc07      	bgt.n	80071f2 <__sflush_r+0xf6>
 80071e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f2:	4407      	add	r7, r0
 80071f4:	1a36      	subs	r6, r6, r0
 80071f6:	e7e9      	b.n	80071cc <__sflush_r+0xd0>
 80071f8:	dfbffffe 	.word	0xdfbffffe

080071fc <_fflush_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	690b      	ldr	r3, [r1, #16]
 8007200:	4605      	mov	r5, r0
 8007202:	460c      	mov	r4, r1
 8007204:	b913      	cbnz	r3, 800720c <_fflush_r+0x10>
 8007206:	2500      	movs	r5, #0
 8007208:	4628      	mov	r0, r5
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	b118      	cbz	r0, 8007216 <_fflush_r+0x1a>
 800720e:	6a03      	ldr	r3, [r0, #32]
 8007210:	b90b      	cbnz	r3, 8007216 <_fflush_r+0x1a>
 8007212:	f7fe fa15 	bl	8005640 <__sinit>
 8007216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f3      	beq.n	8007206 <_fflush_r+0xa>
 800721e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007220:	07d0      	lsls	r0, r2, #31
 8007222:	d404      	bmi.n	800722e <_fflush_r+0x32>
 8007224:	0599      	lsls	r1, r3, #22
 8007226:	d402      	bmi.n	800722e <_fflush_r+0x32>
 8007228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800722a:	f7fe fb20 	bl	800586e <__retarget_lock_acquire_recursive>
 800722e:	4628      	mov	r0, r5
 8007230:	4621      	mov	r1, r4
 8007232:	f7ff ff63 	bl	80070fc <__sflush_r>
 8007236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007238:	4605      	mov	r5, r0
 800723a:	07da      	lsls	r2, r3, #31
 800723c:	d4e4      	bmi.n	8007208 <_fflush_r+0xc>
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	059b      	lsls	r3, r3, #22
 8007242:	d4e1      	bmi.n	8007208 <_fflush_r+0xc>
 8007244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007246:	f7fe fb13 	bl	8005870 <__retarget_lock_release_recursive>
 800724a:	e7dd      	b.n	8007208 <_fflush_r+0xc>

0800724c <memmove>:
 800724c:	4288      	cmp	r0, r1
 800724e:	b510      	push	{r4, lr}
 8007250:	eb01 0402 	add.w	r4, r1, r2
 8007254:	d902      	bls.n	800725c <memmove+0x10>
 8007256:	4284      	cmp	r4, r0
 8007258:	4623      	mov	r3, r4
 800725a:	d807      	bhi.n	800726c <memmove+0x20>
 800725c:	1e43      	subs	r3, r0, #1
 800725e:	42a1      	cmp	r1, r4
 8007260:	d008      	beq.n	8007274 <memmove+0x28>
 8007262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800726a:	e7f8      	b.n	800725e <memmove+0x12>
 800726c:	4601      	mov	r1, r0
 800726e:	4402      	add	r2, r0
 8007270:	428a      	cmp	r2, r1
 8007272:	d100      	bne.n	8007276 <memmove+0x2a>
 8007274:	bd10      	pop	{r4, pc}
 8007276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800727a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800727e:	e7f7      	b.n	8007270 <memmove+0x24>

08007280 <_sbrk_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	2300      	movs	r3, #0
 8007284:	4d05      	ldr	r5, [pc, #20]	@ (800729c <_sbrk_r+0x1c>)
 8007286:	4604      	mov	r4, r0
 8007288:	4608      	mov	r0, r1
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	f7fa fed0 	bl	8002030 <_sbrk>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_sbrk_r+0x1a>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_sbrk_r+0x1a>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	20000a8c 	.word	0x20000a8c

080072a0 <__assert_func>:
 80072a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072a2:	4614      	mov	r4, r2
 80072a4:	461a      	mov	r2, r3
 80072a6:	4b09      	ldr	r3, [pc, #36]	@ (80072cc <__assert_func+0x2c>)
 80072a8:	4605      	mov	r5, r0
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68d8      	ldr	r0, [r3, #12]
 80072ae:	b954      	cbnz	r4, 80072c6 <__assert_func+0x26>
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <__assert_func+0x30>)
 80072b2:	461c      	mov	r4, r3
 80072b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072b8:	9100      	str	r1, [sp, #0]
 80072ba:	462b      	mov	r3, r5
 80072bc:	4905      	ldr	r1, [pc, #20]	@ (80072d4 <__assert_func+0x34>)
 80072be:	f000 f86f 	bl	80073a0 <fiprintf>
 80072c2:	f000 f87f 	bl	80073c4 <abort>
 80072c6:	4b04      	ldr	r3, [pc, #16]	@ (80072d8 <__assert_func+0x38>)
 80072c8:	e7f4      	b.n	80072b4 <__assert_func+0x14>
 80072ca:	bf00      	nop
 80072cc:	20000018 	.word	0x20000018
 80072d0:	08007e16 	.word	0x08007e16
 80072d4:	08007de8 	.word	0x08007de8
 80072d8:	08007ddb 	.word	0x08007ddb

080072dc <_calloc_r>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	fba1 5402 	umull	r5, r4, r1, r2
 80072e2:	b93c      	cbnz	r4, 80072f4 <_calloc_r+0x18>
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7ff f9a5 	bl	8006634 <_malloc_r>
 80072ea:	4606      	mov	r6, r0
 80072ec:	b928      	cbnz	r0, 80072fa <_calloc_r+0x1e>
 80072ee:	2600      	movs	r6, #0
 80072f0:	4630      	mov	r0, r6
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	220c      	movs	r2, #12
 80072f6:	6002      	str	r2, [r0, #0]
 80072f8:	e7f9      	b.n	80072ee <_calloc_r+0x12>
 80072fa:	462a      	mov	r2, r5
 80072fc:	4621      	mov	r1, r4
 80072fe:	f7fe fa38 	bl	8005772 <memset>
 8007302:	e7f5      	b.n	80072f0 <_calloc_r+0x14>

08007304 <__ascii_mbtowc>:
 8007304:	b082      	sub	sp, #8
 8007306:	b901      	cbnz	r1, 800730a <__ascii_mbtowc+0x6>
 8007308:	a901      	add	r1, sp, #4
 800730a:	b142      	cbz	r2, 800731e <__ascii_mbtowc+0x1a>
 800730c:	b14b      	cbz	r3, 8007322 <__ascii_mbtowc+0x1e>
 800730e:	7813      	ldrb	r3, [r2, #0]
 8007310:	600b      	str	r3, [r1, #0]
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	1e10      	subs	r0, r2, #0
 8007316:	bf18      	it	ne
 8007318:	2001      	movne	r0, #1
 800731a:	b002      	add	sp, #8
 800731c:	4770      	bx	lr
 800731e:	4610      	mov	r0, r2
 8007320:	e7fb      	b.n	800731a <__ascii_mbtowc+0x16>
 8007322:	f06f 0001 	mvn.w	r0, #1
 8007326:	e7f8      	b.n	800731a <__ascii_mbtowc+0x16>

08007328 <_realloc_r>:
 8007328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800732c:	4680      	mov	r8, r0
 800732e:	4615      	mov	r5, r2
 8007330:	460c      	mov	r4, r1
 8007332:	b921      	cbnz	r1, 800733e <_realloc_r+0x16>
 8007334:	4611      	mov	r1, r2
 8007336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733a:	f7ff b97b 	b.w	8006634 <_malloc_r>
 800733e:	b92a      	cbnz	r2, 800734c <_realloc_r+0x24>
 8007340:	f7ff f906 	bl	8006550 <_free_r>
 8007344:	2400      	movs	r4, #0
 8007346:	4620      	mov	r0, r4
 8007348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800734c:	f000 f841 	bl	80073d2 <_malloc_usable_size_r>
 8007350:	4285      	cmp	r5, r0
 8007352:	4606      	mov	r6, r0
 8007354:	d802      	bhi.n	800735c <_realloc_r+0x34>
 8007356:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800735a:	d8f4      	bhi.n	8007346 <_realloc_r+0x1e>
 800735c:	4629      	mov	r1, r5
 800735e:	4640      	mov	r0, r8
 8007360:	f7ff f968 	bl	8006634 <_malloc_r>
 8007364:	4607      	mov	r7, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	d0ec      	beq.n	8007344 <_realloc_r+0x1c>
 800736a:	42b5      	cmp	r5, r6
 800736c:	462a      	mov	r2, r5
 800736e:	4621      	mov	r1, r4
 8007370:	bf28      	it	cs
 8007372:	4632      	movcs	r2, r6
 8007374:	f7fe fa8b 	bl	800588e <memcpy>
 8007378:	4621      	mov	r1, r4
 800737a:	4640      	mov	r0, r8
 800737c:	f7ff f8e8 	bl	8006550 <_free_r>
 8007380:	463c      	mov	r4, r7
 8007382:	e7e0      	b.n	8007346 <_realloc_r+0x1e>

08007384 <__ascii_wctomb>:
 8007384:	4603      	mov	r3, r0
 8007386:	4608      	mov	r0, r1
 8007388:	b141      	cbz	r1, 800739c <__ascii_wctomb+0x18>
 800738a:	2aff      	cmp	r2, #255	@ 0xff
 800738c:	d904      	bls.n	8007398 <__ascii_wctomb+0x14>
 800738e:	228a      	movs	r2, #138	@ 0x8a
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	4770      	bx	lr
 8007398:	2001      	movs	r0, #1
 800739a:	700a      	strb	r2, [r1, #0]
 800739c:	4770      	bx	lr
	...

080073a0 <fiprintf>:
 80073a0:	b40e      	push	{r1, r2, r3}
 80073a2:	b503      	push	{r0, r1, lr}
 80073a4:	4601      	mov	r1, r0
 80073a6:	ab03      	add	r3, sp, #12
 80073a8:	4805      	ldr	r0, [pc, #20]	@ (80073c0 <fiprintf+0x20>)
 80073aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ae:	6800      	ldr	r0, [r0, #0]
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	f000 f83d 	bl	8007430 <_vfiprintf_r>
 80073b6:	b002      	add	sp, #8
 80073b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073bc:	b003      	add	sp, #12
 80073be:	4770      	bx	lr
 80073c0:	20000018 	.word	0x20000018

080073c4 <abort>:
 80073c4:	2006      	movs	r0, #6
 80073c6:	b508      	push	{r3, lr}
 80073c8:	f000 fa06 	bl	80077d8 <raise>
 80073cc:	2001      	movs	r0, #1
 80073ce:	f7fa fdba 	bl	8001f46 <_exit>

080073d2 <_malloc_usable_size_r>:
 80073d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d6:	1f18      	subs	r0, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfbc      	itt	lt
 80073dc:	580b      	ldrlt	r3, [r1, r0]
 80073de:	18c0      	addlt	r0, r0, r3
 80073e0:	4770      	bx	lr

080073e2 <__sfputc_r>:
 80073e2:	6893      	ldr	r3, [r2, #8]
 80073e4:	b410      	push	{r4}
 80073e6:	3b01      	subs	r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	6093      	str	r3, [r2, #8]
 80073ec:	da07      	bge.n	80073fe <__sfputc_r+0x1c>
 80073ee:	6994      	ldr	r4, [r2, #24]
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	db01      	blt.n	80073f8 <__sfputc_r+0x16>
 80073f4:	290a      	cmp	r1, #10
 80073f6:	d102      	bne.n	80073fe <__sfputc_r+0x1c>
 80073f8:	bc10      	pop	{r4}
 80073fa:	f000 b931 	b.w	8007660 <__swbuf_r>
 80073fe:	6813      	ldr	r3, [r2, #0]
 8007400:	1c58      	adds	r0, r3, #1
 8007402:	6010      	str	r0, [r2, #0]
 8007404:	7019      	strb	r1, [r3, #0]
 8007406:	4608      	mov	r0, r1
 8007408:	bc10      	pop	{r4}
 800740a:	4770      	bx	lr

0800740c <__sfputs_r>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	4606      	mov	r6, r0
 8007410:	460f      	mov	r7, r1
 8007412:	4614      	mov	r4, r2
 8007414:	18d5      	adds	r5, r2, r3
 8007416:	42ac      	cmp	r4, r5
 8007418:	d101      	bne.n	800741e <__sfputs_r+0x12>
 800741a:	2000      	movs	r0, #0
 800741c:	e007      	b.n	800742e <__sfputs_r+0x22>
 800741e:	463a      	mov	r2, r7
 8007420:	4630      	mov	r0, r6
 8007422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007426:	f7ff ffdc 	bl	80073e2 <__sfputc_r>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d1f3      	bne.n	8007416 <__sfputs_r+0xa>
 800742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007430 <_vfiprintf_r>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	460d      	mov	r5, r1
 8007436:	4614      	mov	r4, r2
 8007438:	4698      	mov	r8, r3
 800743a:	4606      	mov	r6, r0
 800743c:	b09d      	sub	sp, #116	@ 0x74
 800743e:	b118      	cbz	r0, 8007448 <_vfiprintf_r+0x18>
 8007440:	6a03      	ldr	r3, [r0, #32]
 8007442:	b90b      	cbnz	r3, 8007448 <_vfiprintf_r+0x18>
 8007444:	f7fe f8fc 	bl	8005640 <__sinit>
 8007448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800744a:	07d9      	lsls	r1, r3, #31
 800744c:	d405      	bmi.n	800745a <_vfiprintf_r+0x2a>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	059a      	lsls	r2, r3, #22
 8007452:	d402      	bmi.n	800745a <_vfiprintf_r+0x2a>
 8007454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007456:	f7fe fa0a 	bl	800586e <__retarget_lock_acquire_recursive>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	071b      	lsls	r3, r3, #28
 800745e:	d501      	bpl.n	8007464 <_vfiprintf_r+0x34>
 8007460:	692b      	ldr	r3, [r5, #16]
 8007462:	b99b      	cbnz	r3, 800748c <_vfiprintf_r+0x5c>
 8007464:	4629      	mov	r1, r5
 8007466:	4630      	mov	r0, r6
 8007468:	f000 f938 	bl	80076dc <__swsetup_r>
 800746c:	b170      	cbz	r0, 800748c <_vfiprintf_r+0x5c>
 800746e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007470:	07dc      	lsls	r4, r3, #31
 8007472:	d504      	bpl.n	800747e <_vfiprintf_r+0x4e>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	b01d      	add	sp, #116	@ 0x74
 800747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	0598      	lsls	r0, r3, #22
 8007482:	d4f7      	bmi.n	8007474 <_vfiprintf_r+0x44>
 8007484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007486:	f7fe f9f3 	bl	8005870 <__retarget_lock_release_recursive>
 800748a:	e7f3      	b.n	8007474 <_vfiprintf_r+0x44>
 800748c:	2300      	movs	r3, #0
 800748e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007490:	2320      	movs	r3, #32
 8007492:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007496:	2330      	movs	r3, #48	@ 0x30
 8007498:	f04f 0901 	mov.w	r9, #1
 800749c:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800764c <_vfiprintf_r+0x21c>
 80074a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074a8:	4623      	mov	r3, r4
 80074aa:	469a      	mov	sl, r3
 80074ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b0:	b10a      	cbz	r2, 80074b6 <_vfiprintf_r+0x86>
 80074b2:	2a25      	cmp	r2, #37	@ 0x25
 80074b4:	d1f9      	bne.n	80074aa <_vfiprintf_r+0x7a>
 80074b6:	ebba 0b04 	subs.w	fp, sl, r4
 80074ba:	d00b      	beq.n	80074d4 <_vfiprintf_r+0xa4>
 80074bc:	465b      	mov	r3, fp
 80074be:	4622      	mov	r2, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ffa2 	bl	800740c <__sfputs_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	f000 80a7 	beq.w	800761c <_vfiprintf_r+0x1ec>
 80074ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074d0:	445a      	add	r2, fp
 80074d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80074d4:	f89a 3000 	ldrb.w	r3, [sl]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 809f 	beq.w	800761c <_vfiprintf_r+0x1ec>
 80074de:	2300      	movs	r3, #0
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e8:	f10a 0a01 	add.w	sl, sl, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80074f6:	4654      	mov	r4, sl
 80074f8:	2205      	movs	r2, #5
 80074fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fe:	4853      	ldr	r0, [pc, #332]	@ (800764c <_vfiprintf_r+0x21c>)
 8007500:	f7fe f9b7 	bl	8005872 <memchr>
 8007504:	9a04      	ldr	r2, [sp, #16]
 8007506:	b9d8      	cbnz	r0, 8007540 <_vfiprintf_r+0x110>
 8007508:	06d1      	lsls	r1, r2, #27
 800750a:	bf44      	itt	mi
 800750c:	2320      	movmi	r3, #32
 800750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007512:	0713      	lsls	r3, r2, #28
 8007514:	bf44      	itt	mi
 8007516:	232b      	movmi	r3, #43	@ 0x2b
 8007518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800751c:	f89a 3000 	ldrb.w	r3, [sl]
 8007520:	2b2a      	cmp	r3, #42	@ 0x2a
 8007522:	d015      	beq.n	8007550 <_vfiprintf_r+0x120>
 8007524:	4654      	mov	r4, sl
 8007526:	2000      	movs	r0, #0
 8007528:	f04f 0c0a 	mov.w	ip, #10
 800752c:	9a07      	ldr	r2, [sp, #28]
 800752e:	4621      	mov	r1, r4
 8007530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007534:	3b30      	subs	r3, #48	@ 0x30
 8007536:	2b09      	cmp	r3, #9
 8007538:	d94b      	bls.n	80075d2 <_vfiprintf_r+0x1a2>
 800753a:	b1b0      	cbz	r0, 800756a <_vfiprintf_r+0x13a>
 800753c:	9207      	str	r2, [sp, #28]
 800753e:	e014      	b.n	800756a <_vfiprintf_r+0x13a>
 8007540:	eba0 0308 	sub.w	r3, r0, r8
 8007544:	fa09 f303 	lsl.w	r3, r9, r3
 8007548:	4313      	orrs	r3, r2
 800754a:	46a2      	mov	sl, r4
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	e7d2      	b.n	80074f6 <_vfiprintf_r+0xc6>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	1d19      	adds	r1, r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	9103      	str	r1, [sp, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	bfbb      	ittet	lt
 800755c:	425b      	neglt	r3, r3
 800755e:	f042 0202 	orrlt.w	r2, r2, #2
 8007562:	9307      	strge	r3, [sp, #28]
 8007564:	9307      	strlt	r3, [sp, #28]
 8007566:	bfb8      	it	lt
 8007568:	9204      	strlt	r2, [sp, #16]
 800756a:	7823      	ldrb	r3, [r4, #0]
 800756c:	2b2e      	cmp	r3, #46	@ 0x2e
 800756e:	d10a      	bne.n	8007586 <_vfiprintf_r+0x156>
 8007570:	7863      	ldrb	r3, [r4, #1]
 8007572:	2b2a      	cmp	r3, #42	@ 0x2a
 8007574:	d132      	bne.n	80075dc <_vfiprintf_r+0x1ac>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	3402      	adds	r4, #2
 800757a:	1d1a      	adds	r2, r3, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	9203      	str	r2, [sp, #12]
 8007580:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007650 <_vfiprintf_r+0x220>
 800758a:	2203      	movs	r2, #3
 800758c:	4650      	mov	r0, sl
 800758e:	7821      	ldrb	r1, [r4, #0]
 8007590:	f7fe f96f 	bl	8005872 <memchr>
 8007594:	b138      	cbz	r0, 80075a6 <_vfiprintf_r+0x176>
 8007596:	2240      	movs	r2, #64	@ 0x40
 8007598:	9b04      	ldr	r3, [sp, #16]
 800759a:	eba0 000a 	sub.w	r0, r0, sl
 800759e:	4082      	lsls	r2, r0
 80075a0:	4313      	orrs	r3, r2
 80075a2:	3401      	adds	r4, #1
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075aa:	2206      	movs	r2, #6
 80075ac:	4829      	ldr	r0, [pc, #164]	@ (8007654 <_vfiprintf_r+0x224>)
 80075ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075b2:	f7fe f95e 	bl	8005872 <memchr>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d03f      	beq.n	800763a <_vfiprintf_r+0x20a>
 80075ba:	4b27      	ldr	r3, [pc, #156]	@ (8007658 <_vfiprintf_r+0x228>)
 80075bc:	bb1b      	cbnz	r3, 8007606 <_vfiprintf_r+0x1d6>
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	3307      	adds	r3, #7
 80075c2:	f023 0307 	bic.w	r3, r3, #7
 80075c6:	3308      	adds	r3, #8
 80075c8:	9303      	str	r3, [sp, #12]
 80075ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075cc:	443b      	add	r3, r7
 80075ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80075d0:	e76a      	b.n	80074a8 <_vfiprintf_r+0x78>
 80075d2:	460c      	mov	r4, r1
 80075d4:	2001      	movs	r0, #1
 80075d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80075da:	e7a8      	b.n	800752e <_vfiprintf_r+0xfe>
 80075dc:	2300      	movs	r3, #0
 80075de:	f04f 0c0a 	mov.w	ip, #10
 80075e2:	4619      	mov	r1, r3
 80075e4:	3401      	adds	r4, #1
 80075e6:	9305      	str	r3, [sp, #20]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ee:	3a30      	subs	r2, #48	@ 0x30
 80075f0:	2a09      	cmp	r2, #9
 80075f2:	d903      	bls.n	80075fc <_vfiprintf_r+0x1cc>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0c6      	beq.n	8007586 <_vfiprintf_r+0x156>
 80075f8:	9105      	str	r1, [sp, #20]
 80075fa:	e7c4      	b.n	8007586 <_vfiprintf_r+0x156>
 80075fc:	4604      	mov	r4, r0
 80075fe:	2301      	movs	r3, #1
 8007600:	fb0c 2101 	mla	r1, ip, r1, r2
 8007604:	e7f0      	b.n	80075e8 <_vfiprintf_r+0x1b8>
 8007606:	ab03      	add	r3, sp, #12
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	462a      	mov	r2, r5
 800760c:	4630      	mov	r0, r6
 800760e:	4b13      	ldr	r3, [pc, #76]	@ (800765c <_vfiprintf_r+0x22c>)
 8007610:	a904      	add	r1, sp, #16
 8007612:	f7fd fbcb 	bl	8004dac <_printf_float>
 8007616:	4607      	mov	r7, r0
 8007618:	1c78      	adds	r0, r7, #1
 800761a:	d1d6      	bne.n	80075ca <_vfiprintf_r+0x19a>
 800761c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800761e:	07d9      	lsls	r1, r3, #31
 8007620:	d405      	bmi.n	800762e <_vfiprintf_r+0x1fe>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	059a      	lsls	r2, r3, #22
 8007626:	d402      	bmi.n	800762e <_vfiprintf_r+0x1fe>
 8007628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800762a:	f7fe f921 	bl	8005870 <__retarget_lock_release_recursive>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	065b      	lsls	r3, r3, #25
 8007632:	f53f af1f 	bmi.w	8007474 <_vfiprintf_r+0x44>
 8007636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007638:	e71e      	b.n	8007478 <_vfiprintf_r+0x48>
 800763a:	ab03      	add	r3, sp, #12
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	462a      	mov	r2, r5
 8007640:	4630      	mov	r0, r6
 8007642:	4b06      	ldr	r3, [pc, #24]	@ (800765c <_vfiprintf_r+0x22c>)
 8007644:	a904      	add	r1, sp, #16
 8007646:	f7fd fe4f 	bl	80052e8 <_printf_i>
 800764a:	e7e4      	b.n	8007616 <_vfiprintf_r+0x1e6>
 800764c:	08007dc0 	.word	0x08007dc0
 8007650:	08007dc6 	.word	0x08007dc6
 8007654:	08007dca 	.word	0x08007dca
 8007658:	08004dad 	.word	0x08004dad
 800765c:	0800740d 	.word	0x0800740d

08007660 <__swbuf_r>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	460e      	mov	r6, r1
 8007664:	4614      	mov	r4, r2
 8007666:	4605      	mov	r5, r0
 8007668:	b118      	cbz	r0, 8007672 <__swbuf_r+0x12>
 800766a:	6a03      	ldr	r3, [r0, #32]
 800766c:	b90b      	cbnz	r3, 8007672 <__swbuf_r+0x12>
 800766e:	f7fd ffe7 	bl	8005640 <__sinit>
 8007672:	69a3      	ldr	r3, [r4, #24]
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	071a      	lsls	r2, r3, #28
 800767a:	d501      	bpl.n	8007680 <__swbuf_r+0x20>
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	b943      	cbnz	r3, 8007692 <__swbuf_r+0x32>
 8007680:	4621      	mov	r1, r4
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f82a 	bl	80076dc <__swsetup_r>
 8007688:	b118      	cbz	r0, 8007692 <__swbuf_r+0x32>
 800768a:	f04f 37ff 	mov.w	r7, #4294967295
 800768e:	4638      	mov	r0, r7
 8007690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	6922      	ldr	r2, [r4, #16]
 8007696:	b2f6      	uxtb	r6, r6
 8007698:	1a98      	subs	r0, r3, r2
 800769a:	6963      	ldr	r3, [r4, #20]
 800769c:	4637      	mov	r7, r6
 800769e:	4283      	cmp	r3, r0
 80076a0:	dc05      	bgt.n	80076ae <__swbuf_r+0x4e>
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f7ff fda9 	bl	80071fc <_fflush_r>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d1ed      	bne.n	800768a <__swbuf_r+0x2a>
 80076ae:	68a3      	ldr	r3, [r4, #8]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	60a3      	str	r3, [r4, #8]
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	701e      	strb	r6, [r3, #0]
 80076bc:	6962      	ldr	r2, [r4, #20]
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d004      	beq.n	80076ce <__swbuf_r+0x6e>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	07db      	lsls	r3, r3, #31
 80076c8:	d5e1      	bpl.n	800768e <__swbuf_r+0x2e>
 80076ca:	2e0a      	cmp	r6, #10
 80076cc:	d1df      	bne.n	800768e <__swbuf_r+0x2e>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	f7ff fd93 	bl	80071fc <_fflush_r>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d0d9      	beq.n	800768e <__swbuf_r+0x2e>
 80076da:	e7d6      	b.n	800768a <__swbuf_r+0x2a>

080076dc <__swsetup_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4b29      	ldr	r3, [pc, #164]	@ (8007784 <__swsetup_r+0xa8>)
 80076e0:	4605      	mov	r5, r0
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	460c      	mov	r4, r1
 80076e6:	b118      	cbz	r0, 80076f0 <__swsetup_r+0x14>
 80076e8:	6a03      	ldr	r3, [r0, #32]
 80076ea:	b90b      	cbnz	r3, 80076f0 <__swsetup_r+0x14>
 80076ec:	f7fd ffa8 	bl	8005640 <__sinit>
 80076f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f4:	0719      	lsls	r1, r3, #28
 80076f6:	d422      	bmi.n	800773e <__swsetup_r+0x62>
 80076f8:	06da      	lsls	r2, r3, #27
 80076fa:	d407      	bmi.n	800770c <__swsetup_r+0x30>
 80076fc:	2209      	movs	r2, #9
 80076fe:	602a      	str	r2, [r5, #0]
 8007700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	e033      	b.n	8007774 <__swsetup_r+0x98>
 800770c:	0758      	lsls	r0, r3, #29
 800770e:	d512      	bpl.n	8007736 <__swsetup_r+0x5a>
 8007710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007712:	b141      	cbz	r1, 8007726 <__swsetup_r+0x4a>
 8007714:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007718:	4299      	cmp	r1, r3
 800771a:	d002      	beq.n	8007722 <__swsetup_r+0x46>
 800771c:	4628      	mov	r0, r5
 800771e:	f7fe ff17 	bl	8006550 <_free_r>
 8007722:	2300      	movs	r3, #0
 8007724:	6363      	str	r3, [r4, #52]	@ 0x34
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	2300      	movs	r3, #0
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	f043 0308 	orr.w	r3, r3, #8
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	b94b      	cbnz	r3, 8007756 <__swsetup_r+0x7a>
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800774c:	d003      	beq.n	8007756 <__swsetup_r+0x7a>
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f882 	bl	800785a <__smakebuf_r>
 8007756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800775a:	f013 0201 	ands.w	r2, r3, #1
 800775e:	d00a      	beq.n	8007776 <__swsetup_r+0x9a>
 8007760:	2200      	movs	r2, #0
 8007762:	60a2      	str	r2, [r4, #8]
 8007764:	6962      	ldr	r2, [r4, #20]
 8007766:	4252      	negs	r2, r2
 8007768:	61a2      	str	r2, [r4, #24]
 800776a:	6922      	ldr	r2, [r4, #16]
 800776c:	b942      	cbnz	r2, 8007780 <__swsetup_r+0xa4>
 800776e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007772:	d1c5      	bne.n	8007700 <__swsetup_r+0x24>
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	0799      	lsls	r1, r3, #30
 8007778:	bf58      	it	pl
 800777a:	6962      	ldrpl	r2, [r4, #20]
 800777c:	60a2      	str	r2, [r4, #8]
 800777e:	e7f4      	b.n	800776a <__swsetup_r+0x8e>
 8007780:	2000      	movs	r0, #0
 8007782:	e7f7      	b.n	8007774 <__swsetup_r+0x98>
 8007784:	20000018 	.word	0x20000018

08007788 <_raise_r>:
 8007788:	291f      	cmp	r1, #31
 800778a:	b538      	push	{r3, r4, r5, lr}
 800778c:	4605      	mov	r5, r0
 800778e:	460c      	mov	r4, r1
 8007790:	d904      	bls.n	800779c <_raise_r+0x14>
 8007792:	2316      	movs	r3, #22
 8007794:	6003      	str	r3, [r0, #0]
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800779e:	b112      	cbz	r2, 80077a6 <_raise_r+0x1e>
 80077a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077a4:	b94b      	cbnz	r3, 80077ba <_raise_r+0x32>
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 f830 	bl	800780c <_getpid_r>
 80077ac:	4622      	mov	r2, r4
 80077ae:	4601      	mov	r1, r0
 80077b0:	4628      	mov	r0, r5
 80077b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b6:	f000 b817 	b.w	80077e8 <_kill_r>
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d00a      	beq.n	80077d4 <_raise_r+0x4c>
 80077be:	1c59      	adds	r1, r3, #1
 80077c0:	d103      	bne.n	80077ca <_raise_r+0x42>
 80077c2:	2316      	movs	r3, #22
 80077c4:	6003      	str	r3, [r0, #0]
 80077c6:	2001      	movs	r0, #1
 80077c8:	e7e7      	b.n	800779a <_raise_r+0x12>
 80077ca:	2100      	movs	r1, #0
 80077cc:	4620      	mov	r0, r4
 80077ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80077d2:	4798      	blx	r3
 80077d4:	2000      	movs	r0, #0
 80077d6:	e7e0      	b.n	800779a <_raise_r+0x12>

080077d8 <raise>:
 80077d8:	4b02      	ldr	r3, [pc, #8]	@ (80077e4 <raise+0xc>)
 80077da:	4601      	mov	r1, r0
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f7ff bfd3 	b.w	8007788 <_raise_r>
 80077e2:	bf00      	nop
 80077e4:	20000018 	.word	0x20000018

080077e8 <_kill_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	2300      	movs	r3, #0
 80077ec:	4d06      	ldr	r5, [pc, #24]	@ (8007808 <_kill_r+0x20>)
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	f7fa fb96 	bl	8001f26 <_kill>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d102      	bne.n	8007804 <_kill_r+0x1c>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	b103      	cbz	r3, 8007804 <_kill_r+0x1c>
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	20000a8c 	.word	0x20000a8c

0800780c <_getpid_r>:
 800780c:	f7fa bb84 	b.w	8001f18 <_getpid>

08007810 <__swhatbuf_r>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	460c      	mov	r4, r1
 8007814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007818:	4615      	mov	r5, r2
 800781a:	2900      	cmp	r1, #0
 800781c:	461e      	mov	r6, r3
 800781e:	b096      	sub	sp, #88	@ 0x58
 8007820:	da0c      	bge.n	800783c <__swhatbuf_r+0x2c>
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	2100      	movs	r1, #0
 8007826:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800782a:	bf14      	ite	ne
 800782c:	2340      	movne	r3, #64	@ 0x40
 800782e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007832:	2000      	movs	r0, #0
 8007834:	6031      	str	r1, [r6, #0]
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	b016      	add	sp, #88	@ 0x58
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	466a      	mov	r2, sp
 800783e:	f000 f849 	bl	80078d4 <_fstat_r>
 8007842:	2800      	cmp	r0, #0
 8007844:	dbed      	blt.n	8007822 <__swhatbuf_r+0x12>
 8007846:	9901      	ldr	r1, [sp, #4]
 8007848:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800784c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007850:	4259      	negs	r1, r3
 8007852:	4159      	adcs	r1, r3
 8007854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007858:	e7eb      	b.n	8007832 <__swhatbuf_r+0x22>

0800785a <__smakebuf_r>:
 800785a:	898b      	ldrh	r3, [r1, #12]
 800785c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800785e:	079d      	lsls	r5, r3, #30
 8007860:	4606      	mov	r6, r0
 8007862:	460c      	mov	r4, r1
 8007864:	d507      	bpl.n	8007876 <__smakebuf_r+0x1c>
 8007866:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	2301      	movs	r3, #1
 8007870:	6163      	str	r3, [r4, #20]
 8007872:	b003      	add	sp, #12
 8007874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007876:	466a      	mov	r2, sp
 8007878:	ab01      	add	r3, sp, #4
 800787a:	f7ff ffc9 	bl	8007810 <__swhatbuf_r>
 800787e:	9f00      	ldr	r7, [sp, #0]
 8007880:	4605      	mov	r5, r0
 8007882:	4639      	mov	r1, r7
 8007884:	4630      	mov	r0, r6
 8007886:	f7fe fed5 	bl	8006634 <_malloc_r>
 800788a:	b948      	cbnz	r0, 80078a0 <__smakebuf_r+0x46>
 800788c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007890:	059a      	lsls	r2, r3, #22
 8007892:	d4ee      	bmi.n	8007872 <__smakebuf_r+0x18>
 8007894:	f023 0303 	bic.w	r3, r3, #3
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	e7e2      	b.n	8007866 <__smakebuf_r+0xc>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078aa:	81a3      	strh	r3, [r4, #12]
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	6020      	str	r0, [r4, #0]
 80078b0:	b15b      	cbz	r3, 80078ca <__smakebuf_r+0x70>
 80078b2:	4630      	mov	r0, r6
 80078b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b8:	f000 f81e 	bl	80078f8 <_isatty_r>
 80078bc:	b128      	cbz	r0, 80078ca <__smakebuf_r+0x70>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f023 0303 	bic.w	r3, r3, #3
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	431d      	orrs	r5, r3
 80078ce:	81a5      	strh	r5, [r4, #12]
 80078d0:	e7cf      	b.n	8007872 <__smakebuf_r+0x18>
	...

080078d4 <_fstat_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	2300      	movs	r3, #0
 80078d8:	4d06      	ldr	r5, [pc, #24]	@ (80078f4 <_fstat_r+0x20>)
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	f7fa fb7f 	bl	8001fe4 <_fstat>
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	d102      	bne.n	80078f0 <_fstat_r+0x1c>
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	b103      	cbz	r3, 80078f0 <_fstat_r+0x1c>
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	bd38      	pop	{r3, r4, r5, pc}
 80078f2:	bf00      	nop
 80078f4:	20000a8c 	.word	0x20000a8c

080078f8 <_isatty_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	2300      	movs	r3, #0
 80078fc:	4d05      	ldr	r5, [pc, #20]	@ (8007914 <_isatty_r+0x1c>)
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	f7fa fb7d 	bl	8002002 <_isatty>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_isatty_r+0x1a>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_isatty_r+0x1a>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	20000a8c 	.word	0x20000a8c

08007918 <_init>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr

08007924 <_fini>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr
