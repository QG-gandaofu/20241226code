
adc3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  080073d8  080073d8  000083d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007770  08007770  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007770  08007770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007778  08007778  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007778  08007778  00008778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007780  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  200001d4  08007954  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08007954  00009ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e954  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a44  00000000  00000000  00017b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001a598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  0001b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f6  00000000  00000000  0001c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147ac  00000000  00000000  000359fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ee7  00000000  00000000  0004a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005354  00000000  00000000  000dc0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e1428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080073c0 	.word	0x080073c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080073c0 	.word	0x080073c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001122:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <MX_ADC1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_ADC1_Init+0x74>)
 800112e:	2201      	movs	r2, #1
 8001130:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_ADC1_Init+0x74>)
 800113a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800113e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114c:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_ADC1_Init+0x74>)
 800114e:	f000 ff2b 	bl	8001fa8 <HAL_ADC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f000 fac8 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800115c:	2305      	movs	r3, #5
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2301      	movs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_ADC1_Init+0x74>)
 800116e:	f001 f8e3 	bl	8002338 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001178:	f000 fab8 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001f0 	.word	0x200001f0
 8001188:	40012400 	.word	0x40012400

0800118c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a29      	ldr	r2, [pc, #164]	@ (800124c <HAL_ADC_MspInit+0xc0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d14a      	bne.n	8001242 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ac:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <HAL_ADC_MspInit+0xc4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_ADC_MspInit+0xc4>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <HAL_ADC_MspInit+0xc4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <HAL_ADC_MspInit+0xc4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a21      	ldr	r2, [pc, #132]	@ (8001250 <HAL_ADC_MspInit+0xc4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_ADC_MspInit+0xc4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011dc:	2320      	movs	r3, #32
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	481a      	ldr	r0, [pc, #104]	@ (8001254 <HAL_ADC_MspInit+0xc8>)
 80011ec:	f001 fd9a 	bl	8002d24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 80011f2:	4a1a      	ldr	r2, [pc, #104]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 80011f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 8001204:	2280      	movs	r2, #128	@ 0x80
 8001206:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 800120a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800120e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 8001212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001216:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 800121a:	2220      	movs	r2, #32
 800121c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 8001220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001224:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001226:	480c      	ldr	r0, [pc, #48]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 8001228:	f001 fb8e 	bl	8002948 <HAL_DMA_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001232:	f000 fa5b 	bl	80016ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 800123a:	621a      	str	r2, [r3, #32]
 800123c:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	20000220 	.word	0x20000220
 800125c:	40020008 	.word	0x40020008

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_DMA_Init+0x38>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <MX_DMA_Init+0x38>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_DMA_Init+0x38>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200b      	movs	r0, #11
 8001284:	f001 fb29 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001288:	200b      	movs	r0, #11
 800128a:	f001 fb42 	bl	8002912 <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6193      	str	r3, [r2, #24]
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000

080012f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x50>)
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <MX_I2C1_Init+0x54>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001304:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <MX_I2C1_Init+0x58>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 244;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001310:	22f4      	movs	r2, #244	@ 0xf4
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001336:	f001 fe79 	bl	800302c <HAL_I2C_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 f9d4 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000264 	.word	0x20000264
 800134c:	40005400 	.word	0x40005400
 8001350:	00061a80 	.word	0x00061a80

08001354 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <HAL_I2C_MspInit+0x70>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d123      	bne.n	80013bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <HAL_I2C_MspInit+0x74>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <HAL_I2C_MspInit+0x74>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_I2C_MspInit+0x74>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138c:	23c0      	movs	r3, #192	@ 0xc0
 800138e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	480b      	ldr	r0, [pc, #44]	@ (80013cc <HAL_I2C_MspInit+0x78>)
 80013a0:	f001 fcc0 	bl	8002d24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_I2C_MspInit+0x74>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_I2C_MspInit+0x74>)
 80013aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ae:	61d3      	str	r3, [r2, #28]
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_I2C_MspInit+0x74>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40005400 	.word	0x40005400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010c00 	.word	0x40010c00

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f000 fd62 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f82c 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f7ff ff5e 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 80013e0:	f7ff ff3e 	bl	8001260 <MX_DMA_Init>
  MX_ADC1_Init();
 80013e4:	f7ff fe94 	bl	8001110 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013e8:	f7ff ff86 	bl	80012f8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80013ec:	f000 fcc0 	bl	8001d70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);    // 等待OLED上电稳定
 80013f0:	2014      	movs	r0, #20
 80013f2:	f000 fdb5 	bl	8001f60 <HAL_Delay>
  OLED_Init();
 80013f6:	f000 f9a7 	bl	8001748 <OLED_Init>
//  Display_Init();   // 显示初始化界面

  /* 启动ADC DMA采样和定时器 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_DMA_Buffer, 1);  // 启动ADC DMA模式
 80013fa:	2201      	movs	r2, #1
 80013fc:	4909      	ldr	r1, [pc, #36]	@ (8001424 <main+0x54>)
 80013fe:	480a      	ldr	r0, [pc, #40]	@ (8001428 <main+0x58>)
 8001400:	f000 feaa 	bl	8002158 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001404:	4809      	ldr	r0, [pc, #36]	@ (800142c <main+0x5c>)
 8001406:	f002 ffaf 	bl	8004368 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(updateFlag){
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <main+0x60>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <main+0x4c>
	       Update_Display();
 8001412:	f000 f86d 	bl	80014f0 <Update_Display>
	       updateFlag = 0;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <main+0x60>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	     }
	  HAL_Delay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f000 fd9f 	bl	8001f60 <HAL_Delay>
	  if(updateFlag){
 8001422:	e7f2      	b.n	800140a <main+0x3a>
 8001424:	200002ba 	.word	0x200002ba
 8001428:	200001f0 	.word	0x200001f0
 800142c:	2000094c 	.word	0x2000094c
 8001430:	200004bc 	.word	0x200004bc

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143e:	2228      	movs	r2, #40	@ 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f004 f893 	bl	800556e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001468:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001472:	2301      	movs	r3, #1
 8001474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001476:	2302      	movs	r3, #2
 8001478:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001480:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001484:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fa6a 	bl	8003964 <HAL_RCC_OscConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001496:	f000 f929 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149a:	230f      	movs	r3, #15
 800149c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fcd6 	bl	8003e68 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014c2:	f000 f913 	bl	80016ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014c6:	2302      	movs	r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fe42 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014de:	f000 f905 	bl	80016ec <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	@ 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	0000      	movs	r0, r0
 80014ec:	0000      	movs	r0, r0
	...

080014f0 <Update_Display>:
      OLED_SetPixel(i, 64 - (uint8_t)(Vol[i] * 19.09), 0);
    }
    OLED_ShowFrame();
  }

void Update_Display(void){
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af02      	add	r7, sp, #8
    OLED_NewFrame();
 80014f6:	f000 f97d 	bl	80017f4 <OLED_NewFrame>
    // 数据左移并显示
    for(uint8_t i = 0; i < 127; i++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	e079      	b.n	80015f4 <Update_Display+0x104>
        Vol[i] = Vol[i + 1];
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4960      	ldr	r1, [pc, #384]	@ (8001688 <Update_Display+0x198>)
 8001508:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800150c:	495e      	ldr	r1, [pc, #376]	@ (8001688 <Update_Display+0x198>)
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(fabs(Vol[i] - Vol[i+1]) > 0.5){
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a5c      	ldr	r2, [pc, #368]	@ (8001688 <Update_Display+0x198>)
 8001516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	3301      	adds	r3, #1
 800151e:	495a      	ldr	r1, [pc, #360]	@ (8001688 <Update_Display+0x198>)
 8001520:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f7ff fb22 	bl	8000b70 <__aeabi_fsub>
 800152c:	4603      	mov	r3, r0
 800152e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001532:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fde0 	bl	80010fc <__aeabi_fcmpgt>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d039      	beq.n	80015b6 <Update_Display+0xc6>
            OLED_DrawLine(i, 64-(uint8_t)(Vol[i]*19.09),
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4a50      	ldr	r2, [pc, #320]	@ (8001688 <Update_Display+0x198>)
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff6c 	bl	8000428 <__aeabi_f2d>
 8001550:	a349      	add	r3, pc, #292	@ (adr r3, 8001678 <Update_Display+0x188>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe ffbf 	bl	80004d8 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fa91 	bl	8000a88 <__aeabi_d2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800156e:	b2dc      	uxtb	r4, r3
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	3301      	adds	r3, #1
 8001574:	b2dd      	uxtb	r5, r3
                         i+1, 64-(uint8_t)(Vol[i+1]*19.09), 0);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	3301      	adds	r3, #1
 800157a:	4a43      	ldr	r2, [pc, #268]	@ (8001688 <Update_Display+0x198>)
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ff51 	bl	8000428 <__aeabi_f2d>
 8001586:	a33c      	add	r3, pc, #240	@ (adr r3, 8001678 <Update_Display+0x188>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7fe ffa4 	bl	80004d8 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fa76 	bl	8000a88 <__aeabi_d2uiz>
 800159c:	4603      	mov	r3, r0
 800159e:	b2db      	uxtb	r3, r3
            OLED_DrawLine(i, 64-(uint8_t)(Vol[i]*19.09),
 80015a0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	79f8      	ldrb	r0, [r7, #7]
 80015a8:	2200      	movs	r2, #0
 80015aa:	9200      	str	r2, [sp, #0]
 80015ac:	462a      	mov	r2, r5
 80015ae:	4621      	mov	r1, r4
 80015b0:	f000 f9b8 	bl	8001924 <OLED_DrawLine>
 80015b4:	e01b      	b.n	80015ee <Update_Display+0xfe>
        } else {
            OLED_SetPixel(i, 64-(uint8_t)(Vol[i]*19.09), 0);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4a33      	ldr	r2, [pc, #204]	@ (8001688 <Update_Display+0x198>)
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff32 	bl	8000428 <__aeabi_f2d>
 80015c4:	a32c      	add	r3, pc, #176	@ (adr r3, 8001678 <Update_Display+0x188>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe ff85 	bl	80004d8 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fa57 	bl	8000a88 <__aeabi_d2uiz>
 80015da:	4603      	mov	r3, r0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80015e2:	b2d9      	uxtb	r1, r3
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2200      	movs	r2, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f943 	bl	8001874 <OLED_SetPixel>
    for(uint8_t i = 0; i < 127; i++){
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	3301      	adds	r3, #1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b7e      	cmp	r3, #126	@ 0x7e
 80015f8:	d982      	bls.n	8001500 <Update_Display+0x10>
        }
    }
    // 更新最新采样点 - 使用DMA获取的值
    Vol[127] = (float)ADC_Value / 4095 * 3.3;
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <Update_Display+0x19c>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb68 	bl	8000cd4 <__aeabi_ui2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4922      	ldr	r1, [pc, #136]	@ (8001690 <Update_Display+0x1a0>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc6f 	bl	8000eec <__aeabi_fdiv>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff09 	bl	8000428 <__aeabi_f2d>
 8001616:	a31a      	add	r3, pc, #104	@ (adr r3, 8001680 <Update_Display+0x190>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe ff5c 	bl	80004d8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fa4e 	bl	8000ac8 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a16      	ldr	r2, [pc, #88]	@ (8001688 <Update_Display+0x198>)
 8001630:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
    OLED_SetPixel(127, 64-(uint8_t)(Vol[127]*19.09), 0);
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <Update_Display+0x198>)
 8001636:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fef4 	bl	8000428 <__aeabi_f2d>
 8001640:	a30d      	add	r3, pc, #52	@ (adr r3, 8001678 <Update_Display+0x188>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ff47 	bl	80004d8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fa19 	bl	8000a88 <__aeabi_d2uiz>
 8001656:	4603      	mov	r3, r0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2200      	movs	r2, #0
 8001662:	4619      	mov	r1, r3
 8001664:	207f      	movs	r0, #127	@ 0x7f
 8001666:	f000 f905 	bl	8001874 <OLED_SetPixel>

    OLED_ShowFrame();
 800166a:	f000 f8cf 	bl	800180c <OLED_ShowFrame>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bdb0      	pop	{r4, r5, r7, pc}
 8001676:	bf00      	nop
 8001678:	3d70a3d7 	.word	0x3d70a3d7
 800167c:	4033170a 	.word	0x4033170a
 8001680:	66666666 	.word	0x66666666
 8001684:	400a6666 	.word	0x400a6666
 8001688:	200002bc 	.word	0x200002bc
 800168c:	200002b8 	.word	0x200002b8
 8001690:	457ff000 	.word	0x457ff000

08001694 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a4:	d102      	bne.n	80016ac <HAL_TIM_PeriodElapsedCallback+0x18>
    updateFlag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
    }
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200004bc 	.word	0x200004bc

080016bc <HAL_ADC_ConvCpltCallback>:

// 添加DMA完成回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <HAL_ADC_ConvCpltCallback+0x24>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d103      	bne.n	80016d6 <HAL_ADC_ConvCpltCallback+0x1a>
    {
        ADC_Value = ADC_DMA_Buffer;  // 更新ADC值
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_ADC_ConvCpltCallback+0x28>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80016d4:	801a      	strh	r2, [r3, #0]
    }
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40012400 	.word	0x40012400
 80016e4:	200002ba 	.word	0x200002ba
 80016e8:	200002b8 	.word	0x200002b8

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <Error_Handler+0x8>

080016f8 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	b29b      	uxth	r3, r3
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	9200      	str	r2, [sp, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	217a      	movs	r1, #122	@ 0x7a
 8001712:	4803      	ldr	r0, [pc, #12]	@ (8001720 <OLED_Send+0x28>)
 8001714:	f001 fdce 	bl	80032b4 <HAL_I2C_Master_Transmit>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000264 	.word	0x20000264

08001724 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <OLED_SendCmd+0x20>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001734:	2102      	movs	r1, #2
 8001736:	4803      	ldr	r0, [pc, #12]	@ (8001744 <OLED_SendCmd+0x20>)
 8001738:	f7ff ffde 	bl	80016f8 <OLED_Send>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200008c0 	.word	0x200008c0

08001748 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800174c:	20ae      	movs	r0, #174	@ 0xae
 800174e:	f7ff ffe9 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 8001752:	2002      	movs	r0, #2
 8001754:	f7ff ffe6 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 8001758:	2010      	movs	r0, #16
 800175a:	f7ff ffe3 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 800175e:	2040      	movs	r0, #64	@ 0x40
 8001760:	f7ff ffe0 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 8001764:	20b0      	movs	r0, #176	@ 0xb0
 8001766:	f7ff ffdd 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 800176a:	2081      	movs	r0, #129	@ 0x81
 800176c:	f7ff ffda 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8001770:	20cf      	movs	r0, #207	@ 0xcf
 8001772:	f7ff ffd7 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 8001776:	20a1      	movs	r0, #161	@ 0xa1
 8001778:	f7ff ffd4 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 800177c:	20a6      	movs	r0, #166	@ 0xa6
 800177e:	f7ff ffd1 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8001782:	20a8      	movs	r0, #168	@ 0xa8
 8001784:	f7ff ffce 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8001788:	203f      	movs	r0, #63	@ 0x3f
 800178a:	f7ff ffcb 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 800178e:	20ad      	movs	r0, #173	@ 0xad
 8001790:	f7ff ffc8 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8001794:	208b      	movs	r0, #139	@ 0x8b
 8001796:	f7ff ffc5 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 800179a:	2033      	movs	r0, #51	@ 0x33
 800179c:	f7ff ffc2 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 80017a0:	20c8      	movs	r0, #200	@ 0xc8
 80017a2:	f7ff ffbf 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 80017a6:	20d3      	movs	r0, #211	@ 0xd3
 80017a8:	f7ff ffbc 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffb9 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 80017b2:	20d5      	movs	r0, #213	@ 0xd5
 80017b4:	f7ff ffb6 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 80017b8:	20c0      	movs	r0, #192	@ 0xc0
 80017ba:	f7ff ffb3 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 80017be:	20d9      	movs	r0, #217	@ 0xd9
 80017c0:	f7ff ffb0 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 80017c4:	201f      	movs	r0, #31
 80017c6:	f7ff ffad 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 80017ca:	20da      	movs	r0, #218	@ 0xda
 80017cc:	f7ff ffaa 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80017d0:	2012      	movs	r0, #18
 80017d2:	f7ff ffa7 	bl	8001724 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 80017d6:	20db      	movs	r0, #219	@ 0xdb
 80017d8:	f7ff ffa4 	bl	8001724 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 80017dc:	2040      	movs	r0, #64	@ 0x40
 80017de:	f7ff ffa1 	bl	8001724 <OLED_SendCmd>

  OLED_NewFrame();
 80017e2:	f000 f807 	bl	80017f4 <OLED_NewFrame>
  OLED_ShowFrame();
 80017e6:	f000 f811 	bl	800180c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80017ea:	20af      	movs	r0, #175	@ 0xaf
 80017ec:	f7ff ff9a 	bl	8001724 <OLED_SendCmd>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80017f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017fc:	2100      	movs	r1, #0
 80017fe:	4802      	ldr	r0, [pc, #8]	@ (8001808 <OLED_NewFrame+0x14>)
 8001800:	f003 feb5 	bl	800556e <memset>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200004c0 	.word	0x200004c0

0800180c <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <OLED_ShowFrame+0x5c>)
 8001814:	2240      	movs	r2, #64	@ 0x40
 8001816:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e01b      	b.n	8001856 <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3b50      	subs	r3, #80	@ 0x50
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff7d 	bl	8001724 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 800182a:	2002      	movs	r0, #2
 800182c:	f7ff ff7a 	bl	8001724 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001830:	2010      	movs	r0, #16
 8001832:	f7ff ff77 	bl	8001724 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001836:	480d      	ldr	r0, [pc, #52]	@ (800186c <OLED_ShowFrame+0x60>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	01db      	lsls	r3, r3, #7
 800183c:	4a0c      	ldr	r2, [pc, #48]	@ (8001870 <OLED_ShowFrame+0x64>)
 800183e:	4413      	add	r3, r2
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	4619      	mov	r1, r3
 8001844:	f003 ff21 	bl	800568a <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001848:	2181      	movs	r1, #129	@ 0x81
 800184a:	4807      	ldr	r0, [pc, #28]	@ (8001868 <OLED_ShowFrame+0x5c>)
 800184c:	f7ff ff54 	bl	80016f8 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	3301      	adds	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b07      	cmp	r3, #7
 800185a:	d9e0      	bls.n	800181e <OLED_ShowFrame+0x12>
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200008c4 	.word	0x200008c4
 800186c:	200008c5 	.word	0x200008c5
 8001870:	200004c0 	.word	0x200004c0

08001874 <OLED_SetPixel>:
 * @brief 设置一个像素点
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
 800187e:	460b      	mov	r3, r1
 8001880:	71bb      	strb	r3, [r7, #6]
 8001882:	4613      	mov	r3, r2
 8001884:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db43      	blt.n	8001916 <OLED_SetPixel+0xa2>
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	2b3f      	cmp	r3, #63	@ 0x3f
 8001892:	d840      	bhi.n	8001916 <OLED_SetPixel+0xa2>
  if (!color) {
 8001894:	797b      	ldrb	r3, [r7, #5]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11d      	bne.n	80018d6 <OLED_SetPixel+0x62>
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	b2d8      	uxtb	r0, r3
 80018a0:	4602      	mov	r2, r0
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	491e      	ldr	r1, [pc, #120]	@ (8001920 <OLED_SetPixel+0xac>)
 80018a6:	01d2      	lsls	r2, r2, #7
 80018a8:	440a      	add	r2, r1
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	b259      	sxtb	r1, r3
 80018c2:	4602      	mov	r2, r0
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	b2c8      	uxtb	r0, r1
 80018c8:	4915      	ldr	r1, [pc, #84]	@ (8001920 <OLED_SetPixel+0xac>)
 80018ca:	01d2      	lsls	r2, r2, #7
 80018cc:	440a      	add	r2, r1
 80018ce:	4413      	add	r3, r2
 80018d0:	4602      	mov	r2, r0
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	e020      	b.n	8001918 <OLED_SetPixel+0xa4>
  } else {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	b2d8      	uxtb	r0, r3
 80018dc:	4602      	mov	r2, r0
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	490f      	ldr	r1, [pc, #60]	@ (8001920 <OLED_SetPixel+0xac>)
 80018e2:	01d2      	lsls	r2, r2, #7
 80018e4:	440a      	add	r2, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b25a      	sxtb	r2, r3
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	4013      	ands	r3, r2
 8001900:	b259      	sxtb	r1, r3
 8001902:	4602      	mov	r2, r0
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	b2c8      	uxtb	r0, r1
 8001908:	4905      	ldr	r1, [pc, #20]	@ (8001920 <OLED_SetPixel+0xac>)
 800190a:	01d2      	lsls	r2, r2, #7
 800190c:	440a      	add	r2, r1
 800190e:	4413      	add	r3, r2
 8001910:	4602      	mov	r2, r0
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e000      	b.n	8001918 <OLED_SetPixel+0xa4>
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 8001916:	bf00      	nop
  }
}
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	200004c0 	.word	0x200004c0

08001924 <OLED_DrawLine>:
 * @param x2 终止点横坐标
 * @param y2 终止点纵坐标
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制线段
 */
void OLED_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, OLED_ColorMode color) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	4603      	mov	r3, r0
 8001938:	71bb      	strb	r3, [r7, #6]
 800193a:	460b      	mov	r3, r1
 800193c:	717b      	strb	r3, [r7, #5]
 800193e:	4613      	mov	r3, r2
 8001940:	713b      	strb	r3, [r7, #4]
  static uint8_t temp = 0;
  if (x1 == x2) {
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	797b      	ldrb	r3, [r7, #5]
 8001946:	429a      	cmp	r2, r3
 8001948:	d11d      	bne.n	8001986 <OLED_DrawLine+0x62>
    if (y1 > y2) {
 800194a:	79ba      	ldrb	r2, [r7, #6]
 800194c:	793b      	ldrb	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d907      	bls.n	8001962 <OLED_DrawLine+0x3e>
      temp = y1;
 8001952:	4a69      	ldr	r2, [pc, #420]	@ (8001af8 <OLED_DrawLine+0x1d4>)
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	7013      	strb	r3, [r2, #0]
      y1 = y2;
 8001958:	793b      	ldrb	r3, [r7, #4]
 800195a:	71bb      	strb	r3, [r7, #6]
      y2 = temp;
 800195c:	4b66      	ldr	r3, [pc, #408]	@ (8001af8 <OLED_DrawLine+0x1d4>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	713b      	strb	r3, [r7, #4]
    }
    for (uint8_t y = y1; y <= y2; y++) {
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	75fb      	strb	r3, [r7, #23]
 8001966:	e009      	b.n	800197c <OLED_DrawLine+0x58>
      OLED_SetPixel(x1, y, color);
 8001968:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800196c:	7df9      	ldrb	r1, [r7, #23]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff7f 	bl	8001874 <OLED_SetPixel>
    for (uint8_t y = y1; y <= y2; y++) {
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	3301      	adds	r3, #1
 800197a:	75fb      	strb	r3, [r7, #23]
 800197c:	7dfa      	ldrb	r2, [r7, #23]
 800197e:	793b      	ldrb	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	d9f1      	bls.n	8001968 <OLED_DrawLine+0x44>
          eps -= dy;
        }
      }
    }
  }
}
 8001984:	e0b4      	b.n	8001af0 <OLED_DrawLine+0x1cc>
  } else if (y1 == y2) {
 8001986:	79ba      	ldrb	r2, [r7, #6]
 8001988:	793b      	ldrb	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d11d      	bne.n	80019ca <OLED_DrawLine+0xa6>
    if (x1 > x2) {
 800198e:	79fa      	ldrb	r2, [r7, #7]
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	429a      	cmp	r2, r3
 8001994:	d907      	bls.n	80019a6 <OLED_DrawLine+0x82>
      temp = x1;
 8001996:	4a58      	ldr	r2, [pc, #352]	@ (8001af8 <OLED_DrawLine+0x1d4>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	7013      	strb	r3, [r2, #0]
      x1 = x2;
 800199c:	797b      	ldrb	r3, [r7, #5]
 800199e:	71fb      	strb	r3, [r7, #7]
      x2 = temp;
 80019a0:	4b55      	ldr	r3, [pc, #340]	@ (8001af8 <OLED_DrawLine+0x1d4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	717b      	strb	r3, [r7, #5]
    for (uint8_t x = x1; x <= x2; x++) {
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	75bb      	strb	r3, [r7, #22]
 80019aa:	e009      	b.n	80019c0 <OLED_DrawLine+0x9c>
      OLED_SetPixel(x, y1, color);
 80019ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019b0:	79b9      	ldrb	r1, [r7, #6]
 80019b2:	7dbb      	ldrb	r3, [r7, #22]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <OLED_SetPixel>
    for (uint8_t x = x1; x <= x2; x++) {
 80019ba:	7dbb      	ldrb	r3, [r7, #22]
 80019bc:	3301      	adds	r3, #1
 80019be:	75bb      	strb	r3, [r7, #22]
 80019c0:	7dba      	ldrb	r2, [r7, #22]
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d9f1      	bls.n	80019ac <OLED_DrawLine+0x88>
}
 80019c8:	e092      	b.n	8001af0 <OLED_DrawLine+0x1cc>
    int16_t dx = x2 - x1;
 80019ca:	797b      	ldrb	r3, [r7, #5]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	81fb      	strh	r3, [r7, #14]
    int16_t dy = y2 - y1;
 80019d8:	793b      	ldrb	r3, [r7, #4]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	81bb      	strh	r3, [r7, #12]
    int16_t ux = ((dx > 0) << 1) - 1;
 80019e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	dd01      	ble.n	80019f2 <OLED_DrawLine+0xce>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e001      	b.n	80019f6 <OLED_DrawLine+0xd2>
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	817b      	strh	r3, [r7, #10]
    int16_t uy = ((dy > 0) << 1) - 1;
 80019f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dd01      	ble.n	8001a04 <OLED_DrawLine+0xe0>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e001      	b.n	8001a08 <OLED_DrawLine+0xe4>
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	813b      	strh	r3, [r7, #8]
    int16_t x = x1, y = y1, eps = 0;
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	82bb      	strh	r3, [r7, #20]
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	827b      	strh	r3, [r7, #18]
 8001a12:	2300      	movs	r3, #0
 8001a14:	823b      	strh	r3, [r7, #16]
    dx = abs(dx);
 8001a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bfb8      	it	lt
 8001a1e:	425b      	neglt	r3, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	81fb      	strh	r3, [r7, #14]
    dy = abs(dy);
 8001a24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bfb8      	it	lt
 8001a2c:	425b      	neglt	r3, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	81bb      	strh	r3, [r7, #12]
    if (dx > dy) {
 8001a32:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dd2c      	ble.n	8001a98 <OLED_DrawLine+0x174>
      for (x = x1; x != x2; x += ux) {
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	82bb      	strh	r3, [r7, #20]
 8001a42:	e023      	b.n	8001a8c <OLED_DrawLine+0x168>
        OLED_SetPixel(x, y, color);
 8001a44:	8abb      	ldrh	r3, [r7, #20]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	8a7a      	ldrh	r2, [r7, #18]
 8001a4a:	b2d1      	uxtb	r1, r2
 8001a4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff0f 	bl	8001874 <OLED_SetPixel>
        eps += dy;
 8001a56:	8a3a      	ldrh	r2, [r7, #16]
 8001a58:	89bb      	ldrh	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	823b      	strh	r3, [r7, #16]
        if ((eps << 1) >= dx) {
 8001a60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a64:	005a      	lsls	r2, r3, #1
 8001a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	db09      	blt.n	8001a82 <OLED_DrawLine+0x15e>
          y += uy;
 8001a6e:	8a7a      	ldrh	r2, [r7, #18]
 8001a70:	893b      	ldrh	r3, [r7, #8]
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	827b      	strh	r3, [r7, #18]
          eps -= dx;
 8001a78:	8a3a      	ldrh	r2, [r7, #16]
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	823b      	strh	r3, [r7, #16]
      for (x = x1; x != x2; x += ux) {
 8001a82:	8aba      	ldrh	r2, [r7, #20]
 8001a84:	897b      	ldrh	r3, [r7, #10]
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	82bb      	strh	r3, [r7, #20]
 8001a8c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a90:	797b      	ldrb	r3, [r7, #5]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d1d6      	bne.n	8001a44 <OLED_DrawLine+0x120>
}
 8001a96:	e02b      	b.n	8001af0 <OLED_DrawLine+0x1cc>
      for (y = y1; y != y2; y += uy) {
 8001a98:	79bb      	ldrb	r3, [r7, #6]
 8001a9a:	827b      	strh	r3, [r7, #18]
 8001a9c:	e023      	b.n	8001ae6 <OLED_DrawLine+0x1c2>
        OLED_SetPixel(x, y, color);
 8001a9e:	8abb      	ldrh	r3, [r7, #20]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	8a7a      	ldrh	r2, [r7, #18]
 8001aa4:	b2d1      	uxtb	r1, r2
 8001aa6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fee2 	bl	8001874 <OLED_SetPixel>
        eps += dx;
 8001ab0:	8a3a      	ldrh	r2, [r7, #16]
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	823b      	strh	r3, [r7, #16]
        if ((eps << 1) >= dy) {
 8001aba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001abe:	005a      	lsls	r2, r3, #1
 8001ac0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	db09      	blt.n	8001adc <OLED_DrawLine+0x1b8>
          x += ux;
 8001ac8:	8aba      	ldrh	r2, [r7, #20]
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	4413      	add	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	82bb      	strh	r3, [r7, #20]
          eps -= dy;
 8001ad2:	8a3a      	ldrh	r2, [r7, #16]
 8001ad4:	89bb      	ldrh	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	823b      	strh	r3, [r7, #16]
      for (y = y1; y != y2; y += uy) {
 8001adc:	8a7a      	ldrh	r2, [r7, #18]
 8001ade:	893b      	ldrh	r3, [r7, #8]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	827b      	strh	r3, [r7, #18]
 8001ae6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001aea:	793b      	ldrb	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1d6      	bne.n	8001a9e <OLED_DrawLine+0x17a>
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	20000945 	.word	0x20000945

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6193      	str	r3, [r2, #24]
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_MspInit+0x60>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <HAL_MspInit+0x60>)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <NMI_Handler+0x4>

08001b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <MemManage_Handler+0x4>

08001b78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 f9ba 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <DMA1_Channel1_IRQHandler+0x10>)
 8001bbe:	f000 ff7d 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000220 	.word	0x20000220

08001bcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <TIM2_IRQHandler+0x10>)
 8001bd2:	f002 fc1b 	bl	800440c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000094c 	.word	0x2000094c

08001be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <_kill>:

int _kill(int pid, int sig)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf8:	f003 fd0c 	bl	8005614 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2216      	movs	r2, #22
 8001c00:	601a      	str	r2, [r3, #0]
  return -1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_exit>:

void _exit (int status)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c16:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffe7 	bl	8001bee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <_exit+0x12>

08001c24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e00a      	b.n	8001c4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c36:	f3af 8000 	nop.w
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60ba      	str	r2, [r7, #8]
 8001c42:	b2ca      	uxtb	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf0      	blt.n	8001c36 <_read+0x12>
  }

  return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e009      	b.n	8001c84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf1      	blt.n	8001c70 <_write+0x12>
  }
  return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_close>:

int _close(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <_isatty>:

int _isatty(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f003 fc74 	bl	8005614 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20005000 	.word	0x20005000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000948 	.word	0x20000948
 8001d60:	20000ae8 	.word	0x20000ae8

08001d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001d8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001d96:	2247      	movs	r2, #71	@ 0x47
 8001d98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001da0:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001da2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001da6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001db6:	f002 fa87 	bl	80042c8 <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dc0:	f7ff fc94 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001dd2:	f002 fc0b 	bl	80045ec <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ddc:	f7ff fc86 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001dee:	f002 fded 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001df8:	f7ff fc78 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000094c 	.word	0x2000094c

08001e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e18:	d113      	bne.n	8001e42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_TIM_Base_MspInit+0x44>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <HAL_TIM_Base_MspInit+0x44>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_TIM_Base_MspInit+0x44>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	201c      	movs	r0, #28
 8001e38:	f000 fd4f 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e3c:	201c      	movs	r0, #28
 8001e3e:	f000 fd68 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000

08001e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff ff88 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480b      	ldr	r0, [pc, #44]	@ (8001e84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e56:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e58:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e6c:	4c09      	ldr	r4, [pc, #36]	@ (8001e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f003 fbd1 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e7e:	f7ff faa7 	bl	80013d0 <main>
  bx lr
 8001e82:	4770      	bx	lr
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e8c:	08007780 	.word	0x08007780
  ldr r2, =_sbss
 8001e90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e94:	20000ae4 	.word	0x20000ae4

08001e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_2_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_Init+0x28>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_Init+0x28>)
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 fd09 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fe20 	bl	8001afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fd21 	bl	800292e <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 fce9 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_IncTick+0x1c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a03      	ldr	r2, [pc, #12]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000994 	.word	0x20000994

08001f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b02      	ldr	r3, [pc, #8]	@ (8001f5c <HAL_GetTick+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000994 	.word	0x20000994

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f86:	bf00      	nop
 8001f88:	f7ff ffe0 	bl	8001f4c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008

08001fa8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0be      	b.n	8002148 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff f8d0 	bl	800118c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 faf5 	bl	80025dc <ADC_ConversionStop_Disable>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8099 	bne.w	8002136 <HAL_ADC_Init+0x18e>
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 8095 	bne.w	8002136 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002014:	f023 0302 	bic.w	r3, r3, #2
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002028:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7b1b      	ldrb	r3, [r3, #12]
 800202e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002030:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4313      	orrs	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002040:	d003      	beq.n	800204a <HAL_ADC_Init+0xa2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_ADC_Init+0xa8>
 800204a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800204e:	e000      	b.n	8002052 <HAL_ADC_Init+0xaa>
 8002050:	2300      	movs	r3, #0
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7d1b      	ldrb	r3, [r3, #20]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d119      	bne.n	8002094 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7b1b      	ldrb	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	3b01      	subs	r3, #1
 800206e:	035a      	lsls	r2, r3, #13
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	e00b      	b.n	8002094 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	4b28      	ldr	r3, [pc, #160]	@ (8002150 <HAL_ADC_Init+0x1a8>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c4:	d003      	beq.n	80020ce <HAL_ADC_Init+0x126>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d104      	bne.n	80020d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	051b      	lsls	r3, r3, #20
 80020d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_ADC_Init+0x1ac>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10b      	bne.n	8002114 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002112:	e018      	b.n	8002146 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	f023 0312 	bic.w	r3, r3, #18
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002134:	e007      	b.n	8002146 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002146:	7dfb      	ldrb	r3, [r7, #23]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	ffe1f7fd 	.word	0xffe1f7fd
 8002154:	ff1f0efe 	.word	0xff1f0efe

08002158 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a64      	ldr	r2, [pc, #400]	@ (8002300 <HAL_ADC_Start_DMA+0x1a8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_ADC_Start_DMA+0x24>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a63      	ldr	r2, [pc, #396]	@ (8002304 <HAL_ADC_Start_DMA+0x1ac>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d106      	bne.n	800218a <HAL_ADC_Start_DMA+0x32>
 800217c:	4b60      	ldr	r3, [pc, #384]	@ (8002300 <HAL_ADC_Start_DMA+0x1a8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002184:	2b00      	cmp	r3, #0
 8002186:	f040 80b3 	bne.w	80022f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_ADC_Start_DMA+0x40>
 8002194:	2302      	movs	r3, #2
 8002196:	e0ae      	b.n	80022f6 <HAL_ADC_Start_DMA+0x19e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f9c1 	bl	8002528 <ADC_Enable>
 80021a6:	4603      	mov	r3, r0
 80021a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 809a 	bne.w	80022e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002304 <HAL_ADC_Start_DMA+0x1ac>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d105      	bne.n	80021dc <HAL_ADC_Start_DMA+0x84>
 80021d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <HAL_ADC_Start_DMA+0x1a8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d115      	bne.n	8002208 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d026      	beq.n	8002244 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002206:	e01d      	b.n	8002244 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a39      	ldr	r2, [pc, #228]	@ (8002300 <HAL_ADC_Start_DMA+0x1a8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_ADC_Start_DMA+0xd0>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a38      	ldr	r2, [pc, #224]	@ (8002304 <HAL_ADC_Start_DMA+0x1ac>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d10d      	bne.n	8002244 <HAL_ADC_Start_DMA+0xec>
 8002228:	4b35      	ldr	r3, [pc, #212]	@ (8002300 <HAL_ADC_Start_DMA+0x1a8>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800223c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	f023 0206 	bic.w	r2, r3, #6
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800225c:	e002      	b.n	8002264 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a25      	ldr	r2, [pc, #148]	@ (8002308 <HAL_ADC_Start_DMA+0x1b0>)
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a24      	ldr	r2, [pc, #144]	@ (800230c <HAL_ADC_Start_DMA+0x1b4>)
 800227a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a23      	ldr	r2, [pc, #140]	@ (8002310 <HAL_ADC_Start_DMA+0x1b8>)
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0202 	mvn.w	r2, #2
 800228c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800229c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a18      	ldr	r0, [r3, #32]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	334c      	adds	r3, #76	@ 0x4c
 80022a8:	4619      	mov	r1, r3
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f000 fba5 	bl	80029fc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022c0:	d108      	bne.n	80022d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80022d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80022d2:	e00f      	b.n	80022f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80022e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80022e4:	e006      	b.n	80022f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80022ee:	e001      	b.n	80022f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40012400 	.word	0x40012400
 8002304:	40012800 	.word	0x40012800
 8002308:	0800265f 	.word	0x0800265f
 800230c:	080026db 	.word	0x080026db
 8002310:	080026f7 	.word	0x080026f7

08002314 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x20>
 8002354:	2302      	movs	r3, #2
 8002356:	e0dc      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1da>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d81c      	bhi.n	80023a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b05      	subs	r3, #5
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b05      	subs	r3, #5
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	@ 0x34
 80023a0:	e03c      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d81c      	bhi.n	80023e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b23      	subs	r3, #35	@ 0x23
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4019      	ands	r1, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	@ 0x23
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e2:	e01b      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b41      	subs	r3, #65	@ 0x41
 80023f6:	221f      	movs	r2, #31
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4019      	ands	r1, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	@ 0x41
 8002410:	fa00 f203 	lsl.w	r2, r0, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d91c      	bls.n	800245e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68d9      	ldr	r1, [r3, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	3b1e      	subs	r3, #30
 8002436:	2207      	movs	r2, #7
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6898      	ldr	r0, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3b1e      	subs	r3, #30
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	e019      	b.n	8002492 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b10      	cmp	r3, #16
 8002498:	d003      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d132      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_ADC_ConfigChannel+0x1e4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d125      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d126      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80024c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d11a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_ADC_ConfigChannel+0x1e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <HAL_ADC_ConfigChannel+0x1ec>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x1b2>
 80024f6:	e007      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	40012400 	.word	0x40012400
 8002520:	20000000 	.word	0x20000000
 8002524:	431bde83 	.word	0x431bde83

08002528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d040      	beq.n	80025c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <ADC_Enable+0xac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1f      	ldr	r2, [pc, #124]	@ (80025d8 <ADC_Enable+0xb0>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	0c9b      	lsrs	r3, r3, #18
 8002562:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002564:	e002      	b.n	800256c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002572:	f7ff fceb 	bl	8001f4c <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002578:	e01f      	b.n	80025ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800257a:	f7ff fce7 	bl	8001f4c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d918      	bls.n	80025ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d011      	beq.n	80025ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	f043 0210 	orr.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e007      	b.n	80025ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d1d8      	bne.n	800257a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000
 80025d8:	431bde83 	.word	0x431bde83

080025dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12e      	bne.n	8002654 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fca1 	bl	8001f4c <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800260c:	e01b      	b.n	8002646 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800260e:	f7ff fc9d 	bl	8001f4c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d914      	bls.n	8002646 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10d      	bne.n	8002646 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e007      	b.n	8002656 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d0dc      	beq.n	800260e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002674:	2b00      	cmp	r3, #0
 8002676:	d127      	bne.n	80026c8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800268e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002692:	d115      	bne.n	80026c0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7fe fffb 	bl	80016bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026c6:	e004      	b.n	80026d2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fe13 	bl	8002314 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fe02 	bl	8002326 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4906      	ldr	r1, [pc, #24]	@ (80027c4 <__NVIC_EnableIRQ+0x34>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	@ (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	@ (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	@ 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	@ 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff90 	bl	80027c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff2d 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff42 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff90 	bl	800281c <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5f 	bl	80027c8 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff35 	bl	8002790 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e043      	b.n	80029e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <HAL_DMA_Init+0xa8>)
 8002966:	4413      	add	r3, r2
 8002968:	4a22      	ldr	r2, [pc, #136]	@ (80029f4 <HAL_DMA_Init+0xac>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	009a      	lsls	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1f      	ldr	r2, [pc, #124]	@ (80029f8 <HAL_DMA_Init+0xb0>)
 800297a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002992:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	bffdfff8 	.word	0xbffdfff8
 80029f4:	cccccccd 	.word	0xcccccccd
 80029f8:	40020000 	.word	0x40020000

080029fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA_Start_IT+0x20>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e04b      	b.n	8002ab4 <HAL_DMA_Start_IT+0xb8>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d13a      	bne.n	8002aa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f937 	bl	8002cc8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 020e 	orr.w	r2, r2, #14
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e00f      	b.n	8002a94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 020a 	orr.w	r2, r2, #10
 8002a92:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e005      	b.n	8002ab2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	2204      	movs	r2, #4
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d04f      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xc8>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04a      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0204 	bic.w	r2, r2, #4
 8002b0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a66      	ldr	r2, [pc, #408]	@ (8002cac <HAL_DMA_IRQHandler+0x1f0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d029      	beq.n	8002b6a <HAL_DMA_IRQHandler+0xae>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a65      	ldr	r2, [pc, #404]	@ (8002cb0 <HAL_DMA_IRQHandler+0x1f4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <HAL_DMA_IRQHandler+0xaa>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a63      	ldr	r2, [pc, #396]	@ (8002cb4 <HAL_DMA_IRQHandler+0x1f8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01a      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xa4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a62      	ldr	r2, [pc, #392]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1fc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d012      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x9e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a60      	ldr	r2, [pc, #384]	@ (8002cbc <HAL_DMA_IRQHandler+0x200>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00a      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x98>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc0 <HAL_DMA_IRQHandler+0x204>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d102      	bne.n	8002b4e <HAL_DMA_IRQHandler+0x92>
 8002b48:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b4c:	e00e      	b.n	8002b6c <HAL_DMA_IRQHandler+0xb0>
 8002b4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b52:	e00b      	b.n	8002b6c <HAL_DMA_IRQHandler+0xb0>
 8002b54:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b58:	e008      	b.n	8002b6c <HAL_DMA_IRQHandler+0xb0>
 8002b5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b5e:	e005      	b.n	8002b6c <HAL_DMA_IRQHandler+0xb0>
 8002b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b64:	e002      	b.n	8002b6c <HAL_DMA_IRQHandler+0xb0>
 8002b66:	2340      	movs	r3, #64	@ 0x40
 8002b68:	e000      	b.n	8002b6c <HAL_DMA_IRQHandler+0xb0>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	4a55      	ldr	r2, [pc, #340]	@ (8002cc4 <HAL_DMA_IRQHandler+0x208>)
 8002b6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8094 	beq.w	8002ca2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b82:	e08e      	b.n	8002ca2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	2202      	movs	r2, #2
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d056      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x186>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d051      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 020a 	bic.w	r2, r2, #10
 8002bba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a38      	ldr	r2, [pc, #224]	@ (8002cac <HAL_DMA_IRQHandler+0x1f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d029      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x166>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a37      	ldr	r2, [pc, #220]	@ (8002cb0 <HAL_DMA_IRQHandler+0x1f4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d022      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x162>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a35      	ldr	r2, [pc, #212]	@ (8002cb4 <HAL_DMA_IRQHandler+0x1f8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x15c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a34      	ldr	r2, [pc, #208]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1fc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d012      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x156>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a32      	ldr	r2, [pc, #200]	@ (8002cbc <HAL_DMA_IRQHandler+0x200>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00a      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x150>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a31      	ldr	r2, [pc, #196]	@ (8002cc0 <HAL_DMA_IRQHandler+0x204>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x14a>
 8002c00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c04:	e00e      	b.n	8002c24 <HAL_DMA_IRQHandler+0x168>
 8002c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c0a:	e00b      	b.n	8002c24 <HAL_DMA_IRQHandler+0x168>
 8002c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c10:	e008      	b.n	8002c24 <HAL_DMA_IRQHandler+0x168>
 8002c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c16:	e005      	b.n	8002c24 <HAL_DMA_IRQHandler+0x168>
 8002c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c1c:	e002      	b.n	8002c24 <HAL_DMA_IRQHandler+0x168>
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e000      	b.n	8002c24 <HAL_DMA_IRQHandler+0x168>
 8002c22:	2302      	movs	r3, #2
 8002c24:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <HAL_DMA_IRQHandler+0x208>)
 8002c26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d034      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c40:	e02f      	b.n	8002ca2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	2208      	movs	r2, #8
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x1e8>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 020e 	bic.w	r2, r2, #14
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d004      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
    }
  }
  return;
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
}
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40020008 	.word	0x40020008
 8002cb0:	4002001c 	.word	0x4002001c
 8002cb4:	40020030 	.word	0x40020030
 8002cb8:	40020044 	.word	0x40020044
 8002cbc:	40020058 	.word	0x40020058
 8002cc0:	4002006c 	.word	0x4002006c
 8002cc4:	40020000 	.word	0x40020000

08002cc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d108      	bne.n	8002d08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d06:	e007      	b.n	8002d18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b08b      	sub	sp, #44	@ 0x2c
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e169      	b.n	800300c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 8158 	bne.w	8003006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a9a      	ldr	r2, [pc, #616]	@ (8002fc4 <HAL_GPIO_Init+0x2a0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d05e      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d60:	4a98      	ldr	r2, [pc, #608]	@ (8002fc4 <HAL_GPIO_Init+0x2a0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d875      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d66:	4a98      	ldr	r2, [pc, #608]	@ (8002fc8 <HAL_GPIO_Init+0x2a4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d058      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d6c:	4a96      	ldr	r2, [pc, #600]	@ (8002fc8 <HAL_GPIO_Init+0x2a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d86f      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d72:	4a96      	ldr	r2, [pc, #600]	@ (8002fcc <HAL_GPIO_Init+0x2a8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d052      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d78:	4a94      	ldr	r2, [pc, #592]	@ (8002fcc <HAL_GPIO_Init+0x2a8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d869      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d7e:	4a94      	ldr	r2, [pc, #592]	@ (8002fd0 <HAL_GPIO_Init+0x2ac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04c      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d84:	4a92      	ldr	r2, [pc, #584]	@ (8002fd0 <HAL_GPIO_Init+0x2ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d863      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d8a:	4a92      	ldr	r2, [pc, #584]	@ (8002fd4 <HAL_GPIO_Init+0x2b0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d046      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d90:	4a90      	ldr	r2, [pc, #576]	@ (8002fd4 <HAL_GPIO_Init+0x2b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d85d      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d96:	2b12      	cmp	r3, #18
 8002d98:	d82a      	bhi.n	8002df0 <HAL_GPIO_Init+0xcc>
 8002d9a:	2b12      	cmp	r3, #18
 8002d9c:	d859      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002da4 <HAL_GPIO_Init+0x80>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002e1f 	.word	0x08002e1f
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002e0b 	.word	0x08002e0b
 8002db0:	08002e4d 	.word	0x08002e4d
 8002db4:	08002e53 	.word	0x08002e53
 8002db8:	08002e53 	.word	0x08002e53
 8002dbc:	08002e53 	.word	0x08002e53
 8002dc0:	08002e53 	.word	0x08002e53
 8002dc4:	08002e53 	.word	0x08002e53
 8002dc8:	08002e53 	.word	0x08002e53
 8002dcc:	08002e53 	.word	0x08002e53
 8002dd0:	08002e53 	.word	0x08002e53
 8002dd4:	08002e53 	.word	0x08002e53
 8002dd8:	08002e53 	.word	0x08002e53
 8002ddc:	08002e53 	.word	0x08002e53
 8002de0:	08002e53 	.word	0x08002e53
 8002de4:	08002e53 	.word	0x08002e53
 8002de8:	08002e01 	.word	0x08002e01
 8002dec:	08002e15 	.word	0x08002e15
 8002df0:	4a79      	ldr	r2, [pc, #484]	@ (8002fd8 <HAL_GPIO_Init+0x2b4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002df6:	e02c      	b.n	8002e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	623b      	str	r3, [r7, #32]
          break;
 8002dfe:	e029      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	3304      	adds	r3, #4
 8002e06:	623b      	str	r3, [r7, #32]
          break;
 8002e08:	e024      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	623b      	str	r3, [r7, #32]
          break;
 8002e12:	e01f      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	623b      	str	r3, [r7, #32]
          break;
 8002e1c:	e01a      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e26:	2304      	movs	r3, #4
 8002e28:	623b      	str	r3, [r7, #32]
          break;
 8002e2a:	e013      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e34:	2308      	movs	r3, #8
 8002e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	611a      	str	r2, [r3, #16]
          break;
 8002e3e:	e009      	b.n	8002e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e40:	2308      	movs	r3, #8
 8002e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	615a      	str	r2, [r3, #20]
          break;
 8002e4a:	e003      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
          break;
 8002e50:	e000      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          break;
 8002e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2bff      	cmp	r3, #255	@ 0xff
 8002e58:	d801      	bhi.n	8002e5e <HAL_GPIO_Init+0x13a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	e001      	b.n	8002e62 <HAL_GPIO_Init+0x13e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2bff      	cmp	r3, #255	@ 0xff
 8002e68:	d802      	bhi.n	8002e70 <HAL_GPIO_Init+0x14c>
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	e002      	b.n	8002e76 <HAL_GPIO_Init+0x152>
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	3b08      	subs	r3, #8
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80b1 	beq.w	8003006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ebc:	4a48      	ldr	r2, [pc, #288]	@ (8002fe0 <HAL_GPIO_Init+0x2bc>)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a40      	ldr	r2, [pc, #256]	@ (8002fe4 <HAL_GPIO_Init+0x2c0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_GPIO_Init+0x1ec>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3f      	ldr	r2, [pc, #252]	@ (8002fe8 <HAL_GPIO_Init+0x2c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00d      	beq.n	8002f0c <HAL_GPIO_Init+0x1e8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fec <HAL_GPIO_Init+0x2c8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <HAL_GPIO_Init+0x1e4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff0 <HAL_GPIO_Init+0x2cc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_GPIO_Init+0x1e0>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e006      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e004      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e002      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f10:	2300      	movs	r3, #0
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	f002 0203 	and.w	r2, r2, #3
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f22:	492f      	ldr	r1, [pc, #188]	@ (8002fe0 <HAL_GPIO_Init+0x2bc>)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	492c      	ldr	r1, [pc, #176]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4928      	ldr	r1, [pc, #160]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f64:	4b23      	ldr	r3, [pc, #140]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4922      	ldr	r1, [pc, #136]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	491e      	ldr	r1, [pc, #120]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4918      	ldr	r1, [pc, #96]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4914      	ldr	r1, [pc, #80]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d021      	beq.n	8002ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	490e      	ldr	r1, [pc, #56]	@ (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e021      	b.n	8003006 <HAL_GPIO_Init+0x2e2>
 8002fc2:	bf00      	nop
 8002fc4:	10320000 	.word	0x10320000
 8002fc8:	10310000 	.word	0x10310000
 8002fcc:	10220000 	.word	0x10220000
 8002fd0:	10210000 	.word	0x10210000
 8002fd4:	10120000 	.word	0x10120000
 8002fd8:	10110000 	.word	0x10110000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_GPIO_Init+0x304>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4909      	ldr	r1, [pc, #36]	@ (8003028 <HAL_GPIO_Init+0x304>)
 8003002:	4013      	ands	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f ae8e 	bne.w	8002d38 <HAL_GPIO_Init+0x14>
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	372c      	adds	r7, #44	@ 0x2c
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e12b      	b.n	8003296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe f97e 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	@ 0x24
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800307e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800308e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003090:	f001 f832 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a81      	ldr	r2, [pc, #516]	@ (80032a0 <HAL_I2C_Init+0x274>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d807      	bhi.n	80030b0 <HAL_I2C_Init+0x84>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a80      	ldr	r2, [pc, #512]	@ (80032a4 <HAL_I2C_Init+0x278>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bf94      	ite	ls
 80030a8:	2301      	movls	r3, #1
 80030aa:	2300      	movhi	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e006      	b.n	80030be <HAL_I2C_Init+0x92>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a7d      	ldr	r2, [pc, #500]	@ (80032a8 <HAL_I2C_Init+0x27c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0e7      	b.n	8003296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a78      	ldr	r2, [pc, #480]	@ (80032ac <HAL_I2C_Init+0x280>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0c9b      	lsrs	r3, r3, #18
 80030d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a6a      	ldr	r2, [pc, #424]	@ (80032a0 <HAL_I2C_Init+0x274>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d802      	bhi.n	8003100 <HAL_I2C_Init+0xd4>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	e009      	b.n	8003114 <HAL_I2C_Init+0xe8>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	4a69      	ldr	r2, [pc, #420]	@ (80032b0 <HAL_I2C_Init+0x284>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	3301      	adds	r3, #1
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003126:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	495c      	ldr	r1, [pc, #368]	@ (80032a0 <HAL_I2C_Init+0x274>)
 8003130:	428b      	cmp	r3, r1
 8003132:	d819      	bhi.n	8003168 <HAL_I2C_Init+0x13c>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003142:	1c59      	adds	r1, r3, #1
 8003144:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003148:	400b      	ands	r3, r1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_I2C_Init+0x138>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e59      	subs	r1, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fbb1 f3f3 	udiv	r3, r1, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003162:	e051      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 8003164:	2304      	movs	r3, #4
 8003166:	e04f      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <HAL_I2C_Init+0x168>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e012      	b.n	80031ba <HAL_I2C_Init+0x18e>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e58      	subs	r0, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	0099      	lsls	r1, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Init+0x196>
 80031be:	2301      	movs	r3, #1
 80031c0:	e022      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <HAL_I2C_Init+0x1bc>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e58      	subs	r0, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	440b      	add	r3, r1
 80031d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031e6:	e00f      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	0099      	lsls	r1, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	6809      	ldr	r1, [r1, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003236:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6911      	ldr	r1, [r2, #16]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68d2      	ldr	r2, [r2, #12]
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	430b      	orrs	r3, r1
 800324a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	000186a0 	.word	0x000186a0
 80032a4:	001e847f 	.word	0x001e847f
 80032a8:	003d08ff 	.word	0x003d08ff
 80032ac:	431bde83 	.word	0x431bde83
 80032b0:	10624dd3 	.word	0x10624dd3

080032b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	461a      	mov	r2, r3
 80032c0:	460b      	mov	r3, r1
 80032c2:	817b      	strh	r3, [r7, #10]
 80032c4:	4613      	mov	r3, r2
 80032c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032c8:	f7fe fe40 	bl	8001f4c <HAL_GetTick>
 80032cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	f040 80e0 	bne.w	800349c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2319      	movs	r3, #25
 80032e2:	2201      	movs	r2, #1
 80032e4:	4970      	ldr	r1, [pc, #448]	@ (80034a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f964 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0d3      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x50>
 8003300:	2302      	movs	r3, #2
 8003302:	e0cc      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d007      	beq.n	800332a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003338:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2221      	movs	r2, #33	@ 0x21
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2210      	movs	r2, #16
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	893a      	ldrh	r2, [r7, #8]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a50      	ldr	r2, [pc, #320]	@ (80034ac <HAL_I2C_Master_Transmit+0x1f8>)
 800336a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800336c:	8979      	ldrh	r1, [r7, #10]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f89c 	bl	80034b0 <I2C_MasterRequestWrite>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e08d      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003398:	e066      	b.n	8003468 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	6a39      	ldr	r1, [r7, #32]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fa22 	bl	80037e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d107      	bne.n	80033c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e06b      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d11b      	bne.n	800343c <HAL_I2C_Master_Transmit+0x188>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d017      	beq.n	800343c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	6a39      	ldr	r1, [r7, #32]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fa19 	bl	8003878 <I2C_WaitOnBTFFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	2b04      	cmp	r3, #4
 8003452:	d107      	bne.n	8003464 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003462:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e01a      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d194      	bne.n	800339a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	00100002 	.word	0x00100002
 80034ac:	ffff0000 	.word	0xffff0000

080034b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	460b      	mov	r3, r1
 80034be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d006      	beq.n	80034da <I2C_MasterRequestWrite+0x2a>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d003      	beq.n	80034da <I2C_MasterRequestWrite+0x2a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034d8:	d108      	bne.n	80034ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00b      	b.n	8003504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	2b12      	cmp	r3, #18
 80034f2:	d107      	bne.n	8003504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f84f 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352a:	d103      	bne.n	8003534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e035      	b.n	80035a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003540:	d108      	bne.n	8003554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003550:	611a      	str	r2, [r3, #16]
 8003552:	e01b      	b.n	800358c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	11db      	asrs	r3, r3, #7
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f063 030f 	orn	r3, r3, #15
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	490e      	ldr	r1, [pc, #56]	@ (80035ac <I2C_MasterRequestWrite+0xfc>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f898 	bl	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e010      	b.n	80035a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4907      	ldr	r1, [pc, #28]	@ (80035b0 <I2C_MasterRequestWrite+0x100>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f888 	bl	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	00010008 	.word	0x00010008
 80035b0:	00010002 	.word	0x00010002

080035b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	e048      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d044      	beq.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe fcbd 	bl	8001f4c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d139      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10d      	bne.n	800360a <I2C_WaitOnFlagUntilTimeout+0x56>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4013      	ands	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	e00c      	b.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x70>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	429a      	cmp	r2, r3
 8003628:	d116      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e023      	b.n	80036a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10d      	bne.n	800367e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	43da      	mvns	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	e00c      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	43da      	mvns	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4013      	ands	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	429a      	cmp	r2, r3
 800369c:	d093      	beq.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b6:	e071      	b.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c6:	d123      	bne.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e067      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d041      	beq.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7fe fc18 	bl	8001f4c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d136      	bne.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10c      	bne.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e00b      	b.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	43da      	mvns	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e021      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10c      	bne.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e00b      	b.n	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f af6d 	bne.w	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f4:	e034      	b.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f886 	bl	8003908 <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e034      	b.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d028      	beq.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fb9d 	bl	8001f4c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382e:	2b80      	cmp	r3, #128	@ 0x80
 8003830:	d016      	beq.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b80      	cmp	r3, #128	@ 0x80
 800386c:	d1c3      	bne.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003884:	e034      	b.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f83e 	bl	8003908 <I2C_IsAcknowledgeFailed>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e034      	b.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d028      	beq.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe fb55 	bl	8001f4c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d11d      	bne.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d016      	beq.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e007      	b.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d1c3      	bne.n	8003886 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391e:	d11b      	bne.n	8003958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e272      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8087 	beq.w	8003a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003984:	4b92      	ldr	r3, [pc, #584]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00c      	beq.n	80039aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003990:	4b8f      	ldr	r3, [pc, #572]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d112      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
 800399c:	4b8c      	ldr	r3, [pc, #560]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a8:	d10b      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039aa:	4b89      	ldr	r3, [pc, #548]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d06c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x12c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d168      	bne.n	8003a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e24c      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x76>
 80039cc:	4b80      	ldr	r3, [pc, #512]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e02e      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x98>
 80039e2:	4b7b      	ldr	r3, [pc, #492]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7a      	ldr	r2, [pc, #488]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b78      	ldr	r3, [pc, #480]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a77      	ldr	r2, [pc, #476]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0xbc>
 8003a06:	4b72      	ldr	r3, [pc, #456]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a71      	ldr	r2, [pc, #452]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 8003a20:	4b6b      	ldr	r3, [pc, #428]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b68      	ldr	r3, [pc, #416]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a67      	ldr	r2, [pc, #412]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fa84 	bl	8001f4c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe fa80 	bl	8001f4c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e200      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe4>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fa70 	bl	8001f4c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe fa6c 	bl	8001f4c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	@ 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1ec      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	4b53      	ldr	r3, [pc, #332]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x10c>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aaa:	4b49      	ldr	r3, [pc, #292]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d11c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
 8003ab6:	4b46      	ldr	r3, [pc, #280]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	4b43      	ldr	r3, [pc, #268]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e1c0      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4939      	ldr	r1, [pc, #228]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	e03a      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b36      	ldr	r3, [pc, #216]	@ (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fa25 	bl	8001f4c <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fe fa21 	bl	8001f4c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1a1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4927      	ldr	r1, [pc, #156]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e015      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b26      	ldr	r3, [pc, #152]	@ (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fa04 	bl	8001f4c <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe fa00 	bl	8001f4c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e180      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d03a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4b17      	ldr	r3, [pc, #92]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe f9e4 	bl	8001f4c <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe f9e0 	bl	8001f4c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e160      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f000 faba 	bl	8004120 <RCC_Delay>
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe f9ca 	bl	8001f4c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bba:	e00f      	b.n	8003bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe f9c6 	bl	8001f4c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d908      	bls.n	8003bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e146      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	42420000 	.word	0x42420000
 8003bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b92      	ldr	r3, [pc, #584]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e9      	bne.n	8003bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a6 	beq.w	8003d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	4b88      	ldr	r3, [pc, #544]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4a87      	ldr	r2, [pc, #540]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	61d3      	str	r3, [r2, #28]
 8003c12:	4b85      	ldr	r3, [pc, #532]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b82      	ldr	r3, [pc, #520]	@ (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7e      	ldr	r2, [pc, #504]	@ (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe f987 	bl	8001f4c <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe f983 	bl	8001f4c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	@ 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e103      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b75      	ldr	r3, [pc, #468]	@ (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x312>
 8003c68:	4b6f      	ldr	r3, [pc, #444]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	e02d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x334>
 8003c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a69      	ldr	r2, [pc, #420]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	4b67      	ldr	r3, [pc, #412]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a66      	ldr	r2, [pc, #408]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6213      	str	r3, [r2, #32]
 8003c96:	e01c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCC_OscConfig+0x356>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a60      	ldr	r2, [pc, #384]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6213      	str	r3, [r2, #32]
 8003cac:	4b5e      	ldr	r3, [pc, #376]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6213      	str	r3, [r2, #32]
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003cba:	4b5b      	ldr	r3, [pc, #364]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a5a      	ldr	r2, [pc, #360]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6213      	str	r3, [r2, #32]
 8003cc6:	4b58      	ldr	r3, [pc, #352]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4a57      	ldr	r2, [pc, #348]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe f937 	bl	8001f4c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe f933 	bl	8001f4c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0b1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ee      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x37e>
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fe f921 	bl	8001f4c <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe f91d 	bl	8001f4c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e09b      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	4b40      	ldr	r3, [pc, #256]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ee      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b3c      	ldr	r3, [pc, #240]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8087 	beq.w	8003e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d4c:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d061      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d146      	bne.n	8003dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe f8f1 	bl	8001f4c <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe f8ed 	bl	8001f4c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e06d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d80:	4b29      	ldr	r3, [pc, #164]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d94:	d108      	bne.n	8003da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d96:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4921      	ldr	r1, [pc, #132]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a19      	ldr	r1, [r3, #32]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	430b      	orrs	r3, r1
 8003dba:	491b      	ldr	r1, [pc, #108]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe f8c1 	bl	8001f4c <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fe f8bd 	bl	8001f4c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e03d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x46a>
 8003dec:	e035      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe f8aa 	bl	8001f4c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe f8a6 	bl	8001f4c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e026      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x498>
 8003e1a:	e01e      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e019      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <HAL_RCC_OscConfig+0x500>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d0      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b67      	ldr	r3, [pc, #412]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4965      	ldr	r1, [pc, #404]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d040      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e073      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b39      	ldr	r3, [pc, #228]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4936      	ldr	r1, [pc, #216]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fff8 	bl	8001f4c <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fd fff4 	bl	8001f4c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e053      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2d      	ldr	r3, [pc, #180]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d210      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4922      	ldr	r1, [pc, #136]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	@ (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <HAL_RCC_ClockConfig+0x1cc>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <HAL_RCC_ClockConfig+0x1d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd ff56 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
 8004030:	080073d8 	.word	0x080073d8
 8004034:	20000000 	.word	0x20000000
 8004038:	20000004 	.word	0x20000004

0800403c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004056:	4b1e      	ldr	r3, [pc, #120]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b04      	cmp	r3, #4
 8004064:	d002      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x30>
 8004066:	2b08      	cmp	r3, #8
 8004068:	d003      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x36>
 800406a:	e027      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800406c:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800406e:	613b      	str	r3, [r7, #16]
      break;
 8004070:	e027      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	4a17      	ldr	r2, [pc, #92]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800408a:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	4a11      	ldr	r2, [pc, #68]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800409e:	fb03 f202 	mul.w	r2, r3, r2
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e004      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	613b      	str	r3, [r7, #16]
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040be:	613b      	str	r3, [r7, #16]
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	693b      	ldr	r3, [r7, #16]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	080073f0 	.word	0x080073f0
 80040dc:	08007400 	.word	0x08007400
 80040e0:	003d0900 	.word	0x003d0900

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b02      	ldr	r3, [pc, #8]	@ (80040f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	20000000 	.word	0x20000000

080040f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040fc:	f7ff fff2 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	@ (800411c <HAL_RCC_GetPCLK1Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	080073e8 	.word	0x080073e8

08004120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004128:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <RCC_Delay+0x34>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0a      	ldr	r2, [pc, #40]	@ (8004158 <RCC_Delay+0x38>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0a5b      	lsrs	r3, r3, #9
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800413c:	bf00      	nop
  }
  while (Delay --);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e5a      	subs	r2, r3, #1
 8004142:	60fa      	str	r2, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f9      	bne.n	800413c <RCC_Delay+0x1c>
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	20000000 	.word	0x20000000
 8004158:	10624dd3 	.word	0x10624dd3

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d07d      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417c:	4b4f      	ldr	r3, [pc, #316]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10d      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4a4b      	ldr	r2, [pc, #300]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004192:	61d3      	str	r3, [r2, #28]
 8004194:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	4b46      	ldr	r3, [pc, #280]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d118      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b0:	4b43      	ldr	r3, [pc, #268]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a42      	ldr	r2, [pc, #264]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041bc:	f7fd fec6 	bl	8001f4c <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c2:	e008      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c4:	f7fd fec2 	bl	8001f4c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	@ 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e06d      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	4b3a      	ldr	r3, [pc, #232]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041e2:	4b36      	ldr	r3, [pc, #216]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d02e      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d027      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004200:	4b2e      	ldr	r3, [pc, #184]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004208:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800420a:	4b2e      	ldr	r3, [pc, #184]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800420c:	2201      	movs	r2, #1
 800420e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004210:	4b2c      	ldr	r3, [pc, #176]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004216:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d014      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7fd fe91 	bl	8001f4c <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422c:	e00a      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fd fe8d 	bl	8001f4c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e036      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ee      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004250:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4917      	ldr	r1, [pc, #92]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	4313      	orrs	r3, r2
 8004260:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004268:	4b14      	ldr	r3, [pc, #80]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	4a13      	ldr	r2, [pc, #76]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004272:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004280:	4b0e      	ldr	r3, [pc, #56]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	490b      	ldr	r1, [pc, #44]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800429e:	4b07      	ldr	r3, [pc, #28]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4904      	ldr	r1, [pc, #16]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40007000 	.word	0x40007000
 80042c4:	42420440 	.word	0x42420440

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e041      	b.n	800435e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fd8a 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fa5c 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e03a      	b.n	80043f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_TIM_Base_Start_IT+0x98>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00e      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x58>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043aa:	d009      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x58>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <HAL_TIM_Base_Start_IT+0x9c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x58>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a13      	ldr	r2, [pc, #76]	@ (8004408 <HAL_TIM_Base_Start_IT+0xa0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d010      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	e007      	b.n	80043f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800

0800440c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d020      	beq.n	8004470 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0202 	mvn.w	r2, #2
 8004440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f998 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f98b 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f99a 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d020      	beq.n	80044bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01b      	beq.n	80044bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0204 	mvn.w	r2, #4
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f972 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f965 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f974 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d020      	beq.n	8004508 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01b      	beq.n	8004508 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0208 	mvn.w	r2, #8
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2204      	movs	r2, #4
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f94c 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f93f 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f94e 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	d020      	beq.n	8004554 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01b      	beq.n	8004554 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0210 	mvn.w	r2, #16
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2208      	movs	r2, #8
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f926 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f919 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f928 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0201 	mvn.w	r2, #1
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd f88e 	bl	8001694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa7f 	bl	8004a9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8f8 	bl	80047b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0220 	mvn.w	r2, #32
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa52 	bl	8004a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x1c>
 8004604:	2302      	movs	r3, #2
 8004606:	e0b4      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x186>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800462e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004640:	d03e      	beq.n	80046c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004646:	f200 8087 	bhi.w	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464e:	f000 8086 	beq.w	800475e <HAL_TIM_ConfigClockSource+0x172>
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004656:	d87f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b70      	cmp	r3, #112	@ 0x70
 800465a:	d01a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0xa6>
 800465c:	2b70      	cmp	r3, #112	@ 0x70
 800465e:	d87b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b60      	cmp	r3, #96	@ 0x60
 8004662:	d050      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x11a>
 8004664:	2b60      	cmp	r3, #96	@ 0x60
 8004666:	d877      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b50      	cmp	r3, #80	@ 0x50
 800466a:	d03c      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xfa>
 800466c:	2b50      	cmp	r3, #80	@ 0x50
 800466e:	d873      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d058      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x13a>
 8004674:	2b40      	cmp	r3, #64	@ 0x40
 8004676:	d86f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b30      	cmp	r3, #48	@ 0x30
 800467a:	d064      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 800467c:	2b30      	cmp	r3, #48	@ 0x30
 800467e:	d86b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d060      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d867      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d05c      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d05a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	e062      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	f000 f974 	bl	800498e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	609a      	str	r2, [r3, #8]
      break;
 80046be:	e04f      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	f000 f95d 	bl	800498e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046e2:	609a      	str	r2, [r3, #8]
      break;
 80046e4:	e03c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	461a      	mov	r2, r3
 80046f4:	f000 f8d4 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2150      	movs	r1, #80	@ 0x50
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f92b 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004704:	e02c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004712:	461a      	mov	r2, r3
 8004714:	f000 f8f2 	bl	80048fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2160      	movs	r1, #96	@ 0x60
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f91b 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004724:	e01c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	461a      	mov	r2, r3
 8004734:	f000 f8b4 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2140      	movs	r1, #64	@ 0x40
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f90b 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004744:	e00c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 f902 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004756:	e003      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      break;
 800475c:	e000      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800475e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
	...

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004894 <TIM_Base_SetConfig+0xd0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00b      	beq.n	80047f4 <TIM_Base_SetConfig+0x30>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e2:	d007      	beq.n	80047f4 <TIM_Base_SetConfig+0x30>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004898 <TIM_Base_SetConfig+0xd4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_Base_SetConfig+0x30>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <TIM_Base_SetConfig+0xd8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d108      	bne.n	8004806 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a22      	ldr	r2, [pc, #136]	@ (8004894 <TIM_Base_SetConfig+0xd0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_Base_SetConfig+0x62>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004814:	d007      	beq.n	8004826 <TIM_Base_SetConfig+0x62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1f      	ldr	r2, [pc, #124]	@ (8004898 <TIM_Base_SetConfig+0xd4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1e      	ldr	r2, [pc, #120]	@ (800489c <TIM_Base_SetConfig+0xd8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0d      	ldr	r2, [pc, #52]	@ (8004894 <TIM_Base_SetConfig+0xd0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]
  }
}
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800

080048a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 030a 	bic.w	r3, r3, #10
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	031b      	lsls	r3, r3, #12
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004938:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	621a      	str	r2, [r3, #32]
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	f043 0307 	orr.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	021a      	lsls	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	609a      	str	r2, [r3, #8]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e046      	b.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d009      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a12      	ldr	r2, [pc, #72]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a10      	ldr	r2, [pc, #64]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d10c      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800

08004a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <__cvt>:
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab2:	461d      	mov	r5, r3
 8004ab4:	bfbb      	ittet	lt
 8004ab6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004aba:	461d      	movlt	r5, r3
 8004abc:	2300      	movge	r3, #0
 8004abe:	232d      	movlt	r3, #45	@ 0x2d
 8004ac0:	b088      	sub	sp, #32
 8004ac2:	4614      	mov	r4, r2
 8004ac4:	bfb8      	it	lt
 8004ac6:	4614      	movlt	r4, r2
 8004ac8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004aca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004acc:	7013      	strb	r3, [r2, #0]
 8004ace:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ad0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004ad4:	f023 0820 	bic.w	r8, r3, #32
 8004ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004adc:	d005      	beq.n	8004aea <__cvt+0x3e>
 8004ade:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ae2:	d100      	bne.n	8004ae6 <__cvt+0x3a>
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e000      	b.n	8004aec <__cvt+0x40>
 8004aea:	2303      	movs	r3, #3
 8004aec:	aa07      	add	r2, sp, #28
 8004aee:	9204      	str	r2, [sp, #16]
 8004af0:	aa06      	add	r2, sp, #24
 8004af2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004af6:	e9cd 3600 	strd	r3, r6, [sp]
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	f000 fe5b 	bl	80057b8 <_dtoa_r>
 8004b02:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b06:	4607      	mov	r7, r0
 8004b08:	d119      	bne.n	8004b3e <__cvt+0x92>
 8004b0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b0c:	07db      	lsls	r3, r3, #31
 8004b0e:	d50e      	bpl.n	8004b2e <__cvt+0x82>
 8004b10:	eb00 0906 	add.w	r9, r0, r6
 8004b14:	2200      	movs	r2, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fb ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8004b20:	b108      	cbz	r0, 8004b26 <__cvt+0x7a>
 8004b22:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b26:	2230      	movs	r2, #48	@ 0x30
 8004b28:	9b07      	ldr	r3, [sp, #28]
 8004b2a:	454b      	cmp	r3, r9
 8004b2c:	d31e      	bcc.n	8004b6c <__cvt+0xc0>
 8004b2e:	4638      	mov	r0, r7
 8004b30:	9b07      	ldr	r3, [sp, #28]
 8004b32:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004b34:	1bdb      	subs	r3, r3, r7
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	b008      	add	sp, #32
 8004b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b42:	eb00 0906 	add.w	r9, r0, r6
 8004b46:	d1e5      	bne.n	8004b14 <__cvt+0x68>
 8004b48:	7803      	ldrb	r3, [r0, #0]
 8004b4a:	2b30      	cmp	r3, #48	@ 0x30
 8004b4c:	d10a      	bne.n	8004b64 <__cvt+0xb8>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2300      	movs	r3, #0
 8004b52:	4620      	mov	r0, r4
 8004b54:	4629      	mov	r1, r5
 8004b56:	f7fb ff27 	bl	80009a8 <__aeabi_dcmpeq>
 8004b5a:	b918      	cbnz	r0, 8004b64 <__cvt+0xb8>
 8004b5c:	f1c6 0601 	rsb	r6, r6, #1
 8004b60:	f8ca 6000 	str.w	r6, [sl]
 8004b64:	f8da 3000 	ldr.w	r3, [sl]
 8004b68:	4499      	add	r9, r3
 8004b6a:	e7d3      	b.n	8004b14 <__cvt+0x68>
 8004b6c:	1c59      	adds	r1, r3, #1
 8004b6e:	9107      	str	r1, [sp, #28]
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e7d9      	b.n	8004b28 <__cvt+0x7c>

08004b74 <__exponent>:
 8004b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b76:	2900      	cmp	r1, #0
 8004b78:	bfb6      	itet	lt
 8004b7a:	232d      	movlt	r3, #45	@ 0x2d
 8004b7c:	232b      	movge	r3, #43	@ 0x2b
 8004b7e:	4249      	neglt	r1, r1
 8004b80:	2909      	cmp	r1, #9
 8004b82:	7002      	strb	r2, [r0, #0]
 8004b84:	7043      	strb	r3, [r0, #1]
 8004b86:	dd29      	ble.n	8004bdc <__exponent+0x68>
 8004b88:	f10d 0307 	add.w	r3, sp, #7
 8004b8c:	461d      	mov	r5, r3
 8004b8e:	270a      	movs	r7, #10
 8004b90:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b94:	461a      	mov	r2, r3
 8004b96:	fb07 1416 	mls	r4, r7, r6, r1
 8004b9a:	3430      	adds	r4, #48	@ 0x30
 8004b9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	2c63      	cmp	r4, #99	@ 0x63
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004baa:	dcf1      	bgt.n	8004b90 <__exponent+0x1c>
 8004bac:	3130      	adds	r1, #48	@ 0x30
 8004bae:	1e94      	subs	r4, r2, #2
 8004bb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	1c41      	adds	r1, r0, #1
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	d30a      	bcc.n	8004bd2 <__exponent+0x5e>
 8004bbc:	f10d 0309 	add.w	r3, sp, #9
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	42ac      	cmp	r4, r5
 8004bc4:	bf88      	it	hi
 8004bc6:	2300      	movhi	r3, #0
 8004bc8:	3302      	adds	r3, #2
 8004bca:	4403      	add	r3, r0
 8004bcc:	1a18      	subs	r0, r3, r0
 8004bce:	b003      	add	sp, #12
 8004bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004bd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bda:	e7ed      	b.n	8004bb8 <__exponent+0x44>
 8004bdc:	2330      	movs	r3, #48	@ 0x30
 8004bde:	3130      	adds	r1, #48	@ 0x30
 8004be0:	7083      	strb	r3, [r0, #2]
 8004be2:	70c1      	strb	r1, [r0, #3]
 8004be4:	1d03      	adds	r3, r0, #4
 8004be6:	e7f1      	b.n	8004bcc <__exponent+0x58>

08004be8 <_printf_float>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	b091      	sub	sp, #68	@ 0x44
 8004bee:	460c      	mov	r4, r1
 8004bf0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	461f      	mov	r7, r3
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	f000 fcc1 	bl	8005580 <_localeconv_r>
 8004bfe:	6803      	ldr	r3, [r0, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	9308      	str	r3, [sp, #32]
 8004c04:	f7fb faa4 	bl	8000150 <strlen>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c10:	9009      	str	r0, [sp, #36]	@ 0x24
 8004c12:	3307      	adds	r3, #7
 8004c14:	f023 0307 	bic.w	r3, r3, #7
 8004c18:	f103 0208 	add.w	r2, r3, #8
 8004c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c20:	f8d4 b000 	ldr.w	fp, [r4]
 8004c24:	f8c8 2000 	str.w	r2, [r8]
 8004c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c32:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c42:	4b9c      	ldr	r3, [pc, #624]	@ (8004eb4 <_printf_float+0x2cc>)
 8004c44:	f7fb fee2 	bl	8000a0c <__aeabi_dcmpun>
 8004c48:	bb70      	cbnz	r0, 8004ca8 <_printf_float+0xc0>
 8004c4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c52:	4b98      	ldr	r3, [pc, #608]	@ (8004eb4 <_printf_float+0x2cc>)
 8004c54:	f7fb febc 	bl	80009d0 <__aeabi_dcmple>
 8004c58:	bb30      	cbnz	r0, 8004ca8 <_printf_float+0xc0>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4640      	mov	r0, r8
 8004c60:	4649      	mov	r1, r9
 8004c62:	f7fb feab 	bl	80009bc <__aeabi_dcmplt>
 8004c66:	b110      	cbz	r0, 8004c6e <_printf_float+0x86>
 8004c68:	232d      	movs	r3, #45	@ 0x2d
 8004c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c6e:	4a92      	ldr	r2, [pc, #584]	@ (8004eb8 <_printf_float+0x2d0>)
 8004c70:	4b92      	ldr	r3, [pc, #584]	@ (8004ebc <_printf_float+0x2d4>)
 8004c72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c76:	bf94      	ite	ls
 8004c78:	4690      	movls	r8, r2
 8004c7a:	4698      	movhi	r8, r3
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	f04f 0900 	mov.w	r9, #0
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	f02b 0304 	bic.w	r3, fp, #4
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	4633      	mov	r3, r6
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4628      	mov	r0, r5
 8004c90:	9700      	str	r7, [sp, #0]
 8004c92:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004c94:	f000 f9d4 	bl	8005040 <_printf_common>
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f040 8090 	bne.w	8004dbe <_printf_float+0x1d6>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca2:	b011      	add	sp, #68	@ 0x44
 8004ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	4640      	mov	r0, r8
 8004cae:	4649      	mov	r1, r9
 8004cb0:	f7fb feac 	bl	8000a0c <__aeabi_dcmpun>
 8004cb4:	b148      	cbz	r0, 8004cca <_printf_float+0xe2>
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bfb8      	it	lt
 8004cbc:	232d      	movlt	r3, #45	@ 0x2d
 8004cbe:	4a80      	ldr	r2, [pc, #512]	@ (8004ec0 <_printf_float+0x2d8>)
 8004cc0:	bfb8      	it	lt
 8004cc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec4 <_printf_float+0x2dc>)
 8004cc8:	e7d3      	b.n	8004c72 <_printf_float+0x8a>
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	d13f      	bne.n	8004d54 <_printf_float+0x16c>
 8004cd4:	2306      	movs	r3, #6
 8004cd6:	6063      	str	r3, [r4, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	9206      	str	r2, [sp, #24]
 8004ce2:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ce4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ce8:	aa0d      	add	r2, sp, #52	@ 0x34
 8004cea:	9203      	str	r2, [sp, #12]
 8004cec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004cf0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d00:	f7ff fed4 	bl	8004aac <__cvt>
 8004d04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d06:	4680      	mov	r8, r0
 8004d08:	2947      	cmp	r1, #71	@ 0x47
 8004d0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004d0c:	d128      	bne.n	8004d60 <_printf_float+0x178>
 8004d0e:	1cc8      	adds	r0, r1, #3
 8004d10:	db02      	blt.n	8004d18 <_printf_float+0x130>
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	4299      	cmp	r1, r3
 8004d16:	dd40      	ble.n	8004d9a <_printf_float+0x1b2>
 8004d18:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d1c:	fa5f fa8a 	uxtb.w	sl, sl
 8004d20:	4652      	mov	r2, sl
 8004d22:	3901      	subs	r1, #1
 8004d24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d28:	910d      	str	r1, [sp, #52]	@ 0x34
 8004d2a:	f7ff ff23 	bl	8004b74 <__exponent>
 8004d2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d30:	4681      	mov	r9, r0
 8004d32:	1813      	adds	r3, r2, r0
 8004d34:	2a01      	cmp	r2, #1
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	dc02      	bgt.n	8004d40 <_printf_float+0x158>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	07d2      	lsls	r2, r2, #31
 8004d3e:	d501      	bpl.n	8004d44 <_printf_float+0x15c>
 8004d40:	3301      	adds	r3, #1
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d09e      	beq.n	8004c8a <_printf_float+0xa2>
 8004d4c:	232d      	movs	r3, #45	@ 0x2d
 8004d4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d52:	e79a      	b.n	8004c8a <_printf_float+0xa2>
 8004d54:	2947      	cmp	r1, #71	@ 0x47
 8004d56:	d1bf      	bne.n	8004cd8 <_printf_float+0xf0>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1bd      	bne.n	8004cd8 <_printf_float+0xf0>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e7ba      	b.n	8004cd6 <_printf_float+0xee>
 8004d60:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d64:	d9dc      	bls.n	8004d20 <_printf_float+0x138>
 8004d66:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d6a:	d118      	bne.n	8004d9e <_printf_float+0x1b6>
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	dd0b      	ble.n	8004d8a <_printf_float+0x1a2>
 8004d72:	6121      	str	r1, [r4, #16]
 8004d74:	b913      	cbnz	r3, 8004d7c <_printf_float+0x194>
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	07d0      	lsls	r0, r2, #31
 8004d7a:	d502      	bpl.n	8004d82 <_printf_float+0x19a>
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	440b      	add	r3, r1
 8004d80:	6123      	str	r3, [r4, #16]
 8004d82:	f04f 0900 	mov.w	r9, #0
 8004d86:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d88:	e7dc      	b.n	8004d44 <_printf_float+0x15c>
 8004d8a:	b913      	cbnz	r3, 8004d92 <_printf_float+0x1aa>
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	07d2      	lsls	r2, r2, #31
 8004d90:	d501      	bpl.n	8004d96 <_printf_float+0x1ae>
 8004d92:	3302      	adds	r3, #2
 8004d94:	e7f4      	b.n	8004d80 <_printf_float+0x198>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e7f2      	b.n	8004d80 <_printf_float+0x198>
 8004d9a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004da0:	4299      	cmp	r1, r3
 8004da2:	db05      	blt.n	8004db0 <_printf_float+0x1c8>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	6121      	str	r1, [r4, #16]
 8004da8:	07d8      	lsls	r0, r3, #31
 8004daa:	d5ea      	bpl.n	8004d82 <_printf_float+0x19a>
 8004dac:	1c4b      	adds	r3, r1, #1
 8004dae:	e7e7      	b.n	8004d80 <_printf_float+0x198>
 8004db0:	2900      	cmp	r1, #0
 8004db2:	bfcc      	ite	gt
 8004db4:	2201      	movgt	r2, #1
 8004db6:	f1c1 0202 	rsble	r2, r1, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	e7e0      	b.n	8004d80 <_printf_float+0x198>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	055a      	lsls	r2, r3, #21
 8004dc2:	d407      	bmi.n	8004dd4 <_printf_float+0x1ec>
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d12b      	bne.n	8004e2a <_printf_float+0x242>
 8004dd2:	e764      	b.n	8004c9e <_printf_float+0xb6>
 8004dd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dd8:	f240 80dc 	bls.w	8004f94 <_printf_float+0x3ac>
 8004ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004de0:	2200      	movs	r2, #0
 8004de2:	2300      	movs	r3, #0
 8004de4:	f7fb fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d033      	beq.n	8004e54 <_printf_float+0x26c>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	4a35      	ldr	r2, [pc, #212]	@ (8004ec8 <_printf_float+0x2e0>)
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	f43f af51 	beq.w	8004c9e <_printf_float+0xb6>
 8004dfc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004e00:	4543      	cmp	r3, r8
 8004e02:	db02      	blt.n	8004e0a <_printf_float+0x222>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	07d8      	lsls	r0, r3, #31
 8004e08:	d50f      	bpl.n	8004e2a <_printf_float+0x242>
 8004e0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f af42 	beq.w	8004c9e <_printf_float+0xb6>
 8004e1a:	f04f 0900 	mov.w	r9, #0
 8004e1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e22:	f104 0a1a 	add.w	sl, r4, #26
 8004e26:	45c8      	cmp	r8, r9
 8004e28:	dc09      	bgt.n	8004e3e <_printf_float+0x256>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	079b      	lsls	r3, r3, #30
 8004e2e:	f100 8102 	bmi.w	8005036 <_printf_float+0x44e>
 8004e32:	68e0      	ldr	r0, [r4, #12]
 8004e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e36:	4298      	cmp	r0, r3
 8004e38:	bfb8      	it	lt
 8004e3a:	4618      	movlt	r0, r3
 8004e3c:	e731      	b.n	8004ca2 <_printf_float+0xba>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f af28 	beq.w	8004c9e <_printf_float+0xb6>
 8004e4e:	f109 0901 	add.w	r9, r9, #1
 8004e52:	e7e8      	b.n	8004e26 <_printf_float+0x23e>
 8004e54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dc38      	bgt.n	8004ecc <_printf_float+0x2e4>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <_printf_float+0x2e0>)
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f af1a 	beq.w	8004c9e <_printf_float+0xb6>
 8004e6a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004e6e:	ea59 0303 	orrs.w	r3, r9, r3
 8004e72:	d102      	bne.n	8004e7a <_printf_float+0x292>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	07d9      	lsls	r1, r3, #31
 8004e78:	d5d7      	bpl.n	8004e2a <_printf_float+0x242>
 8004e7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f af0a 	beq.w	8004c9e <_printf_float+0xb6>
 8004e8a:	f04f 0a00 	mov.w	sl, #0
 8004e8e:	f104 0b1a 	add.w	fp, r4, #26
 8004e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e94:	425b      	negs	r3, r3
 8004e96:	4553      	cmp	r3, sl
 8004e98:	dc01      	bgt.n	8004e9e <_printf_float+0x2b6>
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	e793      	b.n	8004dc6 <_printf_float+0x1de>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	465a      	mov	r2, fp
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f aef8 	beq.w	8004c9e <_printf_float+0xb6>
 8004eae:	f10a 0a01 	add.w	sl, sl, #1
 8004eb2:	e7ee      	b.n	8004e92 <_printf_float+0x2aa>
 8004eb4:	7fefffff 	.word	0x7fefffff
 8004eb8:	08007402 	.word	0x08007402
 8004ebc:	08007406 	.word	0x08007406
 8004ec0:	0800740a 	.word	0x0800740a
 8004ec4:	0800740e 	.word	0x0800740e
 8004ec8:	08007412 	.word	0x08007412
 8004ecc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ece:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ed2:	4553      	cmp	r3, sl
 8004ed4:	bfa8      	it	ge
 8004ed6:	4653      	movge	r3, sl
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	4699      	mov	r9, r3
 8004edc:	dc36      	bgt.n	8004f4c <_printf_float+0x364>
 8004ede:	f04f 0b00 	mov.w	fp, #0
 8004ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ee6:	f104 021a 	add.w	r2, r4, #26
 8004eea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004eec:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eee:	eba3 0309 	sub.w	r3, r3, r9
 8004ef2:	455b      	cmp	r3, fp
 8004ef4:	dc31      	bgt.n	8004f5a <_printf_float+0x372>
 8004ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ef8:	459a      	cmp	sl, r3
 8004efa:	dc3a      	bgt.n	8004f72 <_printf_float+0x38a>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	07da      	lsls	r2, r3, #31
 8004f00:	d437      	bmi.n	8004f72 <_printf_float+0x38a>
 8004f02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f04:	ebaa 0903 	sub.w	r9, sl, r3
 8004f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f0a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f0e:	4599      	cmp	r9, r3
 8004f10:	bfa8      	it	ge
 8004f12:	4699      	movge	r9, r3
 8004f14:	f1b9 0f00 	cmp.w	r9, #0
 8004f18:	dc33      	bgt.n	8004f82 <_printf_float+0x39a>
 8004f1a:	f04f 0800 	mov.w	r8, #0
 8004f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f22:	f104 0b1a 	add.w	fp, r4, #26
 8004f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f28:	ebaa 0303 	sub.w	r3, sl, r3
 8004f2c:	eba3 0309 	sub.w	r3, r3, r9
 8004f30:	4543      	cmp	r3, r8
 8004f32:	f77f af7a 	ble.w	8004e2a <_printf_float+0x242>
 8004f36:	2301      	movs	r3, #1
 8004f38:	465a      	mov	r2, fp
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f aeac 	beq.w	8004c9e <_printf_float+0xb6>
 8004f46:	f108 0801 	add.w	r8, r8, #1
 8004f4a:	e7ec      	b.n	8004f26 <_printf_float+0x33e>
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4628      	mov	r0, r5
 8004f52:	47b8      	blx	r7
 8004f54:	3001      	adds	r0, #1
 8004f56:	d1c2      	bne.n	8004ede <_printf_float+0x2f6>
 8004f58:	e6a1      	b.n	8004c9e <_printf_float+0xb6>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4628      	mov	r0, r5
 8004f60:	920a      	str	r2, [sp, #40]	@ 0x28
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f ae9a 	beq.w	8004c9e <_printf_float+0xb6>
 8004f6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f6c:	f10b 0b01 	add.w	fp, fp, #1
 8004f70:	e7bb      	b.n	8004eea <_printf_float+0x302>
 8004f72:	4631      	mov	r1, r6
 8004f74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b8      	blx	r7
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d1c0      	bne.n	8004f02 <_printf_float+0x31a>
 8004f80:	e68d      	b.n	8004c9e <_printf_float+0xb6>
 8004f82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f84:	464b      	mov	r3, r9
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	4442      	add	r2, r8
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d1c3      	bne.n	8004f1a <_printf_float+0x332>
 8004f92:	e684      	b.n	8004c9e <_printf_float+0xb6>
 8004f94:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f98:	f1ba 0f01 	cmp.w	sl, #1
 8004f9c:	dc01      	bgt.n	8004fa2 <_printf_float+0x3ba>
 8004f9e:	07db      	lsls	r3, r3, #31
 8004fa0:	d536      	bpl.n	8005010 <_printf_float+0x428>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b8      	blx	r7
 8004fac:	3001      	adds	r0, #1
 8004fae:	f43f ae76 	beq.w	8004c9e <_printf_float+0xb6>
 8004fb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f43f ae6e 	beq.w	8004c9e <_printf_float+0xb6>
 8004fc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fce:	f7fb fceb 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd2:	b9c0      	cbnz	r0, 8005006 <_printf_float+0x41e>
 8004fd4:	4653      	mov	r3, sl
 8004fd6:	f108 0201 	add.w	r2, r8, #1
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d10c      	bne.n	8004ffe <_printf_float+0x416>
 8004fe4:	e65b      	b.n	8004c9e <_printf_float+0xb6>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	465a      	mov	r2, fp
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f43f ae54 	beq.w	8004c9e <_printf_float+0xb6>
 8004ff6:	f108 0801 	add.w	r8, r8, #1
 8004ffa:	45d0      	cmp	r8, sl
 8004ffc:	dbf3      	blt.n	8004fe6 <_printf_float+0x3fe>
 8004ffe:	464b      	mov	r3, r9
 8005000:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005004:	e6e0      	b.n	8004dc8 <_printf_float+0x1e0>
 8005006:	f04f 0800 	mov.w	r8, #0
 800500a:	f104 0b1a 	add.w	fp, r4, #26
 800500e:	e7f4      	b.n	8004ffa <_printf_float+0x412>
 8005010:	2301      	movs	r3, #1
 8005012:	4642      	mov	r2, r8
 8005014:	e7e1      	b.n	8004fda <_printf_float+0x3f2>
 8005016:	2301      	movs	r3, #1
 8005018:	464a      	mov	r2, r9
 800501a:	4631      	mov	r1, r6
 800501c:	4628      	mov	r0, r5
 800501e:	47b8      	blx	r7
 8005020:	3001      	adds	r0, #1
 8005022:	f43f ae3c 	beq.w	8004c9e <_printf_float+0xb6>
 8005026:	f108 0801 	add.w	r8, r8, #1
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800502e:	1a5b      	subs	r3, r3, r1
 8005030:	4543      	cmp	r3, r8
 8005032:	dcf0      	bgt.n	8005016 <_printf_float+0x42e>
 8005034:	e6fd      	b.n	8004e32 <_printf_float+0x24a>
 8005036:	f04f 0800 	mov.w	r8, #0
 800503a:	f104 0919 	add.w	r9, r4, #25
 800503e:	e7f4      	b.n	800502a <_printf_float+0x442>

08005040 <_printf_common>:
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	4616      	mov	r6, r2
 8005046:	4698      	mov	r8, r3
 8005048:	688a      	ldr	r2, [r1, #8]
 800504a:	690b      	ldr	r3, [r1, #16]
 800504c:	4607      	mov	r7, r0
 800504e:	4293      	cmp	r3, r2
 8005050:	bfb8      	it	lt
 8005052:	4613      	movlt	r3, r2
 8005054:	6033      	str	r3, [r6, #0]
 8005056:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800505a:	460c      	mov	r4, r1
 800505c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005060:	b10a      	cbz	r2, 8005066 <_printf_common+0x26>
 8005062:	3301      	adds	r3, #1
 8005064:	6033      	str	r3, [r6, #0]
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	0699      	lsls	r1, r3, #26
 800506a:	bf42      	ittt	mi
 800506c:	6833      	ldrmi	r3, [r6, #0]
 800506e:	3302      	addmi	r3, #2
 8005070:	6033      	strmi	r3, [r6, #0]
 8005072:	6825      	ldr	r5, [r4, #0]
 8005074:	f015 0506 	ands.w	r5, r5, #6
 8005078:	d106      	bne.n	8005088 <_printf_common+0x48>
 800507a:	f104 0a19 	add.w	sl, r4, #25
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	6832      	ldr	r2, [r6, #0]
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	42ab      	cmp	r3, r5
 8005086:	dc2b      	bgt.n	80050e0 <_printf_common+0xa0>
 8005088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	3b00      	subs	r3, #0
 8005090:	bf18      	it	ne
 8005092:	2301      	movne	r3, #1
 8005094:	0692      	lsls	r2, r2, #26
 8005096:	d430      	bmi.n	80050fa <_printf_common+0xba>
 8005098:	4641      	mov	r1, r8
 800509a:	4638      	mov	r0, r7
 800509c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050a0:	47c8      	blx	r9
 80050a2:	3001      	adds	r0, #1
 80050a4:	d023      	beq.n	80050ee <_printf_common+0xae>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	6922      	ldr	r2, [r4, #16]
 80050aa:	f003 0306 	and.w	r3, r3, #6
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	bf14      	ite	ne
 80050b2:	2500      	movne	r5, #0
 80050b4:	6833      	ldreq	r3, [r6, #0]
 80050b6:	f04f 0600 	mov.w	r6, #0
 80050ba:	bf08      	it	eq
 80050bc:	68e5      	ldreq	r5, [r4, #12]
 80050be:	f104 041a 	add.w	r4, r4, #26
 80050c2:	bf08      	it	eq
 80050c4:	1aed      	subeq	r5, r5, r3
 80050c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050ca:	bf08      	it	eq
 80050cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d0:	4293      	cmp	r3, r2
 80050d2:	bfc4      	itt	gt
 80050d4:	1a9b      	subgt	r3, r3, r2
 80050d6:	18ed      	addgt	r5, r5, r3
 80050d8:	42b5      	cmp	r5, r6
 80050da:	d11a      	bne.n	8005112 <_printf_common+0xd2>
 80050dc:	2000      	movs	r0, #0
 80050de:	e008      	b.n	80050f2 <_printf_common+0xb2>
 80050e0:	2301      	movs	r3, #1
 80050e2:	4652      	mov	r2, sl
 80050e4:	4641      	mov	r1, r8
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c8      	blx	r9
 80050ea:	3001      	adds	r0, #1
 80050ec:	d103      	bne.n	80050f6 <_printf_common+0xb6>
 80050ee:	f04f 30ff 	mov.w	r0, #4294967295
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	3501      	adds	r5, #1
 80050f8:	e7c1      	b.n	800507e <_printf_common+0x3e>
 80050fa:	2030      	movs	r0, #48	@ 0x30
 80050fc:	18e1      	adds	r1, r4, r3
 80050fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005108:	4422      	add	r2, r4
 800510a:	3302      	adds	r3, #2
 800510c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005110:	e7c2      	b.n	8005098 <_printf_common+0x58>
 8005112:	2301      	movs	r3, #1
 8005114:	4622      	mov	r2, r4
 8005116:	4641      	mov	r1, r8
 8005118:	4638      	mov	r0, r7
 800511a:	47c8      	blx	r9
 800511c:	3001      	adds	r0, #1
 800511e:	d0e6      	beq.n	80050ee <_printf_common+0xae>
 8005120:	3601      	adds	r6, #1
 8005122:	e7d9      	b.n	80050d8 <_printf_common+0x98>

08005124 <_printf_i>:
 8005124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	7e0f      	ldrb	r7, [r1, #24]
 800512a:	4691      	mov	r9, r2
 800512c:	2f78      	cmp	r7, #120	@ 0x78
 800512e:	4680      	mov	r8, r0
 8005130:	460c      	mov	r4, r1
 8005132:	469a      	mov	sl, r3
 8005134:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800513a:	d807      	bhi.n	800514c <_printf_i+0x28>
 800513c:	2f62      	cmp	r7, #98	@ 0x62
 800513e:	d80a      	bhi.n	8005156 <_printf_i+0x32>
 8005140:	2f00      	cmp	r7, #0
 8005142:	f000 80d3 	beq.w	80052ec <_printf_i+0x1c8>
 8005146:	2f58      	cmp	r7, #88	@ 0x58
 8005148:	f000 80ba 	beq.w	80052c0 <_printf_i+0x19c>
 800514c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005154:	e03a      	b.n	80051cc <_printf_i+0xa8>
 8005156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800515a:	2b15      	cmp	r3, #21
 800515c:	d8f6      	bhi.n	800514c <_printf_i+0x28>
 800515e:	a101      	add	r1, pc, #4	@ (adr r1, 8005164 <_printf_i+0x40>)
 8005160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051d1 	.word	0x080051d1
 800516c:	0800514d 	.word	0x0800514d
 8005170:	0800514d 	.word	0x0800514d
 8005174:	0800514d 	.word	0x0800514d
 8005178:	0800514d 	.word	0x0800514d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800514d 	.word	0x0800514d
 8005184:	0800514d 	.word	0x0800514d
 8005188:	0800514d 	.word	0x0800514d
 800518c:	0800514d 	.word	0x0800514d
 8005190:	080052d3 	.word	0x080052d3
 8005194:	080051fb 	.word	0x080051fb
 8005198:	0800528d 	.word	0x0800528d
 800519c:	0800514d 	.word	0x0800514d
 80051a0:	0800514d 	.word	0x0800514d
 80051a4:	080052f5 	.word	0x080052f5
 80051a8:	0800514d 	.word	0x0800514d
 80051ac:	080051fb 	.word	0x080051fb
 80051b0:	0800514d 	.word	0x0800514d
 80051b4:	0800514d 	.word	0x0800514d
 80051b8:	08005295 	.word	0x08005295
 80051bc:	6833      	ldr	r3, [r6, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6032      	str	r2, [r6, #0]
 80051c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051cc:	2301      	movs	r3, #1
 80051ce:	e09e      	b.n	800530e <_printf_i+0x1ea>
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	6820      	ldr	r0, [r4, #0]
 80051d4:	1d19      	adds	r1, r3, #4
 80051d6:	6031      	str	r1, [r6, #0]
 80051d8:	0606      	lsls	r6, r0, #24
 80051da:	d501      	bpl.n	80051e0 <_printf_i+0xbc>
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	e003      	b.n	80051e8 <_printf_i+0xc4>
 80051e0:	0645      	lsls	r5, r0, #25
 80051e2:	d5fb      	bpl.n	80051dc <_printf_i+0xb8>
 80051e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	da03      	bge.n	80051f4 <_printf_i+0xd0>
 80051ec:	232d      	movs	r3, #45	@ 0x2d
 80051ee:	426d      	negs	r5, r5
 80051f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f4:	230a      	movs	r3, #10
 80051f6:	4859      	ldr	r0, [pc, #356]	@ (800535c <_printf_i+0x238>)
 80051f8:	e011      	b.n	800521e <_printf_i+0xfa>
 80051fa:	6821      	ldr	r1, [r4, #0]
 80051fc:	6833      	ldr	r3, [r6, #0]
 80051fe:	0608      	lsls	r0, r1, #24
 8005200:	f853 5b04 	ldr.w	r5, [r3], #4
 8005204:	d402      	bmi.n	800520c <_printf_i+0xe8>
 8005206:	0649      	lsls	r1, r1, #25
 8005208:	bf48      	it	mi
 800520a:	b2ad      	uxthmi	r5, r5
 800520c:	2f6f      	cmp	r7, #111	@ 0x6f
 800520e:	6033      	str	r3, [r6, #0]
 8005210:	bf14      	ite	ne
 8005212:	230a      	movne	r3, #10
 8005214:	2308      	moveq	r3, #8
 8005216:	4851      	ldr	r0, [pc, #324]	@ (800535c <_printf_i+0x238>)
 8005218:	2100      	movs	r1, #0
 800521a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800521e:	6866      	ldr	r6, [r4, #4]
 8005220:	2e00      	cmp	r6, #0
 8005222:	bfa8      	it	ge
 8005224:	6821      	ldrge	r1, [r4, #0]
 8005226:	60a6      	str	r6, [r4, #8]
 8005228:	bfa4      	itt	ge
 800522a:	f021 0104 	bicge.w	r1, r1, #4
 800522e:	6021      	strge	r1, [r4, #0]
 8005230:	b90d      	cbnz	r5, 8005236 <_printf_i+0x112>
 8005232:	2e00      	cmp	r6, #0
 8005234:	d04b      	beq.n	80052ce <_printf_i+0x1aa>
 8005236:	4616      	mov	r6, r2
 8005238:	fbb5 f1f3 	udiv	r1, r5, r3
 800523c:	fb03 5711 	mls	r7, r3, r1, r5
 8005240:	5dc7      	ldrb	r7, [r0, r7]
 8005242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005246:	462f      	mov	r7, r5
 8005248:	42bb      	cmp	r3, r7
 800524a:	460d      	mov	r5, r1
 800524c:	d9f4      	bls.n	8005238 <_printf_i+0x114>
 800524e:	2b08      	cmp	r3, #8
 8005250:	d10b      	bne.n	800526a <_printf_i+0x146>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	07df      	lsls	r7, r3, #31
 8005256:	d508      	bpl.n	800526a <_printf_i+0x146>
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	6861      	ldr	r1, [r4, #4]
 800525c:	4299      	cmp	r1, r3
 800525e:	bfde      	ittt	le
 8005260:	2330      	movle	r3, #48	@ 0x30
 8005262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800526a:	1b92      	subs	r2, r2, r6
 800526c:	6122      	str	r2, [r4, #16]
 800526e:	464b      	mov	r3, r9
 8005270:	4621      	mov	r1, r4
 8005272:	4640      	mov	r0, r8
 8005274:	f8cd a000 	str.w	sl, [sp]
 8005278:	aa03      	add	r2, sp, #12
 800527a:	f7ff fee1 	bl	8005040 <_printf_common>
 800527e:	3001      	adds	r0, #1
 8005280:	d14a      	bne.n	8005318 <_printf_i+0x1f4>
 8005282:	f04f 30ff 	mov.w	r0, #4294967295
 8005286:	b004      	add	sp, #16
 8005288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	f043 0320 	orr.w	r3, r3, #32
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	2778      	movs	r7, #120	@ 0x78
 8005296:	4832      	ldr	r0, [pc, #200]	@ (8005360 <_printf_i+0x23c>)
 8005298:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	061f      	lsls	r7, r3, #24
 80052a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80052a6:	d402      	bmi.n	80052ae <_printf_i+0x18a>
 80052a8:	065f      	lsls	r7, r3, #25
 80052aa:	bf48      	it	mi
 80052ac:	b2ad      	uxthmi	r5, r5
 80052ae:	6031      	str	r1, [r6, #0]
 80052b0:	07d9      	lsls	r1, r3, #31
 80052b2:	bf44      	itt	mi
 80052b4:	f043 0320 	orrmi.w	r3, r3, #32
 80052b8:	6023      	strmi	r3, [r4, #0]
 80052ba:	b11d      	cbz	r5, 80052c4 <_printf_i+0x1a0>
 80052bc:	2310      	movs	r3, #16
 80052be:	e7ab      	b.n	8005218 <_printf_i+0xf4>
 80052c0:	4826      	ldr	r0, [pc, #152]	@ (800535c <_printf_i+0x238>)
 80052c2:	e7e9      	b.n	8005298 <_printf_i+0x174>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	f023 0320 	bic.w	r3, r3, #32
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	e7f6      	b.n	80052bc <_printf_i+0x198>
 80052ce:	4616      	mov	r6, r2
 80052d0:	e7bd      	b.n	800524e <_printf_i+0x12a>
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	6825      	ldr	r5, [r4, #0]
 80052d6:	1d18      	adds	r0, r3, #4
 80052d8:	6961      	ldr	r1, [r4, #20]
 80052da:	6030      	str	r0, [r6, #0]
 80052dc:	062e      	lsls	r6, r5, #24
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	d501      	bpl.n	80052e6 <_printf_i+0x1c2>
 80052e2:	6019      	str	r1, [r3, #0]
 80052e4:	e002      	b.n	80052ec <_printf_i+0x1c8>
 80052e6:	0668      	lsls	r0, r5, #25
 80052e8:	d5fb      	bpl.n	80052e2 <_printf_i+0x1be>
 80052ea:	8019      	strh	r1, [r3, #0]
 80052ec:	2300      	movs	r3, #0
 80052ee:	4616      	mov	r6, r2
 80052f0:	6123      	str	r3, [r4, #16]
 80052f2:	e7bc      	b.n	800526e <_printf_i+0x14a>
 80052f4:	6833      	ldr	r3, [r6, #0]
 80052f6:	2100      	movs	r1, #0
 80052f8:	1d1a      	adds	r2, r3, #4
 80052fa:	6032      	str	r2, [r6, #0]
 80052fc:	681e      	ldr	r6, [r3, #0]
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	4630      	mov	r0, r6
 8005302:	f000 f9b4 	bl	800566e <memchr>
 8005306:	b108      	cbz	r0, 800530c <_printf_i+0x1e8>
 8005308:	1b80      	subs	r0, r0, r6
 800530a:	6060      	str	r0, [r4, #4]
 800530c:	6863      	ldr	r3, [r4, #4]
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	2300      	movs	r3, #0
 8005312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005316:	e7aa      	b.n	800526e <_printf_i+0x14a>
 8005318:	4632      	mov	r2, r6
 800531a:	4649      	mov	r1, r9
 800531c:	4640      	mov	r0, r8
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	47d0      	blx	sl
 8005322:	3001      	adds	r0, #1
 8005324:	d0ad      	beq.n	8005282 <_printf_i+0x15e>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	079b      	lsls	r3, r3, #30
 800532a:	d413      	bmi.n	8005354 <_printf_i+0x230>
 800532c:	68e0      	ldr	r0, [r4, #12]
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	4298      	cmp	r0, r3
 8005332:	bfb8      	it	lt
 8005334:	4618      	movlt	r0, r3
 8005336:	e7a6      	b.n	8005286 <_printf_i+0x162>
 8005338:	2301      	movs	r3, #1
 800533a:	4632      	mov	r2, r6
 800533c:	4649      	mov	r1, r9
 800533e:	4640      	mov	r0, r8
 8005340:	47d0      	blx	sl
 8005342:	3001      	adds	r0, #1
 8005344:	d09d      	beq.n	8005282 <_printf_i+0x15e>
 8005346:	3501      	adds	r5, #1
 8005348:	68e3      	ldr	r3, [r4, #12]
 800534a:	9903      	ldr	r1, [sp, #12]
 800534c:	1a5b      	subs	r3, r3, r1
 800534e:	42ab      	cmp	r3, r5
 8005350:	dcf2      	bgt.n	8005338 <_printf_i+0x214>
 8005352:	e7eb      	b.n	800532c <_printf_i+0x208>
 8005354:	2500      	movs	r5, #0
 8005356:	f104 0619 	add.w	r6, r4, #25
 800535a:	e7f5      	b.n	8005348 <_printf_i+0x224>
 800535c:	08007414 	.word	0x08007414
 8005360:	08007425 	.word	0x08007425

08005364 <std>:
 8005364:	2300      	movs	r3, #0
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	e9c0 3300 	strd	r3, r3, [r0]
 800536e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005372:	6083      	str	r3, [r0, #8]
 8005374:	8181      	strh	r1, [r0, #12]
 8005376:	6643      	str	r3, [r0, #100]	@ 0x64
 8005378:	81c2      	strh	r2, [r0, #14]
 800537a:	6183      	str	r3, [r0, #24]
 800537c:	4619      	mov	r1, r3
 800537e:	2208      	movs	r2, #8
 8005380:	305c      	adds	r0, #92	@ 0x5c
 8005382:	f000 f8f4 	bl	800556e <memset>
 8005386:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <std+0x58>)
 8005388:	6224      	str	r4, [r4, #32]
 800538a:	6263      	str	r3, [r4, #36]	@ 0x24
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <std+0x5c>)
 800538e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005390:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <std+0x60>)
 8005392:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005394:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <std+0x64>)
 8005396:	6323      	str	r3, [r4, #48]	@ 0x30
 8005398:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <std+0x68>)
 800539a:	429c      	cmp	r4, r3
 800539c:	d006      	beq.n	80053ac <std+0x48>
 800539e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053a2:	4294      	cmp	r4, r2
 80053a4:	d002      	beq.n	80053ac <std+0x48>
 80053a6:	33d0      	adds	r3, #208	@ 0xd0
 80053a8:	429c      	cmp	r4, r3
 80053aa:	d105      	bne.n	80053b8 <std+0x54>
 80053ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b4:	f000 b958 	b.w	8005668 <__retarget_lock_init_recursive>
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	bf00      	nop
 80053bc:	080054e9 	.word	0x080054e9
 80053c0:	0800550b 	.word	0x0800550b
 80053c4:	08005543 	.word	0x08005543
 80053c8:	08005567 	.word	0x08005567
 80053cc:	20000998 	.word	0x20000998

080053d0 <stdio_exit_handler>:
 80053d0:	4a02      	ldr	r2, [pc, #8]	@ (80053dc <stdio_exit_handler+0xc>)
 80053d2:	4903      	ldr	r1, [pc, #12]	@ (80053e0 <stdio_exit_handler+0x10>)
 80053d4:	4803      	ldr	r0, [pc, #12]	@ (80053e4 <stdio_exit_handler+0x14>)
 80053d6:	f000 b869 	b.w	80054ac <_fwalk_sglue>
 80053da:	bf00      	nop
 80053dc:	2000000c 	.word	0x2000000c
 80053e0:	08006d45 	.word	0x08006d45
 80053e4:	2000001c 	.word	0x2000001c

080053e8 <cleanup_stdio>:
 80053e8:	6841      	ldr	r1, [r0, #4]
 80053ea:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <cleanup_stdio+0x34>)
 80053ec:	b510      	push	{r4, lr}
 80053ee:	4299      	cmp	r1, r3
 80053f0:	4604      	mov	r4, r0
 80053f2:	d001      	beq.n	80053f8 <cleanup_stdio+0x10>
 80053f4:	f001 fca6 	bl	8006d44 <_fflush_r>
 80053f8:	68a1      	ldr	r1, [r4, #8]
 80053fa:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <cleanup_stdio+0x38>)
 80053fc:	4299      	cmp	r1, r3
 80053fe:	d002      	beq.n	8005406 <cleanup_stdio+0x1e>
 8005400:	4620      	mov	r0, r4
 8005402:	f001 fc9f 	bl	8006d44 <_fflush_r>
 8005406:	68e1      	ldr	r1, [r4, #12]
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <cleanup_stdio+0x3c>)
 800540a:	4299      	cmp	r1, r3
 800540c:	d004      	beq.n	8005418 <cleanup_stdio+0x30>
 800540e:	4620      	mov	r0, r4
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	f001 bc96 	b.w	8006d44 <_fflush_r>
 8005418:	bd10      	pop	{r4, pc}
 800541a:	bf00      	nop
 800541c:	20000998 	.word	0x20000998
 8005420:	20000a00 	.word	0x20000a00
 8005424:	20000a68 	.word	0x20000a68

08005428 <global_stdio_init.part.0>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <global_stdio_init.part.0+0x30>)
 800542c:	4c0b      	ldr	r4, [pc, #44]	@ (800545c <global_stdio_init.part.0+0x34>)
 800542e:	4a0c      	ldr	r2, [pc, #48]	@ (8005460 <global_stdio_init.part.0+0x38>)
 8005430:	4620      	mov	r0, r4
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	2104      	movs	r1, #4
 8005436:	2200      	movs	r2, #0
 8005438:	f7ff ff94 	bl	8005364 <std>
 800543c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005440:	2201      	movs	r2, #1
 8005442:	2109      	movs	r1, #9
 8005444:	f7ff ff8e 	bl	8005364 <std>
 8005448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800544c:	2202      	movs	r2, #2
 800544e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005452:	2112      	movs	r1, #18
 8005454:	f7ff bf86 	b.w	8005364 <std>
 8005458:	20000ad0 	.word	0x20000ad0
 800545c:	20000998 	.word	0x20000998
 8005460:	080053d1 	.word	0x080053d1

08005464 <__sfp_lock_acquire>:
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <__sfp_lock_acquire+0x8>)
 8005466:	f000 b900 	b.w	800566a <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	20000ad9 	.word	0x20000ad9

08005470 <__sfp_lock_release>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__sfp_lock_release+0x8>)
 8005472:	f000 b8fb 	b.w	800566c <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	20000ad9 	.word	0x20000ad9

0800547c <__sinit>:
 800547c:	b510      	push	{r4, lr}
 800547e:	4604      	mov	r4, r0
 8005480:	f7ff fff0 	bl	8005464 <__sfp_lock_acquire>
 8005484:	6a23      	ldr	r3, [r4, #32]
 8005486:	b11b      	cbz	r3, 8005490 <__sinit+0x14>
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548c:	f7ff bff0 	b.w	8005470 <__sfp_lock_release>
 8005490:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <__sinit+0x28>)
 8005492:	6223      	str	r3, [r4, #32]
 8005494:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <__sinit+0x2c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f5      	bne.n	8005488 <__sinit+0xc>
 800549c:	f7ff ffc4 	bl	8005428 <global_stdio_init.part.0>
 80054a0:	e7f2      	b.n	8005488 <__sinit+0xc>
 80054a2:	bf00      	nop
 80054a4:	080053e9 	.word	0x080053e9
 80054a8:	20000ad0 	.word	0x20000ad0

080054ac <_fwalk_sglue>:
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b0:	4607      	mov	r7, r0
 80054b2:	4688      	mov	r8, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	2600      	movs	r6, #0
 80054b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054bc:	f1b9 0901 	subs.w	r9, r9, #1
 80054c0:	d505      	bpl.n	80054ce <_fwalk_sglue+0x22>
 80054c2:	6824      	ldr	r4, [r4, #0]
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	d1f7      	bne.n	80054b8 <_fwalk_sglue+0xc>
 80054c8:	4630      	mov	r0, r6
 80054ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d907      	bls.n	80054e4 <_fwalk_sglue+0x38>
 80054d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054d8:	3301      	adds	r3, #1
 80054da:	d003      	beq.n	80054e4 <_fwalk_sglue+0x38>
 80054dc:	4629      	mov	r1, r5
 80054de:	4638      	mov	r0, r7
 80054e0:	47c0      	blx	r8
 80054e2:	4306      	orrs	r6, r0
 80054e4:	3568      	adds	r5, #104	@ 0x68
 80054e6:	e7e9      	b.n	80054bc <_fwalk_sglue+0x10>

080054e8 <__sread>:
 80054e8:	b510      	push	{r4, lr}
 80054ea:	460c      	mov	r4, r1
 80054ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f0:	f000 f86c 	bl	80055cc <_read_r>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	bfab      	itete	ge
 80054f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054fa:	89a3      	ldrhlt	r3, [r4, #12]
 80054fc:	181b      	addge	r3, r3, r0
 80054fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005502:	bfac      	ite	ge
 8005504:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005506:	81a3      	strhlt	r3, [r4, #12]
 8005508:	bd10      	pop	{r4, pc}

0800550a <__swrite>:
 800550a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550e:	461f      	mov	r7, r3
 8005510:	898b      	ldrh	r3, [r1, #12]
 8005512:	4605      	mov	r5, r0
 8005514:	05db      	lsls	r3, r3, #23
 8005516:	460c      	mov	r4, r1
 8005518:	4616      	mov	r6, r2
 800551a:	d505      	bpl.n	8005528 <__swrite+0x1e>
 800551c:	2302      	movs	r3, #2
 800551e:	2200      	movs	r2, #0
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	f000 f840 	bl	80055a8 <_lseek_r>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	4632      	mov	r2, r6
 800552c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005530:	81a3      	strh	r3, [r4, #12]
 8005532:	4628      	mov	r0, r5
 8005534:	463b      	mov	r3, r7
 8005536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800553a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553e:	f000 b857 	b.w	80055f0 <_write_r>

08005542 <__sseek>:
 8005542:	b510      	push	{r4, lr}
 8005544:	460c      	mov	r4, r1
 8005546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554a:	f000 f82d 	bl	80055a8 <_lseek_r>
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	bf15      	itete	ne
 8005554:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005556:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800555a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800555e:	81a3      	strheq	r3, [r4, #12]
 8005560:	bf18      	it	ne
 8005562:	81a3      	strhne	r3, [r4, #12]
 8005564:	bd10      	pop	{r4, pc}

08005566 <__sclose>:
 8005566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556a:	f000 b80d 	b.w	8005588 <_close_r>

0800556e <memset>:
 800556e:	4603      	mov	r3, r0
 8005570:	4402      	add	r2, r0
 8005572:	4293      	cmp	r3, r2
 8005574:	d100      	bne.n	8005578 <memset+0xa>
 8005576:	4770      	bx	lr
 8005578:	f803 1b01 	strb.w	r1, [r3], #1
 800557c:	e7f9      	b.n	8005572 <memset+0x4>
	...

08005580 <_localeconv_r>:
 8005580:	4800      	ldr	r0, [pc, #0]	@ (8005584 <_localeconv_r+0x4>)
 8005582:	4770      	bx	lr
 8005584:	20000158 	.word	0x20000158

08005588 <_close_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	2300      	movs	r3, #0
 800558c:	4d05      	ldr	r5, [pc, #20]	@ (80055a4 <_close_r+0x1c>)
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	f7fc fb7f 	bl	8001c96 <_close>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_close_r+0x1a>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_close_r+0x1a>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	20000ad4 	.word	0x20000ad4

080055a8 <_lseek_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4604      	mov	r4, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	4611      	mov	r1, r2
 80055b0:	2200      	movs	r2, #0
 80055b2:	4d05      	ldr	r5, [pc, #20]	@ (80055c8 <_lseek_r+0x20>)
 80055b4:	602a      	str	r2, [r5, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	f7fc fb91 	bl	8001cde <_lseek>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_lseek_r+0x1e>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_lseek_r+0x1e>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000ad4 	.word	0x20000ad4

080055cc <_read_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	4611      	mov	r1, r2
 80055d4:	2200      	movs	r2, #0
 80055d6:	4d05      	ldr	r5, [pc, #20]	@ (80055ec <_read_r+0x20>)
 80055d8:	602a      	str	r2, [r5, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	f7fc fb22 	bl	8001c24 <_read>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_read_r+0x1e>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_read_r+0x1e>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	20000ad4 	.word	0x20000ad4

080055f0 <_write_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	2200      	movs	r2, #0
 80055fa:	4d05      	ldr	r5, [pc, #20]	@ (8005610 <_write_r+0x20>)
 80055fc:	602a      	str	r2, [r5, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fc fb2d 	bl	8001c5e <_write>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_write_r+0x1e>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_write_r+0x1e>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000ad4 	.word	0x20000ad4

08005614 <__errno>:
 8005614:	4b01      	ldr	r3, [pc, #4]	@ (800561c <__errno+0x8>)
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000018 	.word	0x20000018

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	2600      	movs	r6, #0
 8005624:	4d0c      	ldr	r5, [pc, #48]	@ (8005658 <__libc_init_array+0x38>)
 8005626:	4c0d      	ldr	r4, [pc, #52]	@ (800565c <__libc_init_array+0x3c>)
 8005628:	1b64      	subs	r4, r4, r5
 800562a:	10a4      	asrs	r4, r4, #2
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	f001 fec6 	bl	80073c0 <_init>
 8005634:	2600      	movs	r6, #0
 8005636:	4d0a      	ldr	r5, [pc, #40]	@ (8005660 <__libc_init_array+0x40>)
 8005638:	4c0a      	ldr	r4, [pc, #40]	@ (8005664 <__libc_init_array+0x44>)
 800563a:	1b64      	subs	r4, r4, r5
 800563c:	10a4      	asrs	r4, r4, #2
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	08007778 	.word	0x08007778
 800565c:	08007778 	.word	0x08007778
 8005660:	08007778 	.word	0x08007778
 8005664:	0800777c 	.word	0x0800777c

08005668 <__retarget_lock_init_recursive>:
 8005668:	4770      	bx	lr

0800566a <__retarget_lock_acquire_recursive>:
 800566a:	4770      	bx	lr

0800566c <__retarget_lock_release_recursive>:
 800566c:	4770      	bx	lr

0800566e <memchr>:
 800566e:	4603      	mov	r3, r0
 8005670:	b510      	push	{r4, lr}
 8005672:	b2c9      	uxtb	r1, r1
 8005674:	4402      	add	r2, r0
 8005676:	4293      	cmp	r3, r2
 8005678:	4618      	mov	r0, r3
 800567a:	d101      	bne.n	8005680 <memchr+0x12>
 800567c:	2000      	movs	r0, #0
 800567e:	e003      	b.n	8005688 <memchr+0x1a>
 8005680:	7804      	ldrb	r4, [r0, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	428c      	cmp	r4, r1
 8005686:	d1f6      	bne.n	8005676 <memchr+0x8>
 8005688:	bd10      	pop	{r4, pc}

0800568a <memcpy>:
 800568a:	440a      	add	r2, r1
 800568c:	4291      	cmp	r1, r2
 800568e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005692:	d100      	bne.n	8005696 <memcpy+0xc>
 8005694:	4770      	bx	lr
 8005696:	b510      	push	{r4, lr}
 8005698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800569c:	4291      	cmp	r1, r2
 800569e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a2:	d1f9      	bne.n	8005698 <memcpy+0xe>
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <quorem>:
 80056a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	6903      	ldr	r3, [r0, #16]
 80056ac:	690c      	ldr	r4, [r1, #16]
 80056ae:	4607      	mov	r7, r0
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	db7e      	blt.n	80057b2 <quorem+0x10c>
 80056b4:	3c01      	subs	r4, #1
 80056b6:	00a3      	lsls	r3, r4, #2
 80056b8:	f100 0514 	add.w	r5, r0, #20
 80056bc:	f101 0814 	add.w	r8, r1, #20
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056d0:	3301      	adds	r3, #1
 80056d2:	429a      	cmp	r2, r3
 80056d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056dc:	d32e      	bcc.n	800573c <quorem+0x96>
 80056de:	f04f 0a00 	mov.w	sl, #0
 80056e2:	46c4      	mov	ip, r8
 80056e4:	46ae      	mov	lr, r5
 80056e6:	46d3      	mov	fp, sl
 80056e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056ec:	b298      	uxth	r0, r3
 80056ee:	fb06 a000 	mla	r0, r6, r0, sl
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	0c02      	lsrs	r2, r0, #16
 80056f6:	fb06 2303 	mla	r3, r6, r3, r2
 80056fa:	f8de 2000 	ldr.w	r2, [lr]
 80056fe:	b280      	uxth	r0, r0
 8005700:	b292      	uxth	r2, r2
 8005702:	1a12      	subs	r2, r2, r0
 8005704:	445a      	add	r2, fp
 8005706:	f8de 0000 	ldr.w	r0, [lr]
 800570a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800570e:	b29b      	uxth	r3, r3
 8005710:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005714:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005718:	b292      	uxth	r2, r2
 800571a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800571e:	45e1      	cmp	r9, ip
 8005720:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005724:	f84e 2b04 	str.w	r2, [lr], #4
 8005728:	d2de      	bcs.n	80056e8 <quorem+0x42>
 800572a:	9b00      	ldr	r3, [sp, #0]
 800572c:	58eb      	ldr	r3, [r5, r3]
 800572e:	b92b      	cbnz	r3, 800573c <quorem+0x96>
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	3b04      	subs	r3, #4
 8005734:	429d      	cmp	r5, r3
 8005736:	461a      	mov	r2, r3
 8005738:	d32f      	bcc.n	800579a <quorem+0xf4>
 800573a:	613c      	str	r4, [r7, #16]
 800573c:	4638      	mov	r0, r7
 800573e:	f001 f979 	bl	8006a34 <__mcmp>
 8005742:	2800      	cmp	r0, #0
 8005744:	db25      	blt.n	8005792 <quorem+0xec>
 8005746:	4629      	mov	r1, r5
 8005748:	2000      	movs	r0, #0
 800574a:	f858 2b04 	ldr.w	r2, [r8], #4
 800574e:	f8d1 c000 	ldr.w	ip, [r1]
 8005752:	fa1f fe82 	uxth.w	lr, r2
 8005756:	fa1f f38c 	uxth.w	r3, ip
 800575a:	eba3 030e 	sub.w	r3, r3, lr
 800575e:	4403      	add	r3, r0
 8005760:	0c12      	lsrs	r2, r2, #16
 8005762:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005766:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005770:	45c1      	cmp	r9, r8
 8005772:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005776:	f841 3b04 	str.w	r3, [r1], #4
 800577a:	d2e6      	bcs.n	800574a <quorem+0xa4>
 800577c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005784:	b922      	cbnz	r2, 8005790 <quorem+0xea>
 8005786:	3b04      	subs	r3, #4
 8005788:	429d      	cmp	r5, r3
 800578a:	461a      	mov	r2, r3
 800578c:	d30b      	bcc.n	80057a6 <quorem+0x100>
 800578e:	613c      	str	r4, [r7, #16]
 8005790:	3601      	adds	r6, #1
 8005792:	4630      	mov	r0, r6
 8005794:	b003      	add	sp, #12
 8005796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	3b04      	subs	r3, #4
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d1cb      	bne.n	800573a <quorem+0x94>
 80057a2:	3c01      	subs	r4, #1
 80057a4:	e7c6      	b.n	8005734 <quorem+0x8e>
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	d1ef      	bne.n	800578e <quorem+0xe8>
 80057ae:	3c01      	subs	r4, #1
 80057b0:	e7ea      	b.n	8005788 <quorem+0xe2>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e7ee      	b.n	8005794 <quorem+0xee>
	...

080057b8 <_dtoa_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	4614      	mov	r4, r2
 80057be:	461d      	mov	r5, r3
 80057c0:	69c7      	ldr	r7, [r0, #28]
 80057c2:	b097      	sub	sp, #92	@ 0x5c
 80057c4:	4683      	mov	fp, r0
 80057c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80057ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80057cc:	b97f      	cbnz	r7, 80057ee <_dtoa_r+0x36>
 80057ce:	2010      	movs	r0, #16
 80057d0:	f000 fe02 	bl	80063d8 <malloc>
 80057d4:	4602      	mov	r2, r0
 80057d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80057da:	b920      	cbnz	r0, 80057e6 <_dtoa_r+0x2e>
 80057dc:	21ef      	movs	r1, #239	@ 0xef
 80057de:	4ba8      	ldr	r3, [pc, #672]	@ (8005a80 <_dtoa_r+0x2c8>)
 80057e0:	48a8      	ldr	r0, [pc, #672]	@ (8005a84 <_dtoa_r+0x2cc>)
 80057e2:	f001 fae7 	bl	8006db4 <__assert_func>
 80057e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057ea:	6007      	str	r7, [r0, #0]
 80057ec:	60c7      	str	r7, [r0, #12]
 80057ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	b159      	cbz	r1, 800580e <_dtoa_r+0x56>
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	2301      	movs	r3, #1
 80057fa:	4093      	lsls	r3, r2
 80057fc:	604a      	str	r2, [r1, #4]
 80057fe:	608b      	str	r3, [r1, #8]
 8005800:	4658      	mov	r0, fp
 8005802:	f000 fedf 	bl	80065c4 <_Bfree>
 8005806:	2200      	movs	r2, #0
 8005808:	f8db 301c 	ldr.w	r3, [fp, #28]
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	1e2b      	subs	r3, r5, #0
 8005810:	bfaf      	iteee	ge
 8005812:	2300      	movge	r3, #0
 8005814:	2201      	movlt	r2, #1
 8005816:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800581a:	9303      	strlt	r3, [sp, #12]
 800581c:	bfa8      	it	ge
 800581e:	6033      	strge	r3, [r6, #0]
 8005820:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005824:	4b98      	ldr	r3, [pc, #608]	@ (8005a88 <_dtoa_r+0x2d0>)
 8005826:	bfb8      	it	lt
 8005828:	6032      	strlt	r2, [r6, #0]
 800582a:	ea33 0308 	bics.w	r3, r3, r8
 800582e:	d112      	bne.n	8005856 <_dtoa_r+0x9e>
 8005830:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005834:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800583c:	4323      	orrs	r3, r4
 800583e:	f000 8550 	beq.w	80062e2 <_dtoa_r+0xb2a>
 8005842:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005844:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005a8c <_dtoa_r+0x2d4>
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8552 	beq.w	80062f2 <_dtoa_r+0xb3a>
 800584e:	f10a 0303 	add.w	r3, sl, #3
 8005852:	f000 bd4c 	b.w	80062ee <_dtoa_r+0xb36>
 8005856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800585a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800585e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005862:	2200      	movs	r2, #0
 8005864:	2300      	movs	r3, #0
 8005866:	f7fb f89f 	bl	80009a8 <__aeabi_dcmpeq>
 800586a:	4607      	mov	r7, r0
 800586c:	b158      	cbz	r0, 8005886 <_dtoa_r+0xce>
 800586e:	2301      	movs	r3, #1
 8005870:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005876:	b113      	cbz	r3, 800587e <_dtoa_r+0xc6>
 8005878:	4b85      	ldr	r3, [pc, #532]	@ (8005a90 <_dtoa_r+0x2d8>)
 800587a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005a94 <_dtoa_r+0x2dc>
 8005882:	f000 bd36 	b.w	80062f2 <_dtoa_r+0xb3a>
 8005886:	ab14      	add	r3, sp, #80	@ 0x50
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	ab15      	add	r3, sp, #84	@ 0x54
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	4658      	mov	r0, fp
 8005890:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005894:	f001 f97e 	bl	8006b94 <__d2b>
 8005898:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800589c:	4681      	mov	r9, r0
 800589e:	2e00      	cmp	r6, #0
 80058a0:	d077      	beq.n	8005992 <_dtoa_r+0x1da>
 80058a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80058ba:	4619      	mov	r1, r3
 80058bc:	2200      	movs	r2, #0
 80058be:	4b76      	ldr	r3, [pc, #472]	@ (8005a98 <_dtoa_r+0x2e0>)
 80058c0:	f7fa fc52 	bl	8000168 <__aeabi_dsub>
 80058c4:	a368      	add	r3, pc, #416	@ (adr r3, 8005a68 <_dtoa_r+0x2b0>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fe05 	bl	80004d8 <__aeabi_dmul>
 80058ce:	a368      	add	r3, pc, #416	@ (adr r3, 8005a70 <_dtoa_r+0x2b8>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fc4a 	bl	800016c <__adddf3>
 80058d8:	4604      	mov	r4, r0
 80058da:	4630      	mov	r0, r6
 80058dc:	460d      	mov	r5, r1
 80058de:	f7fa fd91 	bl	8000404 <__aeabi_i2d>
 80058e2:	a365      	add	r3, pc, #404	@ (adr r3, 8005a78 <_dtoa_r+0x2c0>)
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f7fa fdf6 	bl	80004d8 <__aeabi_dmul>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4620      	mov	r0, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	f7fa fc3a 	bl	800016c <__adddf3>
 80058f8:	4604      	mov	r4, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	f7fb f89c 	bl	8000a38 <__aeabi_d2iz>
 8005900:	2200      	movs	r2, #0
 8005902:	4607      	mov	r7, r0
 8005904:	2300      	movs	r3, #0
 8005906:	4620      	mov	r0, r4
 8005908:	4629      	mov	r1, r5
 800590a:	f7fb f857 	bl	80009bc <__aeabi_dcmplt>
 800590e:	b140      	cbz	r0, 8005922 <_dtoa_r+0x16a>
 8005910:	4638      	mov	r0, r7
 8005912:	f7fa fd77 	bl	8000404 <__aeabi_i2d>
 8005916:	4622      	mov	r2, r4
 8005918:	462b      	mov	r3, r5
 800591a:	f7fb f845 	bl	80009a8 <__aeabi_dcmpeq>
 800591e:	b900      	cbnz	r0, 8005922 <_dtoa_r+0x16a>
 8005920:	3f01      	subs	r7, #1
 8005922:	2f16      	cmp	r7, #22
 8005924:	d853      	bhi.n	80059ce <_dtoa_r+0x216>
 8005926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800592a:	4b5c      	ldr	r3, [pc, #368]	@ (8005a9c <_dtoa_r+0x2e4>)
 800592c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fb f842 	bl	80009bc <__aeabi_dcmplt>
 8005938:	2800      	cmp	r0, #0
 800593a:	d04a      	beq.n	80059d2 <_dtoa_r+0x21a>
 800593c:	2300      	movs	r3, #0
 800593e:	3f01      	subs	r7, #1
 8005940:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005942:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005944:	1b9b      	subs	r3, r3, r6
 8005946:	1e5a      	subs	r2, r3, #1
 8005948:	bf46      	itte	mi
 800594a:	f1c3 0801 	rsbmi	r8, r3, #1
 800594e:	2300      	movmi	r3, #0
 8005950:	f04f 0800 	movpl.w	r8, #0
 8005954:	9209      	str	r2, [sp, #36]	@ 0x24
 8005956:	bf48      	it	mi
 8005958:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800595a:	2f00      	cmp	r7, #0
 800595c:	db3b      	blt.n	80059d6 <_dtoa_r+0x21e>
 800595e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005960:	970e      	str	r7, [sp, #56]	@ 0x38
 8005962:	443b      	add	r3, r7
 8005964:	9309      	str	r3, [sp, #36]	@ 0x24
 8005966:	2300      	movs	r3, #0
 8005968:	930a      	str	r3, [sp, #40]	@ 0x28
 800596a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800596c:	2b09      	cmp	r3, #9
 800596e:	d866      	bhi.n	8005a3e <_dtoa_r+0x286>
 8005970:	2b05      	cmp	r3, #5
 8005972:	bfc4      	itt	gt
 8005974:	3b04      	subgt	r3, #4
 8005976:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005978:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800597a:	bfc8      	it	gt
 800597c:	2400      	movgt	r4, #0
 800597e:	f1a3 0302 	sub.w	r3, r3, #2
 8005982:	bfd8      	it	le
 8005984:	2401      	movle	r4, #1
 8005986:	2b03      	cmp	r3, #3
 8005988:	d864      	bhi.n	8005a54 <_dtoa_r+0x29c>
 800598a:	e8df f003 	tbb	[pc, r3]
 800598e:	382b      	.short	0x382b
 8005990:	5636      	.short	0x5636
 8005992:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005996:	441e      	add	r6, r3
 8005998:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800599c:	2b20      	cmp	r3, #32
 800599e:	bfc1      	itttt	gt
 80059a0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80059a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059b0:	bfd6      	itet	le
 80059b2:	f1c3 0320 	rsble	r3, r3, #32
 80059b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80059ba:	fa04 f003 	lslle.w	r0, r4, r3
 80059be:	f7fa fd11 	bl	80003e4 <__aeabi_ui2d>
 80059c2:	2201      	movs	r2, #1
 80059c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059c8:	3e01      	subs	r6, #1
 80059ca:	9212      	str	r2, [sp, #72]	@ 0x48
 80059cc:	e775      	b.n	80058ba <_dtoa_r+0x102>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e7b6      	b.n	8005940 <_dtoa_r+0x188>
 80059d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80059d4:	e7b5      	b.n	8005942 <_dtoa_r+0x18a>
 80059d6:	427b      	negs	r3, r7
 80059d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059da:	2300      	movs	r3, #0
 80059dc:	eba8 0807 	sub.w	r8, r8, r7
 80059e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80059e2:	e7c2      	b.n	800596a <_dtoa_r+0x1b2>
 80059e4:	2300      	movs	r3, #0
 80059e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dc35      	bgt.n	8005a5a <_dtoa_r+0x2a2>
 80059ee:	2301      	movs	r3, #1
 80059f0:	461a      	mov	r2, r3
 80059f2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059f6:	9221      	str	r2, [sp, #132]	@ 0x84
 80059f8:	e00b      	b.n	8005a12 <_dtoa_r+0x25a>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7f3      	b.n	80059e6 <_dtoa_r+0x22e>
 80059fe:	2300      	movs	r3, #0
 8005a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	9308      	str	r3, [sp, #32]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	9307      	str	r3, [sp, #28]
 8005a0e:	bfb8      	it	lt
 8005a10:	2301      	movlt	r3, #1
 8005a12:	2100      	movs	r1, #0
 8005a14:	2204      	movs	r2, #4
 8005a16:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a1a:	f102 0514 	add.w	r5, r2, #20
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	d91f      	bls.n	8005a62 <_dtoa_r+0x2aa>
 8005a22:	6041      	str	r1, [r0, #4]
 8005a24:	4658      	mov	r0, fp
 8005a26:	f000 fd8d 	bl	8006544 <_Balloc>
 8005a2a:	4682      	mov	sl, r0
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d139      	bne.n	8005aa4 <_dtoa_r+0x2ec>
 8005a30:	4602      	mov	r2, r0
 8005a32:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a36:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa0 <_dtoa_r+0x2e8>)
 8005a38:	e6d2      	b.n	80057e0 <_dtoa_r+0x28>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e7e0      	b.n	8005a00 <_dtoa_r+0x248>
 8005a3e:	2401      	movs	r4, #1
 8005a40:	2300      	movs	r3, #0
 8005a42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a44:	9320      	str	r3, [sp, #128]	@ 0x80
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a50:	2312      	movs	r3, #18
 8005a52:	e7d0      	b.n	80059f6 <_dtoa_r+0x23e>
 8005a54:	2301      	movs	r3, #1
 8005a56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a58:	e7f5      	b.n	8005a46 <_dtoa_r+0x28e>
 8005a5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a60:	e7d7      	b.n	8005a12 <_dtoa_r+0x25a>
 8005a62:	3101      	adds	r1, #1
 8005a64:	0052      	lsls	r2, r2, #1
 8005a66:	e7d8      	b.n	8005a1a <_dtoa_r+0x262>
 8005a68:	636f4361 	.word	0x636f4361
 8005a6c:	3fd287a7 	.word	0x3fd287a7
 8005a70:	8b60c8b3 	.word	0x8b60c8b3
 8005a74:	3fc68a28 	.word	0x3fc68a28
 8005a78:	509f79fb 	.word	0x509f79fb
 8005a7c:	3fd34413 	.word	0x3fd34413
 8005a80:	08007443 	.word	0x08007443
 8005a84:	0800745a 	.word	0x0800745a
 8005a88:	7ff00000 	.word	0x7ff00000
 8005a8c:	0800743f 	.word	0x0800743f
 8005a90:	08007413 	.word	0x08007413
 8005a94:	08007412 	.word	0x08007412
 8005a98:	3ff80000 	.word	0x3ff80000
 8005a9c:	08007550 	.word	0x08007550
 8005aa0:	080074b2 	.word	0x080074b2
 8005aa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005aa8:	6018      	str	r0, [r3, #0]
 8005aaa:	9b07      	ldr	r3, [sp, #28]
 8005aac:	2b0e      	cmp	r3, #14
 8005aae:	f200 80a4 	bhi.w	8005bfa <_dtoa_r+0x442>
 8005ab2:	2c00      	cmp	r4, #0
 8005ab4:	f000 80a1 	beq.w	8005bfa <_dtoa_r+0x442>
 8005ab8:	2f00      	cmp	r7, #0
 8005aba:	dd33      	ble.n	8005b24 <_dtoa_r+0x36c>
 8005abc:	4b86      	ldr	r3, [pc, #536]	@ (8005cd8 <_dtoa_r+0x520>)
 8005abe:	f007 020f 	and.w	r2, r7, #15
 8005ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac6:	05f8      	lsls	r0, r7, #23
 8005ac8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005acc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ad0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ad4:	d516      	bpl.n	8005b04 <_dtoa_r+0x34c>
 8005ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ada:	4b80      	ldr	r3, [pc, #512]	@ (8005cdc <_dtoa_r+0x524>)
 8005adc:	2603      	movs	r6, #3
 8005ade:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ae2:	f7fa fe23 	bl	800072c <__aeabi_ddiv>
 8005ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aea:	f004 040f 	and.w	r4, r4, #15
 8005aee:	4d7b      	ldr	r5, [pc, #492]	@ (8005cdc <_dtoa_r+0x524>)
 8005af0:	b954      	cbnz	r4, 8005b08 <_dtoa_r+0x350>
 8005af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afa:	f7fa fe17 	bl	800072c <__aeabi_ddiv>
 8005afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b02:	e028      	b.n	8005b56 <_dtoa_r+0x39e>
 8005b04:	2602      	movs	r6, #2
 8005b06:	e7f2      	b.n	8005aee <_dtoa_r+0x336>
 8005b08:	07e1      	lsls	r1, r4, #31
 8005b0a:	d508      	bpl.n	8005b1e <_dtoa_r+0x366>
 8005b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b14:	f7fa fce0 	bl	80004d8 <__aeabi_dmul>
 8005b18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b1c:	3601      	adds	r6, #1
 8005b1e:	1064      	asrs	r4, r4, #1
 8005b20:	3508      	adds	r5, #8
 8005b22:	e7e5      	b.n	8005af0 <_dtoa_r+0x338>
 8005b24:	f000 80d2 	beq.w	8005ccc <_dtoa_r+0x514>
 8005b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b2c:	427c      	negs	r4, r7
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005cd8 <_dtoa_r+0x520>)
 8005b30:	f004 020f 	and.w	r2, r4, #15
 8005b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fccc 	bl	80004d8 <__aeabi_dmul>
 8005b40:	2602      	movs	r6, #2
 8005b42:	2300      	movs	r3, #0
 8005b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b48:	4d64      	ldr	r5, [pc, #400]	@ (8005cdc <_dtoa_r+0x524>)
 8005b4a:	1124      	asrs	r4, r4, #4
 8005b4c:	2c00      	cmp	r4, #0
 8005b4e:	f040 80b2 	bne.w	8005cb6 <_dtoa_r+0x4fe>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1d3      	bne.n	8005afe <_dtoa_r+0x346>
 8005b56:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80b7 	beq.w	8005cd0 <_dtoa_r+0x518>
 8005b62:	2200      	movs	r2, #0
 8005b64:	4620      	mov	r0, r4
 8005b66:	4629      	mov	r1, r5
 8005b68:	4b5d      	ldr	r3, [pc, #372]	@ (8005ce0 <_dtoa_r+0x528>)
 8005b6a:	f7fa ff27 	bl	80009bc <__aeabi_dcmplt>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f000 80ae 	beq.w	8005cd0 <_dtoa_r+0x518>
 8005b74:	9b07      	ldr	r3, [sp, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80aa 	beq.w	8005cd0 <_dtoa_r+0x518>
 8005b7c:	9b08      	ldr	r3, [sp, #32]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dd37      	ble.n	8005bf2 <_dtoa_r+0x43a>
 8005b82:	1e7b      	subs	r3, r7, #1
 8005b84:	4620      	mov	r0, r4
 8005b86:	9304      	str	r3, [sp, #16]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4b55      	ldr	r3, [pc, #340]	@ (8005ce4 <_dtoa_r+0x52c>)
 8005b8e:	f7fa fca3 	bl	80004d8 <__aeabi_dmul>
 8005b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b96:	9c08      	ldr	r4, [sp, #32]
 8005b98:	3601      	adds	r6, #1
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7fa fc32 	bl	8000404 <__aeabi_i2d>
 8005ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ba4:	f7fa fc98 	bl	80004d8 <__aeabi_dmul>
 8005ba8:	2200      	movs	r2, #0
 8005baa:	4b4f      	ldr	r3, [pc, #316]	@ (8005ce8 <_dtoa_r+0x530>)
 8005bac:	f7fa fade 	bl	800016c <__adddf3>
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	f040 809a 	bne.w	8005cf0 <_dtoa_r+0x538>
 8005bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8005cec <_dtoa_r+0x534>)
 8005bc4:	f7fa fad0 	bl	8000168 <__aeabi_dsub>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bd0:	462a      	mov	r2, r5
 8005bd2:	4633      	mov	r3, r6
 8005bd4:	f7fa ff10 	bl	80009f8 <__aeabi_dcmpgt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f040 828e 	bne.w	80060fa <_dtoa_r+0x942>
 8005bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be2:	462a      	mov	r2, r5
 8005be4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005be8:	f7fa fee8 	bl	80009bc <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f040 8127 	bne.w	8005e40 <_dtoa_r+0x688>
 8005bf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005bf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005bfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f2c0 8163 	blt.w	8005ec8 <_dtoa_r+0x710>
 8005c02:	2f0e      	cmp	r7, #14
 8005c04:	f300 8160 	bgt.w	8005ec8 <_dtoa_r+0x710>
 8005c08:	4b33      	ldr	r3, [pc, #204]	@ (8005cd8 <_dtoa_r+0x520>)
 8005c0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da03      	bge.n	8005c24 <_dtoa_r+0x46c>
 8005c1c:	9b07      	ldr	r3, [sp, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f340 8100 	ble.w	8005e24 <_dtoa_r+0x66c>
 8005c24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c28:	4656      	mov	r6, sl
 8005c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	f7fa fd7b 	bl	800072c <__aeabi_ddiv>
 8005c36:	f7fa feff 	bl	8000a38 <__aeabi_d2iz>
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	f7fa fbe2 	bl	8000404 <__aeabi_i2d>
 8005c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c44:	f7fa fc48 	bl	80004d8 <__aeabi_dmul>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	4629      	mov	r1, r5
 8005c50:	f7fa fa8a 	bl	8000168 <__aeabi_dsub>
 8005c54:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c58:	9d07      	ldr	r5, [sp, #28]
 8005c5a:	f806 4b01 	strb.w	r4, [r6], #1
 8005c5e:	eba6 040a 	sub.w	r4, r6, sl
 8005c62:	42a5      	cmp	r5, r4
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	f040 8116 	bne.w	8005e98 <_dtoa_r+0x6e0>
 8005c6c:	f7fa fa7e 	bl	800016c <__adddf3>
 8005c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c74:	4604      	mov	r4, r0
 8005c76:	460d      	mov	r5, r1
 8005c78:	f7fa febe 	bl	80009f8 <__aeabi_dcmpgt>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f040 80f8 	bne.w	8005e72 <_dtoa_r+0x6ba>
 8005c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 8005c8e:	b118      	cbz	r0, 8005c98 <_dtoa_r+0x4e0>
 8005c90:	f018 0f01 	tst.w	r8, #1
 8005c94:	f040 80ed 	bne.w	8005e72 <_dtoa_r+0x6ba>
 8005c98:	4649      	mov	r1, r9
 8005c9a:	4658      	mov	r0, fp
 8005c9c:	f000 fc92 	bl	80065c4 <_Bfree>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	7033      	strb	r3, [r6, #0]
 8005ca4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005ca6:	3701      	adds	r7, #1
 8005ca8:	601f      	str	r7, [r3, #0]
 8005caa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8320 	beq.w	80062f2 <_dtoa_r+0xb3a>
 8005cb2:	601e      	str	r6, [r3, #0]
 8005cb4:	e31d      	b.n	80062f2 <_dtoa_r+0xb3a>
 8005cb6:	07e2      	lsls	r2, r4, #31
 8005cb8:	d505      	bpl.n	8005cc6 <_dtoa_r+0x50e>
 8005cba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cbe:	f7fa fc0b 	bl	80004d8 <__aeabi_dmul>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	3601      	adds	r6, #1
 8005cc6:	1064      	asrs	r4, r4, #1
 8005cc8:	3508      	adds	r5, #8
 8005cca:	e73f      	b.n	8005b4c <_dtoa_r+0x394>
 8005ccc:	2602      	movs	r6, #2
 8005cce:	e742      	b.n	8005b56 <_dtoa_r+0x39e>
 8005cd0:	9c07      	ldr	r4, [sp, #28]
 8005cd2:	9704      	str	r7, [sp, #16]
 8005cd4:	e761      	b.n	8005b9a <_dtoa_r+0x3e2>
 8005cd6:	bf00      	nop
 8005cd8:	08007550 	.word	0x08007550
 8005cdc:	08007528 	.word	0x08007528
 8005ce0:	3ff00000 	.word	0x3ff00000
 8005ce4:	40240000 	.word	0x40240000
 8005ce8:	401c0000 	.word	0x401c0000
 8005cec:	40140000 	.word	0x40140000
 8005cf0:	4b70      	ldr	r3, [pc, #448]	@ (8005eb4 <_dtoa_r+0x6fc>)
 8005cf2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cfc:	4454      	add	r4, sl
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d045      	beq.n	8005d8e <_dtoa_r+0x5d6>
 8005d02:	2000      	movs	r0, #0
 8005d04:	496c      	ldr	r1, [pc, #432]	@ (8005eb8 <_dtoa_r+0x700>)
 8005d06:	f7fa fd11 	bl	800072c <__aeabi_ddiv>
 8005d0a:	4633      	mov	r3, r6
 8005d0c:	462a      	mov	r2, r5
 8005d0e:	f7fa fa2b 	bl	8000168 <__aeabi_dsub>
 8005d12:	4656      	mov	r6, sl
 8005d14:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d1c:	f7fa fe8c 	bl	8000a38 <__aeabi_d2iz>
 8005d20:	4605      	mov	r5, r0
 8005d22:	f7fa fb6f 	bl	8000404 <__aeabi_i2d>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2e:	f7fa fa1b 	bl	8000168 <__aeabi_dsub>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	3530      	adds	r5, #48	@ 0x30
 8005d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d40:	f806 5b01 	strb.w	r5, [r6], #1
 8005d44:	f7fa fe3a 	bl	80009bc <__aeabi_dcmplt>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d163      	bne.n	8005e14 <_dtoa_r+0x65c>
 8005d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d50:	2000      	movs	r0, #0
 8005d52:	495a      	ldr	r1, [pc, #360]	@ (8005ebc <_dtoa_r+0x704>)
 8005d54:	f7fa fa08 	bl	8000168 <__aeabi_dsub>
 8005d58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d5c:	f7fa fe2e 	bl	80009bc <__aeabi_dcmplt>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	f040 8087 	bne.w	8005e74 <_dtoa_r+0x6bc>
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	f43f af43 	beq.w	8005bf2 <_dtoa_r+0x43a>
 8005d6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d70:	2200      	movs	r2, #0
 8005d72:	4b53      	ldr	r3, [pc, #332]	@ (8005ec0 <_dtoa_r+0x708>)
 8005d74:	f7fa fbb0 	bl	80004d8 <__aeabi_dmul>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec0 <_dtoa_r+0x708>)
 8005d84:	f7fa fba8 	bl	80004d8 <__aeabi_dmul>
 8005d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d8c:	e7c4      	b.n	8005d18 <_dtoa_r+0x560>
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4628      	mov	r0, r5
 8005d92:	f7fa fba1 	bl	80004d8 <__aeabi_dmul>
 8005d96:	4656      	mov	r6, sl
 8005d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d9c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da2:	f7fa fe49 	bl	8000a38 <__aeabi_d2iz>
 8005da6:	4605      	mov	r5, r0
 8005da8:	f7fa fb2c 	bl	8000404 <__aeabi_i2d>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db4:	f7fa f9d8 	bl	8000168 <__aeabi_dsub>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	3530      	adds	r5, #48	@ 0x30
 8005dbe:	f806 5b01 	strb.w	r5, [r6], #1
 8005dc2:	42a6      	cmp	r6, r4
 8005dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	d124      	bne.n	8005e18 <_dtoa_r+0x660>
 8005dce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dd2:	4b39      	ldr	r3, [pc, #228]	@ (8005eb8 <_dtoa_r+0x700>)
 8005dd4:	f7fa f9ca 	bl	800016c <__adddf3>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de0:	f7fa fe0a 	bl	80009f8 <__aeabi_dcmpgt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d145      	bne.n	8005e74 <_dtoa_r+0x6bc>
 8005de8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dec:	2000      	movs	r0, #0
 8005dee:	4932      	ldr	r1, [pc, #200]	@ (8005eb8 <_dtoa_r+0x700>)
 8005df0:	f7fa f9ba 	bl	8000168 <__aeabi_dsub>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dfc:	f7fa fdde 	bl	80009bc <__aeabi_dcmplt>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f43f aef6 	beq.w	8005bf2 <_dtoa_r+0x43a>
 8005e06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e08:	1e73      	subs	r3, r6, #1
 8005e0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e10:	2b30      	cmp	r3, #48	@ 0x30
 8005e12:	d0f8      	beq.n	8005e06 <_dtoa_r+0x64e>
 8005e14:	9f04      	ldr	r7, [sp, #16]
 8005e16:	e73f      	b.n	8005c98 <_dtoa_r+0x4e0>
 8005e18:	4b29      	ldr	r3, [pc, #164]	@ (8005ec0 <_dtoa_r+0x708>)
 8005e1a:	f7fa fb5d 	bl	80004d8 <__aeabi_dmul>
 8005e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e22:	e7bc      	b.n	8005d9e <_dtoa_r+0x5e6>
 8005e24:	d10c      	bne.n	8005e40 <_dtoa_r+0x688>
 8005e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ec4 <_dtoa_r+0x70c>)
 8005e2e:	f7fa fb53 	bl	80004d8 <__aeabi_dmul>
 8005e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e36:	f7fa fdd5 	bl	80009e4 <__aeabi_dcmpge>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f000 815b 	beq.w	80060f6 <_dtoa_r+0x93e>
 8005e40:	2400      	movs	r4, #0
 8005e42:	4625      	mov	r5, r4
 8005e44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e46:	4656      	mov	r6, sl
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	9304      	str	r3, [sp, #16]
 8005e4c:	2700      	movs	r7, #0
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4658      	mov	r0, fp
 8005e52:	f000 fbb7 	bl	80065c4 <_Bfree>
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	d0dc      	beq.n	8005e14 <_dtoa_r+0x65c>
 8005e5a:	b12f      	cbz	r7, 8005e68 <_dtoa_r+0x6b0>
 8005e5c:	42af      	cmp	r7, r5
 8005e5e:	d003      	beq.n	8005e68 <_dtoa_r+0x6b0>
 8005e60:	4639      	mov	r1, r7
 8005e62:	4658      	mov	r0, fp
 8005e64:	f000 fbae 	bl	80065c4 <_Bfree>
 8005e68:	4629      	mov	r1, r5
 8005e6a:	4658      	mov	r0, fp
 8005e6c:	f000 fbaa 	bl	80065c4 <_Bfree>
 8005e70:	e7d0      	b.n	8005e14 <_dtoa_r+0x65c>
 8005e72:	9704      	str	r7, [sp, #16]
 8005e74:	4633      	mov	r3, r6
 8005e76:	461e      	mov	r6, r3
 8005e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e7c:	2a39      	cmp	r2, #57	@ 0x39
 8005e7e:	d107      	bne.n	8005e90 <_dtoa_r+0x6d8>
 8005e80:	459a      	cmp	sl, r3
 8005e82:	d1f8      	bne.n	8005e76 <_dtoa_r+0x6be>
 8005e84:	9a04      	ldr	r2, [sp, #16]
 8005e86:	3201      	adds	r2, #1
 8005e88:	9204      	str	r2, [sp, #16]
 8005e8a:	2230      	movs	r2, #48	@ 0x30
 8005e8c:	f88a 2000 	strb.w	r2, [sl]
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	3201      	adds	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e7bd      	b.n	8005e14 <_dtoa_r+0x65c>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <_dtoa_r+0x708>)
 8005e9c:	f7fa fb1c 	bl	80004d8 <__aeabi_dmul>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	f7fa fd7e 	bl	80009a8 <__aeabi_dcmpeq>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	f43f aebc 	beq.w	8005c2a <_dtoa_r+0x472>
 8005eb2:	e6f1      	b.n	8005c98 <_dtoa_r+0x4e0>
 8005eb4:	08007550 	.word	0x08007550
 8005eb8:	3fe00000 	.word	0x3fe00000
 8005ebc:	3ff00000 	.word	0x3ff00000
 8005ec0:	40240000 	.word	0x40240000
 8005ec4:	40140000 	.word	0x40140000
 8005ec8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005eca:	2a00      	cmp	r2, #0
 8005ecc:	f000 80db 	beq.w	8006086 <_dtoa_r+0x8ce>
 8005ed0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ed2:	2a01      	cmp	r2, #1
 8005ed4:	f300 80bf 	bgt.w	8006056 <_dtoa_r+0x89e>
 8005ed8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	f000 80b7 	beq.w	800604e <_dtoa_r+0x896>
 8005ee0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ee4:	4646      	mov	r6, r8
 8005ee6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eea:	2101      	movs	r1, #1
 8005eec:	441a      	add	r2, r3
 8005eee:	4658      	mov	r0, fp
 8005ef0:	4498      	add	r8, r3
 8005ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ef4:	f000 fc1a 	bl	800672c <__i2b>
 8005ef8:	4605      	mov	r5, r0
 8005efa:	b15e      	cbz	r6, 8005f14 <_dtoa_r+0x75c>
 8005efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd08      	ble.n	8005f14 <_dtoa_r+0x75c>
 8005f02:	42b3      	cmp	r3, r6
 8005f04:	bfa8      	it	ge
 8005f06:	4633      	movge	r3, r6
 8005f08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f0a:	eba8 0803 	sub.w	r8, r8, r3
 8005f0e:	1af6      	subs	r6, r6, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f16:	b1f3      	cbz	r3, 8005f56 <_dtoa_r+0x79e>
 8005f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80b7 	beq.w	800608e <_dtoa_r+0x8d6>
 8005f20:	b18c      	cbz	r4, 8005f46 <_dtoa_r+0x78e>
 8005f22:	4629      	mov	r1, r5
 8005f24:	4622      	mov	r2, r4
 8005f26:	4658      	mov	r0, fp
 8005f28:	f000 fcbe 	bl	80068a8 <__pow5mult>
 8005f2c:	464a      	mov	r2, r9
 8005f2e:	4601      	mov	r1, r0
 8005f30:	4605      	mov	r5, r0
 8005f32:	4658      	mov	r0, fp
 8005f34:	f000 fc10 	bl	8006758 <__multiply>
 8005f38:	4649      	mov	r1, r9
 8005f3a:	9004      	str	r0, [sp, #16]
 8005f3c:	4658      	mov	r0, fp
 8005f3e:	f000 fb41 	bl	80065c4 <_Bfree>
 8005f42:	9b04      	ldr	r3, [sp, #16]
 8005f44:	4699      	mov	r9, r3
 8005f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f48:	1b1a      	subs	r2, r3, r4
 8005f4a:	d004      	beq.n	8005f56 <_dtoa_r+0x79e>
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f000 fcaa 	bl	80068a8 <__pow5mult>
 8005f54:	4681      	mov	r9, r0
 8005f56:	2101      	movs	r1, #1
 8005f58:	4658      	mov	r0, fp
 8005f5a:	f000 fbe7 	bl	800672c <__i2b>
 8005f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f60:	4604      	mov	r4, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 81c9 	beq.w	80062fa <_dtoa_r+0xb42>
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	4658      	mov	r0, fp
 8005f6e:	f000 fc9b 	bl	80068a8 <__pow5mult>
 8005f72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f74:	4604      	mov	r4, r0
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	f300 808f 	bgt.w	800609a <_dtoa_r+0x8e2>
 8005f7c:	9b02      	ldr	r3, [sp, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f040 8087 	bne.w	8006092 <_dtoa_r+0x8da>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f040 8083 	bne.w	8006096 <_dtoa_r+0x8de>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f96:	0d1b      	lsrs	r3, r3, #20
 8005f98:	051b      	lsls	r3, r3, #20
 8005f9a:	b12b      	cbz	r3, 8005fa8 <_dtoa_r+0x7f0>
 8005f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 81aa 	beq.w	8006306 <_dtoa_r+0xb4e>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fb8:	6918      	ldr	r0, [r3, #16]
 8005fba:	f000 fb6b 	bl	8006694 <__hi0bits>
 8005fbe:	f1c0 0020 	rsb	r0, r0, #32
 8005fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc4:	4418      	add	r0, r3
 8005fc6:	f010 001f 	ands.w	r0, r0, #31
 8005fca:	d071      	beq.n	80060b0 <_dtoa_r+0x8f8>
 8005fcc:	f1c0 0320 	rsb	r3, r0, #32
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	dd65      	ble.n	80060a0 <_dtoa_r+0x8e8>
 8005fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd6:	f1c0 001c 	rsb	r0, r0, #28
 8005fda:	4403      	add	r3, r0
 8005fdc:	4480      	add	r8, r0
 8005fde:	4406      	add	r6, r0
 8005fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe2:	f1b8 0f00 	cmp.w	r8, #0
 8005fe6:	dd05      	ble.n	8005ff4 <_dtoa_r+0x83c>
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4642      	mov	r2, r8
 8005fec:	4658      	mov	r0, fp
 8005fee:	f000 fcb5 	bl	800695c <__lshift>
 8005ff2:	4681      	mov	r9, r0
 8005ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd05      	ble.n	8006006 <_dtoa_r+0x84e>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4658      	mov	r0, fp
 8006000:	f000 fcac 	bl	800695c <__lshift>
 8006004:	4604      	mov	r4, r0
 8006006:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d053      	beq.n	80060b4 <_dtoa_r+0x8fc>
 800600c:	4621      	mov	r1, r4
 800600e:	4648      	mov	r0, r9
 8006010:	f000 fd10 	bl	8006a34 <__mcmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	da4d      	bge.n	80060b4 <_dtoa_r+0x8fc>
 8006018:	1e7b      	subs	r3, r7, #1
 800601a:	4649      	mov	r1, r9
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	220a      	movs	r2, #10
 8006020:	2300      	movs	r3, #0
 8006022:	4658      	mov	r0, fp
 8006024:	f000 faf0 	bl	8006608 <__multadd>
 8006028:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800602a:	4681      	mov	r9, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 816c 	beq.w	800630a <_dtoa_r+0xb52>
 8006032:	2300      	movs	r3, #0
 8006034:	4629      	mov	r1, r5
 8006036:	220a      	movs	r2, #10
 8006038:	4658      	mov	r0, fp
 800603a:	f000 fae5 	bl	8006608 <__multadd>
 800603e:	9b08      	ldr	r3, [sp, #32]
 8006040:	4605      	mov	r5, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	dc61      	bgt.n	800610a <_dtoa_r+0x952>
 8006046:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006048:	2b02      	cmp	r3, #2
 800604a:	dc3b      	bgt.n	80060c4 <_dtoa_r+0x90c>
 800604c:	e05d      	b.n	800610a <_dtoa_r+0x952>
 800604e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006050:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006054:	e746      	b.n	8005ee4 <_dtoa_r+0x72c>
 8006056:	9b07      	ldr	r3, [sp, #28]
 8006058:	1e5c      	subs	r4, r3, #1
 800605a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800605c:	42a3      	cmp	r3, r4
 800605e:	bfbf      	itttt	lt
 8006060:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006062:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006064:	1ae3      	sublt	r3, r4, r3
 8006066:	18d2      	addlt	r2, r2, r3
 8006068:	bfa8      	it	ge
 800606a:	1b1c      	subge	r4, r3, r4
 800606c:	9b07      	ldr	r3, [sp, #28]
 800606e:	bfbe      	ittt	lt
 8006070:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006072:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006074:	2400      	movlt	r4, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfb5      	itete	lt
 800607a:	eba8 0603 	sublt.w	r6, r8, r3
 800607e:	4646      	movge	r6, r8
 8006080:	2300      	movlt	r3, #0
 8006082:	9b07      	ldrge	r3, [sp, #28]
 8006084:	e730      	b.n	8005ee8 <_dtoa_r+0x730>
 8006086:	4646      	mov	r6, r8
 8006088:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800608a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800608c:	e735      	b.n	8005efa <_dtoa_r+0x742>
 800608e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006090:	e75c      	b.n	8005f4c <_dtoa_r+0x794>
 8006092:	2300      	movs	r3, #0
 8006094:	e788      	b.n	8005fa8 <_dtoa_r+0x7f0>
 8006096:	9b02      	ldr	r3, [sp, #8]
 8006098:	e786      	b.n	8005fa8 <_dtoa_r+0x7f0>
 800609a:	2300      	movs	r3, #0
 800609c:	930a      	str	r3, [sp, #40]	@ 0x28
 800609e:	e788      	b.n	8005fb2 <_dtoa_r+0x7fa>
 80060a0:	d09f      	beq.n	8005fe2 <_dtoa_r+0x82a>
 80060a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060a4:	331c      	adds	r3, #28
 80060a6:	441a      	add	r2, r3
 80060a8:	4498      	add	r8, r3
 80060aa:	441e      	add	r6, r3
 80060ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80060ae:	e798      	b.n	8005fe2 <_dtoa_r+0x82a>
 80060b0:	4603      	mov	r3, r0
 80060b2:	e7f6      	b.n	80060a2 <_dtoa_r+0x8ea>
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	9704      	str	r7, [sp, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	dc20      	bgt.n	80060fe <_dtoa_r+0x946>
 80060bc:	9308      	str	r3, [sp, #32]
 80060be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	dd1e      	ble.n	8006102 <_dtoa_r+0x94a>
 80060c4:	9b08      	ldr	r3, [sp, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f47f aebc 	bne.w	8005e44 <_dtoa_r+0x68c>
 80060cc:	4621      	mov	r1, r4
 80060ce:	2205      	movs	r2, #5
 80060d0:	4658      	mov	r0, fp
 80060d2:	f000 fa99 	bl	8006608 <__multadd>
 80060d6:	4601      	mov	r1, r0
 80060d8:	4604      	mov	r4, r0
 80060da:	4648      	mov	r0, r9
 80060dc:	f000 fcaa 	bl	8006a34 <__mcmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f77f aeaf 	ble.w	8005e44 <_dtoa_r+0x68c>
 80060e6:	2331      	movs	r3, #49	@ 0x31
 80060e8:	4656      	mov	r6, sl
 80060ea:	f806 3b01 	strb.w	r3, [r6], #1
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	3301      	adds	r3, #1
 80060f2:	9304      	str	r3, [sp, #16]
 80060f4:	e6aa      	b.n	8005e4c <_dtoa_r+0x694>
 80060f6:	9c07      	ldr	r4, [sp, #28]
 80060f8:	9704      	str	r7, [sp, #16]
 80060fa:	4625      	mov	r5, r4
 80060fc:	e7f3      	b.n	80060e6 <_dtoa_r+0x92e>
 80060fe:	9b07      	ldr	r3, [sp, #28]
 8006100:	9308      	str	r3, [sp, #32]
 8006102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8104 	beq.w	8006312 <_dtoa_r+0xb5a>
 800610a:	2e00      	cmp	r6, #0
 800610c:	dd05      	ble.n	800611a <_dtoa_r+0x962>
 800610e:	4629      	mov	r1, r5
 8006110:	4632      	mov	r2, r6
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fc22 	bl	800695c <__lshift>
 8006118:	4605      	mov	r5, r0
 800611a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800611c:	2b00      	cmp	r3, #0
 800611e:	d05a      	beq.n	80061d6 <_dtoa_r+0xa1e>
 8006120:	4658      	mov	r0, fp
 8006122:	6869      	ldr	r1, [r5, #4]
 8006124:	f000 fa0e 	bl	8006544 <_Balloc>
 8006128:	4606      	mov	r6, r0
 800612a:	b928      	cbnz	r0, 8006138 <_dtoa_r+0x980>
 800612c:	4602      	mov	r2, r0
 800612e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006132:	4b83      	ldr	r3, [pc, #524]	@ (8006340 <_dtoa_r+0xb88>)
 8006134:	f7ff bb54 	b.w	80057e0 <_dtoa_r+0x28>
 8006138:	692a      	ldr	r2, [r5, #16]
 800613a:	f105 010c 	add.w	r1, r5, #12
 800613e:	3202      	adds	r2, #2
 8006140:	0092      	lsls	r2, r2, #2
 8006142:	300c      	adds	r0, #12
 8006144:	f7ff faa1 	bl	800568a <memcpy>
 8006148:	2201      	movs	r2, #1
 800614a:	4631      	mov	r1, r6
 800614c:	4658      	mov	r0, fp
 800614e:	f000 fc05 	bl	800695c <__lshift>
 8006152:	462f      	mov	r7, r5
 8006154:	4605      	mov	r5, r0
 8006156:	f10a 0301 	add.w	r3, sl, #1
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	9b08      	ldr	r3, [sp, #32]
 800615e:	4453      	add	r3, sl
 8006160:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006162:	9b02      	ldr	r3, [sp, #8]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	930a      	str	r3, [sp, #40]	@ 0x28
 800616a:	9b07      	ldr	r3, [sp, #28]
 800616c:	4621      	mov	r1, r4
 800616e:	3b01      	subs	r3, #1
 8006170:	4648      	mov	r0, r9
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	f7ff fa97 	bl	80056a6 <quorem>
 8006178:	4639      	mov	r1, r7
 800617a:	9008      	str	r0, [sp, #32]
 800617c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006180:	4648      	mov	r0, r9
 8006182:	f000 fc57 	bl	8006a34 <__mcmp>
 8006186:	462a      	mov	r2, r5
 8006188:	9009      	str	r0, [sp, #36]	@ 0x24
 800618a:	4621      	mov	r1, r4
 800618c:	4658      	mov	r0, fp
 800618e:	f000 fc6d 	bl	8006a6c <__mdiff>
 8006192:	68c2      	ldr	r2, [r0, #12]
 8006194:	4606      	mov	r6, r0
 8006196:	bb02      	cbnz	r2, 80061da <_dtoa_r+0xa22>
 8006198:	4601      	mov	r1, r0
 800619a:	4648      	mov	r0, r9
 800619c:	f000 fc4a 	bl	8006a34 <__mcmp>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4631      	mov	r1, r6
 80061a4:	4658      	mov	r0, fp
 80061a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80061a8:	f000 fa0c 	bl	80065c4 <_Bfree>
 80061ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061b0:	9e07      	ldr	r6, [sp, #28]
 80061b2:	ea43 0102 	orr.w	r1, r3, r2
 80061b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061b8:	4319      	orrs	r1, r3
 80061ba:	d110      	bne.n	80061de <_dtoa_r+0xa26>
 80061bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061c0:	d029      	beq.n	8006216 <_dtoa_r+0xa5e>
 80061c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd02      	ble.n	80061ce <_dtoa_r+0xa16>
 80061c8:	9b08      	ldr	r3, [sp, #32]
 80061ca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80061ce:	9b02      	ldr	r3, [sp, #8]
 80061d0:	f883 8000 	strb.w	r8, [r3]
 80061d4:	e63b      	b.n	8005e4e <_dtoa_r+0x696>
 80061d6:	4628      	mov	r0, r5
 80061d8:	e7bb      	b.n	8006152 <_dtoa_r+0x99a>
 80061da:	2201      	movs	r2, #1
 80061dc:	e7e1      	b.n	80061a2 <_dtoa_r+0x9ea>
 80061de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	db04      	blt.n	80061ee <_dtoa_r+0xa36>
 80061e4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80061e6:	430b      	orrs	r3, r1
 80061e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ea:	430b      	orrs	r3, r1
 80061ec:	d120      	bne.n	8006230 <_dtoa_r+0xa78>
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	dded      	ble.n	80061ce <_dtoa_r+0xa16>
 80061f2:	4649      	mov	r1, r9
 80061f4:	2201      	movs	r2, #1
 80061f6:	4658      	mov	r0, fp
 80061f8:	f000 fbb0 	bl	800695c <__lshift>
 80061fc:	4621      	mov	r1, r4
 80061fe:	4681      	mov	r9, r0
 8006200:	f000 fc18 	bl	8006a34 <__mcmp>
 8006204:	2800      	cmp	r0, #0
 8006206:	dc03      	bgt.n	8006210 <_dtoa_r+0xa58>
 8006208:	d1e1      	bne.n	80061ce <_dtoa_r+0xa16>
 800620a:	f018 0f01 	tst.w	r8, #1
 800620e:	d0de      	beq.n	80061ce <_dtoa_r+0xa16>
 8006210:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006214:	d1d8      	bne.n	80061c8 <_dtoa_r+0xa10>
 8006216:	2339      	movs	r3, #57	@ 0x39
 8006218:	9a02      	ldr	r2, [sp, #8]
 800621a:	7013      	strb	r3, [r2, #0]
 800621c:	4633      	mov	r3, r6
 800621e:	461e      	mov	r6, r3
 8006220:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006224:	3b01      	subs	r3, #1
 8006226:	2a39      	cmp	r2, #57	@ 0x39
 8006228:	d052      	beq.n	80062d0 <_dtoa_r+0xb18>
 800622a:	3201      	adds	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	e60e      	b.n	8005e4e <_dtoa_r+0x696>
 8006230:	2a00      	cmp	r2, #0
 8006232:	dd07      	ble.n	8006244 <_dtoa_r+0xa8c>
 8006234:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006238:	d0ed      	beq.n	8006216 <_dtoa_r+0xa5e>
 800623a:	9a02      	ldr	r2, [sp, #8]
 800623c:	f108 0301 	add.w	r3, r8, #1
 8006240:	7013      	strb	r3, [r2, #0]
 8006242:	e604      	b.n	8005e4e <_dtoa_r+0x696>
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	9a07      	ldr	r2, [sp, #28]
 8006248:	f803 8c01 	strb.w	r8, [r3, #-1]
 800624c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800624e:	4293      	cmp	r3, r2
 8006250:	d028      	beq.n	80062a4 <_dtoa_r+0xaec>
 8006252:	4649      	mov	r1, r9
 8006254:	2300      	movs	r3, #0
 8006256:	220a      	movs	r2, #10
 8006258:	4658      	mov	r0, fp
 800625a:	f000 f9d5 	bl	8006608 <__multadd>
 800625e:	42af      	cmp	r7, r5
 8006260:	4681      	mov	r9, r0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	f04f 020a 	mov.w	r2, #10
 800626a:	4639      	mov	r1, r7
 800626c:	4658      	mov	r0, fp
 800626e:	d107      	bne.n	8006280 <_dtoa_r+0xac8>
 8006270:	f000 f9ca 	bl	8006608 <__multadd>
 8006274:	4607      	mov	r7, r0
 8006276:	4605      	mov	r5, r0
 8006278:	9b07      	ldr	r3, [sp, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	9307      	str	r3, [sp, #28]
 800627e:	e774      	b.n	800616a <_dtoa_r+0x9b2>
 8006280:	f000 f9c2 	bl	8006608 <__multadd>
 8006284:	4629      	mov	r1, r5
 8006286:	4607      	mov	r7, r0
 8006288:	2300      	movs	r3, #0
 800628a:	220a      	movs	r2, #10
 800628c:	4658      	mov	r0, fp
 800628e:	f000 f9bb 	bl	8006608 <__multadd>
 8006292:	4605      	mov	r5, r0
 8006294:	e7f0      	b.n	8006278 <_dtoa_r+0xac0>
 8006296:	9b08      	ldr	r3, [sp, #32]
 8006298:	2700      	movs	r7, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	bfcc      	ite	gt
 800629e:	461e      	movgt	r6, r3
 80062a0:	2601      	movle	r6, #1
 80062a2:	4456      	add	r6, sl
 80062a4:	4649      	mov	r1, r9
 80062a6:	2201      	movs	r2, #1
 80062a8:	4658      	mov	r0, fp
 80062aa:	f000 fb57 	bl	800695c <__lshift>
 80062ae:	4621      	mov	r1, r4
 80062b0:	4681      	mov	r9, r0
 80062b2:	f000 fbbf 	bl	8006a34 <__mcmp>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	dcb0      	bgt.n	800621c <_dtoa_r+0xa64>
 80062ba:	d102      	bne.n	80062c2 <_dtoa_r+0xb0a>
 80062bc:	f018 0f01 	tst.w	r8, #1
 80062c0:	d1ac      	bne.n	800621c <_dtoa_r+0xa64>
 80062c2:	4633      	mov	r3, r6
 80062c4:	461e      	mov	r6, r3
 80062c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ca:	2a30      	cmp	r2, #48	@ 0x30
 80062cc:	d0fa      	beq.n	80062c4 <_dtoa_r+0xb0c>
 80062ce:	e5be      	b.n	8005e4e <_dtoa_r+0x696>
 80062d0:	459a      	cmp	sl, r3
 80062d2:	d1a4      	bne.n	800621e <_dtoa_r+0xa66>
 80062d4:	9b04      	ldr	r3, [sp, #16]
 80062d6:	3301      	adds	r3, #1
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	2331      	movs	r3, #49	@ 0x31
 80062dc:	f88a 3000 	strb.w	r3, [sl]
 80062e0:	e5b5      	b.n	8005e4e <_dtoa_r+0x696>
 80062e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006344 <_dtoa_r+0xb8c>
 80062e8:	b11b      	cbz	r3, 80062f2 <_dtoa_r+0xb3a>
 80062ea:	f10a 0308 	add.w	r3, sl, #8
 80062ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4650      	mov	r0, sl
 80062f4:	b017      	add	sp, #92	@ 0x5c
 80062f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	f77f ae3d 	ble.w	8005f7c <_dtoa_r+0x7c4>
 8006302:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006304:	930a      	str	r3, [sp, #40]	@ 0x28
 8006306:	2001      	movs	r0, #1
 8006308:	e65b      	b.n	8005fc2 <_dtoa_r+0x80a>
 800630a:	9b08      	ldr	r3, [sp, #32]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f77f aed6 	ble.w	80060be <_dtoa_r+0x906>
 8006312:	4656      	mov	r6, sl
 8006314:	4621      	mov	r1, r4
 8006316:	4648      	mov	r0, r9
 8006318:	f7ff f9c5 	bl	80056a6 <quorem>
 800631c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	f806 8b01 	strb.w	r8, [r6], #1
 8006326:	eba6 020a 	sub.w	r2, r6, sl
 800632a:	4293      	cmp	r3, r2
 800632c:	ddb3      	ble.n	8006296 <_dtoa_r+0xade>
 800632e:	4649      	mov	r1, r9
 8006330:	2300      	movs	r3, #0
 8006332:	220a      	movs	r2, #10
 8006334:	4658      	mov	r0, fp
 8006336:	f000 f967 	bl	8006608 <__multadd>
 800633a:	4681      	mov	r9, r0
 800633c:	e7ea      	b.n	8006314 <_dtoa_r+0xb5c>
 800633e:	bf00      	nop
 8006340:	080074b2 	.word	0x080074b2
 8006344:	08007436 	.word	0x08007436

08006348 <_free_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4605      	mov	r5, r0
 800634c:	2900      	cmp	r1, #0
 800634e:	d040      	beq.n	80063d2 <_free_r+0x8a>
 8006350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006354:	1f0c      	subs	r4, r1, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfb8      	it	lt
 800635a:	18e4      	addlt	r4, r4, r3
 800635c:	f000 f8e6 	bl	800652c <__malloc_lock>
 8006360:	4a1c      	ldr	r2, [pc, #112]	@ (80063d4 <_free_r+0x8c>)
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	b933      	cbnz	r3, 8006374 <_free_r+0x2c>
 8006366:	6063      	str	r3, [r4, #4]
 8006368:	6014      	str	r4, [r2, #0]
 800636a:	4628      	mov	r0, r5
 800636c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006370:	f000 b8e2 	b.w	8006538 <__malloc_unlock>
 8006374:	42a3      	cmp	r3, r4
 8006376:	d908      	bls.n	800638a <_free_r+0x42>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	1821      	adds	r1, r4, r0
 800637c:	428b      	cmp	r3, r1
 800637e:	bf01      	itttt	eq
 8006380:	6819      	ldreq	r1, [r3, #0]
 8006382:	685b      	ldreq	r3, [r3, #4]
 8006384:	1809      	addeq	r1, r1, r0
 8006386:	6021      	streq	r1, [r4, #0]
 8006388:	e7ed      	b.n	8006366 <_free_r+0x1e>
 800638a:	461a      	mov	r2, r3
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	b10b      	cbz	r3, 8006394 <_free_r+0x4c>
 8006390:	42a3      	cmp	r3, r4
 8006392:	d9fa      	bls.n	800638a <_free_r+0x42>
 8006394:	6811      	ldr	r1, [r2, #0]
 8006396:	1850      	adds	r0, r2, r1
 8006398:	42a0      	cmp	r0, r4
 800639a:	d10b      	bne.n	80063b4 <_free_r+0x6c>
 800639c:	6820      	ldr	r0, [r4, #0]
 800639e:	4401      	add	r1, r0
 80063a0:	1850      	adds	r0, r2, r1
 80063a2:	4283      	cmp	r3, r0
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	d1e0      	bne.n	800636a <_free_r+0x22>
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4408      	add	r0, r1
 80063ae:	6010      	str	r0, [r2, #0]
 80063b0:	6053      	str	r3, [r2, #4]
 80063b2:	e7da      	b.n	800636a <_free_r+0x22>
 80063b4:	d902      	bls.n	80063bc <_free_r+0x74>
 80063b6:	230c      	movs	r3, #12
 80063b8:	602b      	str	r3, [r5, #0]
 80063ba:	e7d6      	b.n	800636a <_free_r+0x22>
 80063bc:	6820      	ldr	r0, [r4, #0]
 80063be:	1821      	adds	r1, r4, r0
 80063c0:	428b      	cmp	r3, r1
 80063c2:	bf01      	itttt	eq
 80063c4:	6819      	ldreq	r1, [r3, #0]
 80063c6:	685b      	ldreq	r3, [r3, #4]
 80063c8:	1809      	addeq	r1, r1, r0
 80063ca:	6021      	streq	r1, [r4, #0]
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	6054      	str	r4, [r2, #4]
 80063d0:	e7cb      	b.n	800636a <_free_r+0x22>
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20000ae0 	.word	0x20000ae0

080063d8 <malloc>:
 80063d8:	4b02      	ldr	r3, [pc, #8]	@ (80063e4 <malloc+0xc>)
 80063da:	4601      	mov	r1, r0
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f000 b825 	b.w	800642c <_malloc_r>
 80063e2:	bf00      	nop
 80063e4:	20000018 	.word	0x20000018

080063e8 <sbrk_aligned>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006428 <sbrk_aligned+0x40>)
 80063ec:	460c      	mov	r4, r1
 80063ee:	6831      	ldr	r1, [r6, #0]
 80063f0:	4605      	mov	r5, r0
 80063f2:	b911      	cbnz	r1, 80063fa <sbrk_aligned+0x12>
 80063f4:	f000 fcce 	bl	8006d94 <_sbrk_r>
 80063f8:	6030      	str	r0, [r6, #0]
 80063fa:	4621      	mov	r1, r4
 80063fc:	4628      	mov	r0, r5
 80063fe:	f000 fcc9 	bl	8006d94 <_sbrk_r>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	d103      	bne.n	800640e <sbrk_aligned+0x26>
 8006406:	f04f 34ff 	mov.w	r4, #4294967295
 800640a:	4620      	mov	r0, r4
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	1cc4      	adds	r4, r0, #3
 8006410:	f024 0403 	bic.w	r4, r4, #3
 8006414:	42a0      	cmp	r0, r4
 8006416:	d0f8      	beq.n	800640a <sbrk_aligned+0x22>
 8006418:	1a21      	subs	r1, r4, r0
 800641a:	4628      	mov	r0, r5
 800641c:	f000 fcba 	bl	8006d94 <_sbrk_r>
 8006420:	3001      	adds	r0, #1
 8006422:	d1f2      	bne.n	800640a <sbrk_aligned+0x22>
 8006424:	e7ef      	b.n	8006406 <sbrk_aligned+0x1e>
 8006426:	bf00      	nop
 8006428:	20000adc 	.word	0x20000adc

0800642c <_malloc_r>:
 800642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006430:	1ccd      	adds	r5, r1, #3
 8006432:	f025 0503 	bic.w	r5, r5, #3
 8006436:	3508      	adds	r5, #8
 8006438:	2d0c      	cmp	r5, #12
 800643a:	bf38      	it	cc
 800643c:	250c      	movcc	r5, #12
 800643e:	2d00      	cmp	r5, #0
 8006440:	4606      	mov	r6, r0
 8006442:	db01      	blt.n	8006448 <_malloc_r+0x1c>
 8006444:	42a9      	cmp	r1, r5
 8006446:	d904      	bls.n	8006452 <_malloc_r+0x26>
 8006448:	230c      	movs	r3, #12
 800644a:	6033      	str	r3, [r6, #0]
 800644c:	2000      	movs	r0, #0
 800644e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006528 <_malloc_r+0xfc>
 8006456:	f000 f869 	bl	800652c <__malloc_lock>
 800645a:	f8d8 3000 	ldr.w	r3, [r8]
 800645e:	461c      	mov	r4, r3
 8006460:	bb44      	cbnz	r4, 80064b4 <_malloc_r+0x88>
 8006462:	4629      	mov	r1, r5
 8006464:	4630      	mov	r0, r6
 8006466:	f7ff ffbf 	bl	80063e8 <sbrk_aligned>
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	4604      	mov	r4, r0
 800646e:	d158      	bne.n	8006522 <_malloc_r+0xf6>
 8006470:	f8d8 4000 	ldr.w	r4, [r8]
 8006474:	4627      	mov	r7, r4
 8006476:	2f00      	cmp	r7, #0
 8006478:	d143      	bne.n	8006502 <_malloc_r+0xd6>
 800647a:	2c00      	cmp	r4, #0
 800647c:	d04b      	beq.n	8006516 <_malloc_r+0xea>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	4639      	mov	r1, r7
 8006482:	4630      	mov	r0, r6
 8006484:	eb04 0903 	add.w	r9, r4, r3
 8006488:	f000 fc84 	bl	8006d94 <_sbrk_r>
 800648c:	4581      	cmp	r9, r0
 800648e:	d142      	bne.n	8006516 <_malloc_r+0xea>
 8006490:	6821      	ldr	r1, [r4, #0]
 8006492:	4630      	mov	r0, r6
 8006494:	1a6d      	subs	r5, r5, r1
 8006496:	4629      	mov	r1, r5
 8006498:	f7ff ffa6 	bl	80063e8 <sbrk_aligned>
 800649c:	3001      	adds	r0, #1
 800649e:	d03a      	beq.n	8006516 <_malloc_r+0xea>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	442b      	add	r3, r5
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	f8d8 3000 	ldr.w	r3, [r8]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	bb62      	cbnz	r2, 8006508 <_malloc_r+0xdc>
 80064ae:	f8c8 7000 	str.w	r7, [r8]
 80064b2:	e00f      	b.n	80064d4 <_malloc_r+0xa8>
 80064b4:	6822      	ldr	r2, [r4, #0]
 80064b6:	1b52      	subs	r2, r2, r5
 80064b8:	d420      	bmi.n	80064fc <_malloc_r+0xd0>
 80064ba:	2a0b      	cmp	r2, #11
 80064bc:	d917      	bls.n	80064ee <_malloc_r+0xc2>
 80064be:	1961      	adds	r1, r4, r5
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	6025      	str	r5, [r4, #0]
 80064c4:	bf18      	it	ne
 80064c6:	6059      	strne	r1, [r3, #4]
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	bf08      	it	eq
 80064cc:	f8c8 1000 	streq.w	r1, [r8]
 80064d0:	5162      	str	r2, [r4, r5]
 80064d2:	604b      	str	r3, [r1, #4]
 80064d4:	4630      	mov	r0, r6
 80064d6:	f000 f82f 	bl	8006538 <__malloc_unlock>
 80064da:	f104 000b 	add.w	r0, r4, #11
 80064de:	1d23      	adds	r3, r4, #4
 80064e0:	f020 0007 	bic.w	r0, r0, #7
 80064e4:	1ac2      	subs	r2, r0, r3
 80064e6:	bf1c      	itt	ne
 80064e8:	1a1b      	subne	r3, r3, r0
 80064ea:	50a3      	strne	r3, [r4, r2]
 80064ec:	e7af      	b.n	800644e <_malloc_r+0x22>
 80064ee:	6862      	ldr	r2, [r4, #4]
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	bf0c      	ite	eq
 80064f4:	f8c8 2000 	streq.w	r2, [r8]
 80064f8:	605a      	strne	r2, [r3, #4]
 80064fa:	e7eb      	b.n	80064d4 <_malloc_r+0xa8>
 80064fc:	4623      	mov	r3, r4
 80064fe:	6864      	ldr	r4, [r4, #4]
 8006500:	e7ae      	b.n	8006460 <_malloc_r+0x34>
 8006502:	463c      	mov	r4, r7
 8006504:	687f      	ldr	r7, [r7, #4]
 8006506:	e7b6      	b.n	8006476 <_malloc_r+0x4a>
 8006508:	461a      	mov	r2, r3
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	42a3      	cmp	r3, r4
 800650e:	d1fb      	bne.n	8006508 <_malloc_r+0xdc>
 8006510:	2300      	movs	r3, #0
 8006512:	6053      	str	r3, [r2, #4]
 8006514:	e7de      	b.n	80064d4 <_malloc_r+0xa8>
 8006516:	230c      	movs	r3, #12
 8006518:	4630      	mov	r0, r6
 800651a:	6033      	str	r3, [r6, #0]
 800651c:	f000 f80c 	bl	8006538 <__malloc_unlock>
 8006520:	e794      	b.n	800644c <_malloc_r+0x20>
 8006522:	6005      	str	r5, [r0, #0]
 8006524:	e7d6      	b.n	80064d4 <_malloc_r+0xa8>
 8006526:	bf00      	nop
 8006528:	20000ae0 	.word	0x20000ae0

0800652c <__malloc_lock>:
 800652c:	4801      	ldr	r0, [pc, #4]	@ (8006534 <__malloc_lock+0x8>)
 800652e:	f7ff b89c 	b.w	800566a <__retarget_lock_acquire_recursive>
 8006532:	bf00      	nop
 8006534:	20000ad8 	.word	0x20000ad8

08006538 <__malloc_unlock>:
 8006538:	4801      	ldr	r0, [pc, #4]	@ (8006540 <__malloc_unlock+0x8>)
 800653a:	f7ff b897 	b.w	800566c <__retarget_lock_release_recursive>
 800653e:	bf00      	nop
 8006540:	20000ad8 	.word	0x20000ad8

08006544 <_Balloc>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	69c6      	ldr	r6, [r0, #28]
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	b976      	cbnz	r6, 800656c <_Balloc+0x28>
 800654e:	2010      	movs	r0, #16
 8006550:	f7ff ff42 	bl	80063d8 <malloc>
 8006554:	4602      	mov	r2, r0
 8006556:	61e0      	str	r0, [r4, #28]
 8006558:	b920      	cbnz	r0, 8006564 <_Balloc+0x20>
 800655a:	216b      	movs	r1, #107	@ 0x6b
 800655c:	4b17      	ldr	r3, [pc, #92]	@ (80065bc <_Balloc+0x78>)
 800655e:	4818      	ldr	r0, [pc, #96]	@ (80065c0 <_Balloc+0x7c>)
 8006560:	f000 fc28 	bl	8006db4 <__assert_func>
 8006564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006568:	6006      	str	r6, [r0, #0]
 800656a:	60c6      	str	r6, [r0, #12]
 800656c:	69e6      	ldr	r6, [r4, #28]
 800656e:	68f3      	ldr	r3, [r6, #12]
 8006570:	b183      	cbz	r3, 8006594 <_Balloc+0x50>
 8006572:	69e3      	ldr	r3, [r4, #28]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800657a:	b9b8      	cbnz	r0, 80065ac <_Balloc+0x68>
 800657c:	2101      	movs	r1, #1
 800657e:	fa01 f605 	lsl.w	r6, r1, r5
 8006582:	1d72      	adds	r2, r6, #5
 8006584:	4620      	mov	r0, r4
 8006586:	0092      	lsls	r2, r2, #2
 8006588:	f000 fc32 	bl	8006df0 <_calloc_r>
 800658c:	b160      	cbz	r0, 80065a8 <_Balloc+0x64>
 800658e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006592:	e00e      	b.n	80065b2 <_Balloc+0x6e>
 8006594:	2221      	movs	r2, #33	@ 0x21
 8006596:	2104      	movs	r1, #4
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fc29 	bl	8006df0 <_calloc_r>
 800659e:	69e3      	ldr	r3, [r4, #28]
 80065a0:	60f0      	str	r0, [r6, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e4      	bne.n	8006572 <_Balloc+0x2e>
 80065a8:	2000      	movs	r0, #0
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	6802      	ldr	r2, [r0, #0]
 80065ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065b2:	2300      	movs	r3, #0
 80065b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065b8:	e7f7      	b.n	80065aa <_Balloc+0x66>
 80065ba:	bf00      	nop
 80065bc:	08007443 	.word	0x08007443
 80065c0:	080074c3 	.word	0x080074c3

080065c4 <_Bfree>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	69c6      	ldr	r6, [r0, #28]
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	b976      	cbnz	r6, 80065ec <_Bfree+0x28>
 80065ce:	2010      	movs	r0, #16
 80065d0:	f7ff ff02 	bl	80063d8 <malloc>
 80065d4:	4602      	mov	r2, r0
 80065d6:	61e8      	str	r0, [r5, #28]
 80065d8:	b920      	cbnz	r0, 80065e4 <_Bfree+0x20>
 80065da:	218f      	movs	r1, #143	@ 0x8f
 80065dc:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <_Bfree+0x3c>)
 80065de:	4809      	ldr	r0, [pc, #36]	@ (8006604 <_Bfree+0x40>)
 80065e0:	f000 fbe8 	bl	8006db4 <__assert_func>
 80065e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065e8:	6006      	str	r6, [r0, #0]
 80065ea:	60c6      	str	r6, [r0, #12]
 80065ec:	b13c      	cbz	r4, 80065fe <_Bfree+0x3a>
 80065ee:	69eb      	ldr	r3, [r5, #28]
 80065f0:	6862      	ldr	r2, [r4, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f8:	6021      	str	r1, [r4, #0]
 80065fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	08007443 	.word	0x08007443
 8006604:	080074c3 	.word	0x080074c3

08006608 <__multadd>:
 8006608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660c:	4607      	mov	r7, r0
 800660e:	460c      	mov	r4, r1
 8006610:	461e      	mov	r6, r3
 8006612:	2000      	movs	r0, #0
 8006614:	690d      	ldr	r5, [r1, #16]
 8006616:	f101 0c14 	add.w	ip, r1, #20
 800661a:	f8dc 3000 	ldr.w	r3, [ip]
 800661e:	3001      	adds	r0, #1
 8006620:	b299      	uxth	r1, r3
 8006622:	fb02 6101 	mla	r1, r2, r1, r6
 8006626:	0c1e      	lsrs	r6, r3, #16
 8006628:	0c0b      	lsrs	r3, r1, #16
 800662a:	fb02 3306 	mla	r3, r2, r6, r3
 800662e:	b289      	uxth	r1, r1
 8006630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006634:	4285      	cmp	r5, r0
 8006636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800663a:	f84c 1b04 	str.w	r1, [ip], #4
 800663e:	dcec      	bgt.n	800661a <__multadd+0x12>
 8006640:	b30e      	cbz	r6, 8006686 <__multadd+0x7e>
 8006642:	68a3      	ldr	r3, [r4, #8]
 8006644:	42ab      	cmp	r3, r5
 8006646:	dc19      	bgt.n	800667c <__multadd+0x74>
 8006648:	6861      	ldr	r1, [r4, #4]
 800664a:	4638      	mov	r0, r7
 800664c:	3101      	adds	r1, #1
 800664e:	f7ff ff79 	bl	8006544 <_Balloc>
 8006652:	4680      	mov	r8, r0
 8006654:	b928      	cbnz	r0, 8006662 <__multadd+0x5a>
 8006656:	4602      	mov	r2, r0
 8006658:	21ba      	movs	r1, #186	@ 0xba
 800665a:	4b0c      	ldr	r3, [pc, #48]	@ (800668c <__multadd+0x84>)
 800665c:	480c      	ldr	r0, [pc, #48]	@ (8006690 <__multadd+0x88>)
 800665e:	f000 fba9 	bl	8006db4 <__assert_func>
 8006662:	6922      	ldr	r2, [r4, #16]
 8006664:	f104 010c 	add.w	r1, r4, #12
 8006668:	3202      	adds	r2, #2
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	300c      	adds	r0, #12
 800666e:	f7ff f80c 	bl	800568a <memcpy>
 8006672:	4621      	mov	r1, r4
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff ffa5 	bl	80065c4 <_Bfree>
 800667a:	4644      	mov	r4, r8
 800667c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006680:	3501      	adds	r5, #1
 8006682:	615e      	str	r6, [r3, #20]
 8006684:	6125      	str	r5, [r4, #16]
 8006686:	4620      	mov	r0, r4
 8006688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668c:	080074b2 	.word	0x080074b2
 8006690:	080074c3 	.word	0x080074c3

08006694 <__hi0bits>:
 8006694:	4603      	mov	r3, r0
 8006696:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800669a:	bf3a      	itte	cc
 800669c:	0403      	lslcc	r3, r0, #16
 800669e:	2010      	movcc	r0, #16
 80066a0:	2000      	movcs	r0, #0
 80066a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066a6:	bf3c      	itt	cc
 80066a8:	021b      	lslcc	r3, r3, #8
 80066aa:	3008      	addcc	r0, #8
 80066ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b0:	bf3c      	itt	cc
 80066b2:	011b      	lslcc	r3, r3, #4
 80066b4:	3004      	addcc	r0, #4
 80066b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ba:	bf3c      	itt	cc
 80066bc:	009b      	lslcc	r3, r3, #2
 80066be:	3002      	addcc	r0, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	db05      	blt.n	80066d0 <__hi0bits+0x3c>
 80066c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066c8:	f100 0001 	add.w	r0, r0, #1
 80066cc:	bf08      	it	eq
 80066ce:	2020      	moveq	r0, #32
 80066d0:	4770      	bx	lr

080066d2 <__lo0bits>:
 80066d2:	6803      	ldr	r3, [r0, #0]
 80066d4:	4602      	mov	r2, r0
 80066d6:	f013 0007 	ands.w	r0, r3, #7
 80066da:	d00b      	beq.n	80066f4 <__lo0bits+0x22>
 80066dc:	07d9      	lsls	r1, r3, #31
 80066de:	d421      	bmi.n	8006724 <__lo0bits+0x52>
 80066e0:	0798      	lsls	r0, r3, #30
 80066e2:	bf49      	itett	mi
 80066e4:	085b      	lsrmi	r3, r3, #1
 80066e6:	089b      	lsrpl	r3, r3, #2
 80066e8:	2001      	movmi	r0, #1
 80066ea:	6013      	strmi	r3, [r2, #0]
 80066ec:	bf5c      	itt	pl
 80066ee:	2002      	movpl	r0, #2
 80066f0:	6013      	strpl	r3, [r2, #0]
 80066f2:	4770      	bx	lr
 80066f4:	b299      	uxth	r1, r3
 80066f6:	b909      	cbnz	r1, 80066fc <__lo0bits+0x2a>
 80066f8:	2010      	movs	r0, #16
 80066fa:	0c1b      	lsrs	r3, r3, #16
 80066fc:	b2d9      	uxtb	r1, r3
 80066fe:	b909      	cbnz	r1, 8006704 <__lo0bits+0x32>
 8006700:	3008      	adds	r0, #8
 8006702:	0a1b      	lsrs	r3, r3, #8
 8006704:	0719      	lsls	r1, r3, #28
 8006706:	bf04      	itt	eq
 8006708:	091b      	lsreq	r3, r3, #4
 800670a:	3004      	addeq	r0, #4
 800670c:	0799      	lsls	r1, r3, #30
 800670e:	bf04      	itt	eq
 8006710:	089b      	lsreq	r3, r3, #2
 8006712:	3002      	addeq	r0, #2
 8006714:	07d9      	lsls	r1, r3, #31
 8006716:	d403      	bmi.n	8006720 <__lo0bits+0x4e>
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	f100 0001 	add.w	r0, r0, #1
 800671e:	d003      	beq.n	8006728 <__lo0bits+0x56>
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4770      	bx	lr
 8006724:	2000      	movs	r0, #0
 8006726:	4770      	bx	lr
 8006728:	2020      	movs	r0, #32
 800672a:	4770      	bx	lr

0800672c <__i2b>:
 800672c:	b510      	push	{r4, lr}
 800672e:	460c      	mov	r4, r1
 8006730:	2101      	movs	r1, #1
 8006732:	f7ff ff07 	bl	8006544 <_Balloc>
 8006736:	4602      	mov	r2, r0
 8006738:	b928      	cbnz	r0, 8006746 <__i2b+0x1a>
 800673a:	f240 1145 	movw	r1, #325	@ 0x145
 800673e:	4b04      	ldr	r3, [pc, #16]	@ (8006750 <__i2b+0x24>)
 8006740:	4804      	ldr	r0, [pc, #16]	@ (8006754 <__i2b+0x28>)
 8006742:	f000 fb37 	bl	8006db4 <__assert_func>
 8006746:	2301      	movs	r3, #1
 8006748:	6144      	str	r4, [r0, #20]
 800674a:	6103      	str	r3, [r0, #16]
 800674c:	bd10      	pop	{r4, pc}
 800674e:	bf00      	nop
 8006750:	080074b2 	.word	0x080074b2
 8006754:	080074c3 	.word	0x080074c3

08006758 <__multiply>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	4614      	mov	r4, r2
 800675e:	690a      	ldr	r2, [r1, #16]
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	460f      	mov	r7, r1
 8006764:	429a      	cmp	r2, r3
 8006766:	bfa2      	ittt	ge
 8006768:	4623      	movge	r3, r4
 800676a:	460c      	movge	r4, r1
 800676c:	461f      	movge	r7, r3
 800676e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006772:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	6861      	ldr	r1, [r4, #4]
 800677a:	eb0a 0609 	add.w	r6, sl, r9
 800677e:	42b3      	cmp	r3, r6
 8006780:	b085      	sub	sp, #20
 8006782:	bfb8      	it	lt
 8006784:	3101      	addlt	r1, #1
 8006786:	f7ff fedd 	bl	8006544 <_Balloc>
 800678a:	b930      	cbnz	r0, 800679a <__multiply+0x42>
 800678c:	4602      	mov	r2, r0
 800678e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006792:	4b43      	ldr	r3, [pc, #268]	@ (80068a0 <__multiply+0x148>)
 8006794:	4843      	ldr	r0, [pc, #268]	@ (80068a4 <__multiply+0x14c>)
 8006796:	f000 fb0d 	bl	8006db4 <__assert_func>
 800679a:	f100 0514 	add.w	r5, r0, #20
 800679e:	462b      	mov	r3, r5
 80067a0:	2200      	movs	r2, #0
 80067a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067a6:	4543      	cmp	r3, r8
 80067a8:	d321      	bcc.n	80067ee <__multiply+0x96>
 80067aa:	f107 0114 	add.w	r1, r7, #20
 80067ae:	f104 0214 	add.w	r2, r4, #20
 80067b2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067b6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067ba:	9302      	str	r3, [sp, #8]
 80067bc:	1b13      	subs	r3, r2, r4
 80067be:	3b15      	subs	r3, #21
 80067c0:	f023 0303 	bic.w	r3, r3, #3
 80067c4:	3304      	adds	r3, #4
 80067c6:	f104 0715 	add.w	r7, r4, #21
 80067ca:	42ba      	cmp	r2, r7
 80067cc:	bf38      	it	cc
 80067ce:	2304      	movcc	r3, #4
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	9b02      	ldr	r3, [sp, #8]
 80067d4:	9103      	str	r1, [sp, #12]
 80067d6:	428b      	cmp	r3, r1
 80067d8:	d80c      	bhi.n	80067f4 <__multiply+0x9c>
 80067da:	2e00      	cmp	r6, #0
 80067dc:	dd03      	ble.n	80067e6 <__multiply+0x8e>
 80067de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d05a      	beq.n	800689c <__multiply+0x144>
 80067e6:	6106      	str	r6, [r0, #16]
 80067e8:	b005      	add	sp, #20
 80067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	f843 2b04 	str.w	r2, [r3], #4
 80067f2:	e7d8      	b.n	80067a6 <__multiply+0x4e>
 80067f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80067f8:	f1ba 0f00 	cmp.w	sl, #0
 80067fc:	d023      	beq.n	8006846 <__multiply+0xee>
 80067fe:	46a9      	mov	r9, r5
 8006800:	f04f 0c00 	mov.w	ip, #0
 8006804:	f104 0e14 	add.w	lr, r4, #20
 8006808:	f85e 7b04 	ldr.w	r7, [lr], #4
 800680c:	f8d9 3000 	ldr.w	r3, [r9]
 8006810:	fa1f fb87 	uxth.w	fp, r7
 8006814:	b29b      	uxth	r3, r3
 8006816:	fb0a 330b 	mla	r3, sl, fp, r3
 800681a:	4463      	add	r3, ip
 800681c:	f8d9 c000 	ldr.w	ip, [r9]
 8006820:	0c3f      	lsrs	r7, r7, #16
 8006822:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006826:	fb0a c707 	mla	r7, sl, r7, ip
 800682a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006834:	4572      	cmp	r2, lr
 8006836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800683a:	f849 3b04 	str.w	r3, [r9], #4
 800683e:	d8e3      	bhi.n	8006808 <__multiply+0xb0>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	f845 c003 	str.w	ip, [r5, r3]
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	3104      	adds	r1, #4
 800684a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	d021      	beq.n	8006898 <__multiply+0x140>
 8006854:	46ae      	mov	lr, r5
 8006856:	f04f 0a00 	mov.w	sl, #0
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	f104 0c14 	add.w	ip, r4, #20
 8006860:	f8bc b000 	ldrh.w	fp, [ip]
 8006864:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006868:	b29b      	uxth	r3, r3
 800686a:	fb09 770b 	mla	r7, r9, fp, r7
 800686e:	4457      	add	r7, sl
 8006870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006874:	f84e 3b04 	str.w	r3, [lr], #4
 8006878:	f85c 3b04 	ldr.w	r3, [ip], #4
 800687c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006880:	f8be 3000 	ldrh.w	r3, [lr]
 8006884:	4562      	cmp	r2, ip
 8006886:	fb09 330a 	mla	r3, r9, sl, r3
 800688a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800688e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006892:	d8e5      	bhi.n	8006860 <__multiply+0x108>
 8006894:	9f01      	ldr	r7, [sp, #4]
 8006896:	51eb      	str	r3, [r5, r7]
 8006898:	3504      	adds	r5, #4
 800689a:	e79a      	b.n	80067d2 <__multiply+0x7a>
 800689c:	3e01      	subs	r6, #1
 800689e:	e79c      	b.n	80067da <__multiply+0x82>
 80068a0:	080074b2 	.word	0x080074b2
 80068a4:	080074c3 	.word	0x080074c3

080068a8 <__pow5mult>:
 80068a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	4615      	mov	r5, r2
 80068ae:	f012 0203 	ands.w	r2, r2, #3
 80068b2:	4607      	mov	r7, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	d007      	beq.n	80068c8 <__pow5mult+0x20>
 80068b8:	4c25      	ldr	r4, [pc, #148]	@ (8006950 <__pow5mult+0xa8>)
 80068ba:	3a01      	subs	r2, #1
 80068bc:	2300      	movs	r3, #0
 80068be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068c2:	f7ff fea1 	bl	8006608 <__multadd>
 80068c6:	4606      	mov	r6, r0
 80068c8:	10ad      	asrs	r5, r5, #2
 80068ca:	d03d      	beq.n	8006948 <__pow5mult+0xa0>
 80068cc:	69fc      	ldr	r4, [r7, #28]
 80068ce:	b97c      	cbnz	r4, 80068f0 <__pow5mult+0x48>
 80068d0:	2010      	movs	r0, #16
 80068d2:	f7ff fd81 	bl	80063d8 <malloc>
 80068d6:	4602      	mov	r2, r0
 80068d8:	61f8      	str	r0, [r7, #28]
 80068da:	b928      	cbnz	r0, 80068e8 <__pow5mult+0x40>
 80068dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006954 <__pow5mult+0xac>)
 80068e2:	481d      	ldr	r0, [pc, #116]	@ (8006958 <__pow5mult+0xb0>)
 80068e4:	f000 fa66 	bl	8006db4 <__assert_func>
 80068e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068ec:	6004      	str	r4, [r0, #0]
 80068ee:	60c4      	str	r4, [r0, #12]
 80068f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068f8:	b94c      	cbnz	r4, 800690e <__pow5mult+0x66>
 80068fa:	f240 2171 	movw	r1, #625	@ 0x271
 80068fe:	4638      	mov	r0, r7
 8006900:	f7ff ff14 	bl	800672c <__i2b>
 8006904:	2300      	movs	r3, #0
 8006906:	4604      	mov	r4, r0
 8006908:	f8c8 0008 	str.w	r0, [r8, #8]
 800690c:	6003      	str	r3, [r0, #0]
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	07eb      	lsls	r3, r5, #31
 8006914:	d50a      	bpl.n	800692c <__pow5mult+0x84>
 8006916:	4631      	mov	r1, r6
 8006918:	4622      	mov	r2, r4
 800691a:	4638      	mov	r0, r7
 800691c:	f7ff ff1c 	bl	8006758 <__multiply>
 8006920:	4680      	mov	r8, r0
 8006922:	4631      	mov	r1, r6
 8006924:	4638      	mov	r0, r7
 8006926:	f7ff fe4d 	bl	80065c4 <_Bfree>
 800692a:	4646      	mov	r6, r8
 800692c:	106d      	asrs	r5, r5, #1
 800692e:	d00b      	beq.n	8006948 <__pow5mult+0xa0>
 8006930:	6820      	ldr	r0, [r4, #0]
 8006932:	b938      	cbnz	r0, 8006944 <__pow5mult+0x9c>
 8006934:	4622      	mov	r2, r4
 8006936:	4621      	mov	r1, r4
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff ff0d 	bl	8006758 <__multiply>
 800693e:	6020      	str	r0, [r4, #0]
 8006940:	f8c0 9000 	str.w	r9, [r0]
 8006944:	4604      	mov	r4, r0
 8006946:	e7e4      	b.n	8006912 <__pow5mult+0x6a>
 8006948:	4630      	mov	r0, r6
 800694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694e:	bf00      	nop
 8006950:	0800751c 	.word	0x0800751c
 8006954:	08007443 	.word	0x08007443
 8006958:	080074c3 	.word	0x080074c3

0800695c <__lshift>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	460c      	mov	r4, r1
 8006962:	4607      	mov	r7, r0
 8006964:	4691      	mov	r9, r2
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6849      	ldr	r1, [r1, #4]
 800696a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006974:	f108 0601 	add.w	r6, r8, #1
 8006978:	42b3      	cmp	r3, r6
 800697a:	db0b      	blt.n	8006994 <__lshift+0x38>
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff fde1 	bl	8006544 <_Balloc>
 8006982:	4605      	mov	r5, r0
 8006984:	b948      	cbnz	r0, 800699a <__lshift+0x3e>
 8006986:	4602      	mov	r2, r0
 8006988:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800698c:	4b27      	ldr	r3, [pc, #156]	@ (8006a2c <__lshift+0xd0>)
 800698e:	4828      	ldr	r0, [pc, #160]	@ (8006a30 <__lshift+0xd4>)
 8006990:	f000 fa10 	bl	8006db4 <__assert_func>
 8006994:	3101      	adds	r1, #1
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	e7ee      	b.n	8006978 <__lshift+0x1c>
 800699a:	2300      	movs	r3, #0
 800699c:	f100 0114 	add.w	r1, r0, #20
 80069a0:	f100 0210 	add.w	r2, r0, #16
 80069a4:	4618      	mov	r0, r3
 80069a6:	4553      	cmp	r3, sl
 80069a8:	db33      	blt.n	8006a12 <__lshift+0xb6>
 80069aa:	6920      	ldr	r0, [r4, #16]
 80069ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069b0:	f104 0314 	add.w	r3, r4, #20
 80069b4:	f019 091f 	ands.w	r9, r9, #31
 80069b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069c0:	d02b      	beq.n	8006a1a <__lshift+0xbe>
 80069c2:	468a      	mov	sl, r1
 80069c4:	2200      	movs	r2, #0
 80069c6:	f1c9 0e20 	rsb	lr, r9, #32
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	fa00 f009 	lsl.w	r0, r0, r9
 80069d0:	4310      	orrs	r0, r2
 80069d2:	f84a 0b04 	str.w	r0, [sl], #4
 80069d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069da:	459c      	cmp	ip, r3
 80069dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80069e0:	d8f3      	bhi.n	80069ca <__lshift+0x6e>
 80069e2:	ebac 0304 	sub.w	r3, ip, r4
 80069e6:	3b15      	subs	r3, #21
 80069e8:	f023 0303 	bic.w	r3, r3, #3
 80069ec:	3304      	adds	r3, #4
 80069ee:	f104 0015 	add.w	r0, r4, #21
 80069f2:	4584      	cmp	ip, r0
 80069f4:	bf38      	it	cc
 80069f6:	2304      	movcc	r3, #4
 80069f8:	50ca      	str	r2, [r1, r3]
 80069fa:	b10a      	cbz	r2, 8006a00 <__lshift+0xa4>
 80069fc:	f108 0602 	add.w	r6, r8, #2
 8006a00:	3e01      	subs	r6, #1
 8006a02:	4638      	mov	r0, r7
 8006a04:	4621      	mov	r1, r4
 8006a06:	612e      	str	r6, [r5, #16]
 8006a08:	f7ff fddc 	bl	80065c4 <_Bfree>
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a12:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a16:	3301      	adds	r3, #1
 8006a18:	e7c5      	b.n	80069a6 <__lshift+0x4a>
 8006a1a:	3904      	subs	r1, #4
 8006a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a20:	459c      	cmp	ip, r3
 8006a22:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a26:	d8f9      	bhi.n	8006a1c <__lshift+0xc0>
 8006a28:	e7ea      	b.n	8006a00 <__lshift+0xa4>
 8006a2a:	bf00      	nop
 8006a2c:	080074b2 	.word	0x080074b2
 8006a30:	080074c3 	.word	0x080074c3

08006a34 <__mcmp>:
 8006a34:	4603      	mov	r3, r0
 8006a36:	690a      	ldr	r2, [r1, #16]
 8006a38:	6900      	ldr	r0, [r0, #16]
 8006a3a:	b530      	push	{r4, r5, lr}
 8006a3c:	1a80      	subs	r0, r0, r2
 8006a3e:	d10e      	bne.n	8006a5e <__mcmp+0x2a>
 8006a40:	3314      	adds	r3, #20
 8006a42:	3114      	adds	r1, #20
 8006a44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a54:	4295      	cmp	r5, r2
 8006a56:	d003      	beq.n	8006a60 <__mcmp+0x2c>
 8006a58:	d205      	bcs.n	8006a66 <__mcmp+0x32>
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	bd30      	pop	{r4, r5, pc}
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d3f3      	bcc.n	8006a4c <__mcmp+0x18>
 8006a64:	e7fb      	b.n	8006a5e <__mcmp+0x2a>
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7f9      	b.n	8006a5e <__mcmp+0x2a>
	...

08006a6c <__mdiff>:
 8006a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	4689      	mov	r9, r1
 8006a72:	4606      	mov	r6, r0
 8006a74:	4611      	mov	r1, r2
 8006a76:	4648      	mov	r0, r9
 8006a78:	4614      	mov	r4, r2
 8006a7a:	f7ff ffdb 	bl	8006a34 <__mcmp>
 8006a7e:	1e05      	subs	r5, r0, #0
 8006a80:	d112      	bne.n	8006aa8 <__mdiff+0x3c>
 8006a82:	4629      	mov	r1, r5
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff fd5d 	bl	8006544 <_Balloc>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	b928      	cbnz	r0, 8006a9a <__mdiff+0x2e>
 8006a8e:	f240 2137 	movw	r1, #567	@ 0x237
 8006a92:	4b3e      	ldr	r3, [pc, #248]	@ (8006b8c <__mdiff+0x120>)
 8006a94:	483e      	ldr	r0, [pc, #248]	@ (8006b90 <__mdiff+0x124>)
 8006a96:	f000 f98d 	bl	8006db4 <__assert_func>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	b003      	add	sp, #12
 8006aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa8:	bfbc      	itt	lt
 8006aaa:	464b      	movlt	r3, r9
 8006aac:	46a1      	movlt	r9, r4
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ab4:	bfba      	itte	lt
 8006ab6:	461c      	movlt	r4, r3
 8006ab8:	2501      	movlt	r5, #1
 8006aba:	2500      	movge	r5, #0
 8006abc:	f7ff fd42 	bl	8006544 <_Balloc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	b918      	cbnz	r0, 8006acc <__mdiff+0x60>
 8006ac4:	f240 2145 	movw	r1, #581	@ 0x245
 8006ac8:	4b30      	ldr	r3, [pc, #192]	@ (8006b8c <__mdiff+0x120>)
 8006aca:	e7e3      	b.n	8006a94 <__mdiff+0x28>
 8006acc:	f100 0b14 	add.w	fp, r0, #20
 8006ad0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ad4:	f109 0310 	add.w	r3, r9, #16
 8006ad8:	60c5      	str	r5, [r0, #12]
 8006ada:	f04f 0c00 	mov.w	ip, #0
 8006ade:	f109 0514 	add.w	r5, r9, #20
 8006ae2:	46d9      	mov	r9, fp
 8006ae4:	6926      	ldr	r6, [r4, #16]
 8006ae6:	f104 0e14 	add.w	lr, r4, #20
 8006aea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006aee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006afa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006afe:	b281      	uxth	r1, r0
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	fa1f f38a 	uxth.w	r3, sl
 8006b06:	1a5b      	subs	r3, r3, r1
 8006b08:	0c00      	lsrs	r0, r0, #16
 8006b0a:	4463      	add	r3, ip
 8006b0c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b10:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b1a:	4576      	cmp	r6, lr
 8006b1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b20:	f849 3b04 	str.w	r3, [r9], #4
 8006b24:	d8e6      	bhi.n	8006af4 <__mdiff+0x88>
 8006b26:	1b33      	subs	r3, r6, r4
 8006b28:	3b15      	subs	r3, #21
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	3415      	adds	r4, #21
 8006b30:	3304      	adds	r3, #4
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	bf38      	it	cc
 8006b36:	2304      	movcc	r3, #4
 8006b38:	441d      	add	r5, r3
 8006b3a:	445b      	add	r3, fp
 8006b3c:	461e      	mov	r6, r3
 8006b3e:	462c      	mov	r4, r5
 8006b40:	4544      	cmp	r4, r8
 8006b42:	d30e      	bcc.n	8006b62 <__mdiff+0xf6>
 8006b44:	f108 0103 	add.w	r1, r8, #3
 8006b48:	1b49      	subs	r1, r1, r5
 8006b4a:	f021 0103 	bic.w	r1, r1, #3
 8006b4e:	3d03      	subs	r5, #3
 8006b50:	45a8      	cmp	r8, r5
 8006b52:	bf38      	it	cc
 8006b54:	2100      	movcc	r1, #0
 8006b56:	440b      	add	r3, r1
 8006b58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b5c:	b199      	cbz	r1, 8006b86 <__mdiff+0x11a>
 8006b5e:	6117      	str	r7, [r2, #16]
 8006b60:	e79e      	b.n	8006aa0 <__mdiff+0x34>
 8006b62:	46e6      	mov	lr, ip
 8006b64:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b68:	fa1f fc81 	uxth.w	ip, r1
 8006b6c:	44f4      	add	ip, lr
 8006b6e:	0c08      	lsrs	r0, r1, #16
 8006b70:	4471      	add	r1, lr
 8006b72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b76:	b289      	uxth	r1, r1
 8006b78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b80:	f846 1b04 	str.w	r1, [r6], #4
 8006b84:	e7dc      	b.n	8006b40 <__mdiff+0xd4>
 8006b86:	3f01      	subs	r7, #1
 8006b88:	e7e6      	b.n	8006b58 <__mdiff+0xec>
 8006b8a:	bf00      	nop
 8006b8c:	080074b2 	.word	0x080074b2
 8006b90:	080074c3 	.word	0x080074c3

08006b94 <__d2b>:
 8006b94:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4690      	mov	r8, r2
 8006b9c:	4699      	mov	r9, r3
 8006b9e:	9e08      	ldr	r6, [sp, #32]
 8006ba0:	f7ff fcd0 	bl	8006544 <_Balloc>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	b930      	cbnz	r0, 8006bb6 <__d2b+0x22>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bae:	4b23      	ldr	r3, [pc, #140]	@ (8006c3c <__d2b+0xa8>)
 8006bb0:	4823      	ldr	r0, [pc, #140]	@ (8006c40 <__d2b+0xac>)
 8006bb2:	f000 f8ff 	bl	8006db4 <__assert_func>
 8006bb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bbe:	b10d      	cbz	r5, 8006bc4 <__d2b+0x30>
 8006bc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	f1b8 0300 	subs.w	r3, r8, #0
 8006bca:	d024      	beq.n	8006c16 <__d2b+0x82>
 8006bcc:	4668      	mov	r0, sp
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	f7ff fd7f 	bl	80066d2 <__lo0bits>
 8006bd4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bd8:	b1d8      	cbz	r0, 8006c12 <__d2b+0x7e>
 8006bda:	f1c0 0320 	rsb	r3, r0, #32
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	430b      	orrs	r3, r1
 8006be4:	40c2      	lsrs	r2, r0
 8006be6:	6163      	str	r3, [r4, #20]
 8006be8:	9201      	str	r2, [sp, #4]
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf0c      	ite	eq
 8006bf0:	2201      	moveq	r2, #1
 8006bf2:	2202      	movne	r2, #2
 8006bf4:	61a3      	str	r3, [r4, #24]
 8006bf6:	6122      	str	r2, [r4, #16]
 8006bf8:	b1ad      	cbz	r5, 8006c26 <__d2b+0x92>
 8006bfa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bfe:	4405      	add	r5, r0
 8006c00:	6035      	str	r5, [r6, #0]
 8006c02:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c08:	6018      	str	r0, [r3, #0]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	b002      	add	sp, #8
 8006c0e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c12:	6161      	str	r1, [r4, #20]
 8006c14:	e7e9      	b.n	8006bea <__d2b+0x56>
 8006c16:	a801      	add	r0, sp, #4
 8006c18:	f7ff fd5b 	bl	80066d2 <__lo0bits>
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	6163      	str	r3, [r4, #20]
 8006c22:	3020      	adds	r0, #32
 8006c24:	e7e7      	b.n	8006bf6 <__d2b+0x62>
 8006c26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c2e:	6030      	str	r0, [r6, #0]
 8006c30:	6918      	ldr	r0, [r3, #16]
 8006c32:	f7ff fd2f 	bl	8006694 <__hi0bits>
 8006c36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c3a:	e7e4      	b.n	8006c06 <__d2b+0x72>
 8006c3c:	080074b2 	.word	0x080074b2
 8006c40:	080074c3 	.word	0x080074c3

08006c44 <__sflush_r>:
 8006c44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	0716      	lsls	r6, r2, #28
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	d454      	bmi.n	8006cfc <__sflush_r+0xb8>
 8006c52:	684b      	ldr	r3, [r1, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dc02      	bgt.n	8006c5e <__sflush_r+0x1a>
 8006c58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dd48      	ble.n	8006cf0 <__sflush_r+0xac>
 8006c5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	d045      	beq.n	8006cf0 <__sflush_r+0xac>
 8006c64:	2300      	movs	r3, #0
 8006c66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c6a:	682f      	ldr	r7, [r5, #0]
 8006c6c:	6a21      	ldr	r1, [r4, #32]
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	d030      	beq.n	8006cd4 <__sflush_r+0x90>
 8006c72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	0759      	lsls	r1, r3, #29
 8006c78:	d505      	bpl.n	8006c86 <__sflush_r+0x42>
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	1ad2      	subs	r2, r2, r3
 8006c7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c80:	b10b      	cbz	r3, 8006c86 <__sflush_r+0x42>
 8006c82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c84:	1ad2      	subs	r2, r2, r3
 8006c86:	2300      	movs	r3, #0
 8006c88:	4628      	mov	r0, r5
 8006c8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c8c:	6a21      	ldr	r1, [r4, #32]
 8006c8e:	47b0      	blx	r6
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	d106      	bne.n	8006ca4 <__sflush_r+0x60>
 8006c96:	6829      	ldr	r1, [r5, #0]
 8006c98:	291d      	cmp	r1, #29
 8006c9a:	d82b      	bhi.n	8006cf4 <__sflush_r+0xb0>
 8006c9c:	4a28      	ldr	r2, [pc, #160]	@ (8006d40 <__sflush_r+0xfc>)
 8006c9e:	410a      	asrs	r2, r1
 8006ca0:	07d6      	lsls	r6, r2, #31
 8006ca2:	d427      	bmi.n	8006cf4 <__sflush_r+0xb0>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	6062      	str	r2, [r4, #4]
 8006ca8:	6922      	ldr	r2, [r4, #16]
 8006caa:	04d9      	lsls	r1, r3, #19
 8006cac:	6022      	str	r2, [r4, #0]
 8006cae:	d504      	bpl.n	8006cba <__sflush_r+0x76>
 8006cb0:	1c42      	adds	r2, r0, #1
 8006cb2:	d101      	bne.n	8006cb8 <__sflush_r+0x74>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b903      	cbnz	r3, 8006cba <__sflush_r+0x76>
 8006cb8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cbc:	602f      	str	r7, [r5, #0]
 8006cbe:	b1b9      	cbz	r1, 8006cf0 <__sflush_r+0xac>
 8006cc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	d002      	beq.n	8006cce <__sflush_r+0x8a>
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f7ff fb3d 	bl	8006348 <_free_r>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cd2:	e00d      	b.n	8006cf0 <__sflush_r+0xac>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b0      	blx	r6
 8006cda:	4602      	mov	r2, r0
 8006cdc:	1c50      	adds	r0, r2, #1
 8006cde:	d1c9      	bne.n	8006c74 <__sflush_r+0x30>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0c6      	beq.n	8006c74 <__sflush_r+0x30>
 8006ce6:	2b1d      	cmp	r3, #29
 8006ce8:	d001      	beq.n	8006cee <__sflush_r+0xaa>
 8006cea:	2b16      	cmp	r3, #22
 8006cec:	d11d      	bne.n	8006d2a <__sflush_r+0xe6>
 8006cee:	602f      	str	r7, [r5, #0]
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	e021      	b.n	8006d38 <__sflush_r+0xf4>
 8006cf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	e01a      	b.n	8006d32 <__sflush_r+0xee>
 8006cfc:	690f      	ldr	r7, [r1, #16]
 8006cfe:	2f00      	cmp	r7, #0
 8006d00:	d0f6      	beq.n	8006cf0 <__sflush_r+0xac>
 8006d02:	0793      	lsls	r3, r2, #30
 8006d04:	bf18      	it	ne
 8006d06:	2300      	movne	r3, #0
 8006d08:	680e      	ldr	r6, [r1, #0]
 8006d0a:	bf08      	it	eq
 8006d0c:	694b      	ldreq	r3, [r1, #20]
 8006d0e:	1bf6      	subs	r6, r6, r7
 8006d10:	600f      	str	r7, [r1, #0]
 8006d12:	608b      	str	r3, [r1, #8]
 8006d14:	2e00      	cmp	r6, #0
 8006d16:	ddeb      	ble.n	8006cf0 <__sflush_r+0xac>
 8006d18:	4633      	mov	r3, r6
 8006d1a:	463a      	mov	r2, r7
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	6a21      	ldr	r1, [r4, #32]
 8006d20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d24:	47e0      	blx	ip
 8006d26:	2800      	cmp	r0, #0
 8006d28:	dc07      	bgt.n	8006d3a <__sflush_r+0xf6>
 8006d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d32:	f04f 30ff 	mov.w	r0, #4294967295
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3a:	4407      	add	r7, r0
 8006d3c:	1a36      	subs	r6, r6, r0
 8006d3e:	e7e9      	b.n	8006d14 <__sflush_r+0xd0>
 8006d40:	dfbffffe 	.word	0xdfbffffe

08006d44 <_fflush_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b913      	cbnz	r3, 8006d54 <_fflush_r+0x10>
 8006d4e:	2500      	movs	r5, #0
 8006d50:	4628      	mov	r0, r5
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	b118      	cbz	r0, 8006d5e <_fflush_r+0x1a>
 8006d56:	6a03      	ldr	r3, [r0, #32]
 8006d58:	b90b      	cbnz	r3, 8006d5e <_fflush_r+0x1a>
 8006d5a:	f7fe fb8f 	bl	800547c <__sinit>
 8006d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0f3      	beq.n	8006d4e <_fflush_r+0xa>
 8006d66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d68:	07d0      	lsls	r0, r2, #31
 8006d6a:	d404      	bmi.n	8006d76 <_fflush_r+0x32>
 8006d6c:	0599      	lsls	r1, r3, #22
 8006d6e:	d402      	bmi.n	8006d76 <_fflush_r+0x32>
 8006d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d72:	f7fe fc7a 	bl	800566a <__retarget_lock_acquire_recursive>
 8006d76:	4628      	mov	r0, r5
 8006d78:	4621      	mov	r1, r4
 8006d7a:	f7ff ff63 	bl	8006c44 <__sflush_r>
 8006d7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d80:	4605      	mov	r5, r0
 8006d82:	07da      	lsls	r2, r3, #31
 8006d84:	d4e4      	bmi.n	8006d50 <_fflush_r+0xc>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	059b      	lsls	r3, r3, #22
 8006d8a:	d4e1      	bmi.n	8006d50 <_fflush_r+0xc>
 8006d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d8e:	f7fe fc6d 	bl	800566c <__retarget_lock_release_recursive>
 8006d92:	e7dd      	b.n	8006d50 <_fflush_r+0xc>

08006d94 <_sbrk_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	2300      	movs	r3, #0
 8006d98:	4d05      	ldr	r5, [pc, #20]	@ (8006db0 <_sbrk_r+0x1c>)
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7fa ffaa 	bl	8001cf8 <_sbrk>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_sbrk_r+0x1a>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_sbrk_r+0x1a>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20000ad4 	.word	0x20000ad4

08006db4 <__assert_func>:
 8006db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006db6:	4614      	mov	r4, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b09      	ldr	r3, [pc, #36]	@ (8006de0 <__assert_func+0x2c>)
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68d8      	ldr	r0, [r3, #12]
 8006dc2:	b954      	cbnz	r4, 8006dda <__assert_func+0x26>
 8006dc4:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <__assert_func+0x30>)
 8006dc6:	461c      	mov	r4, r3
 8006dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dcc:	9100      	str	r1, [sp, #0]
 8006dce:	462b      	mov	r3, r5
 8006dd0:	4905      	ldr	r1, [pc, #20]	@ (8006de8 <__assert_func+0x34>)
 8006dd2:	f000 f841 	bl	8006e58 <fiprintf>
 8006dd6:	f000 f851 	bl	8006e7c <abort>
 8006dda:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__assert_func+0x38>)
 8006ddc:	e7f4      	b.n	8006dc8 <__assert_func+0x14>
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018
 8006de4:	0800765d 	.word	0x0800765d
 8006de8:	0800762f 	.word	0x0800762f
 8006dec:	08007622 	.word	0x08007622

08006df0 <_calloc_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	fba1 5402 	umull	r5, r4, r1, r2
 8006df6:	b93c      	cbnz	r4, 8006e08 <_calloc_r+0x18>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7ff fb17 	bl	800642c <_malloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	b928      	cbnz	r0, 8006e0e <_calloc_r+0x1e>
 8006e02:	2600      	movs	r6, #0
 8006e04:	4630      	mov	r0, r6
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	220c      	movs	r2, #12
 8006e0a:	6002      	str	r2, [r0, #0]
 8006e0c:	e7f9      	b.n	8006e02 <_calloc_r+0x12>
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7fe fbac 	bl	800556e <memset>
 8006e16:	e7f5      	b.n	8006e04 <_calloc_r+0x14>

08006e18 <__ascii_mbtowc>:
 8006e18:	b082      	sub	sp, #8
 8006e1a:	b901      	cbnz	r1, 8006e1e <__ascii_mbtowc+0x6>
 8006e1c:	a901      	add	r1, sp, #4
 8006e1e:	b142      	cbz	r2, 8006e32 <__ascii_mbtowc+0x1a>
 8006e20:	b14b      	cbz	r3, 8006e36 <__ascii_mbtowc+0x1e>
 8006e22:	7813      	ldrb	r3, [r2, #0]
 8006e24:	600b      	str	r3, [r1, #0]
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	1e10      	subs	r0, r2, #0
 8006e2a:	bf18      	it	ne
 8006e2c:	2001      	movne	r0, #1
 8006e2e:	b002      	add	sp, #8
 8006e30:	4770      	bx	lr
 8006e32:	4610      	mov	r0, r2
 8006e34:	e7fb      	b.n	8006e2e <__ascii_mbtowc+0x16>
 8006e36:	f06f 0001 	mvn.w	r0, #1
 8006e3a:	e7f8      	b.n	8006e2e <__ascii_mbtowc+0x16>

08006e3c <__ascii_wctomb>:
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4608      	mov	r0, r1
 8006e40:	b141      	cbz	r1, 8006e54 <__ascii_wctomb+0x18>
 8006e42:	2aff      	cmp	r2, #255	@ 0xff
 8006e44:	d904      	bls.n	8006e50 <__ascii_wctomb+0x14>
 8006e46:	228a      	movs	r2, #138	@ 0x8a
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	4770      	bx	lr
 8006e50:	2001      	movs	r0, #1
 8006e52:	700a      	strb	r2, [r1, #0]
 8006e54:	4770      	bx	lr
	...

08006e58 <fiprintf>:
 8006e58:	b40e      	push	{r1, r2, r3}
 8006e5a:	b503      	push	{r0, r1, lr}
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	4805      	ldr	r0, [pc, #20]	@ (8006e78 <fiprintf+0x20>)
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	f000 f835 	bl	8006ed8 <_vfiprintf_r>
 8006e6e:	b002      	add	sp, #8
 8006e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e74:	b003      	add	sp, #12
 8006e76:	4770      	bx	lr
 8006e78:	20000018 	.word	0x20000018

08006e7c <abort>:
 8006e7c:	2006      	movs	r0, #6
 8006e7e:	b508      	push	{r3, lr}
 8006e80:	f000 f9fe 	bl	8007280 <raise>
 8006e84:	2001      	movs	r0, #1
 8006e86:	f7fa fec2 	bl	8001c0e <_exit>

08006e8a <__sfputc_r>:
 8006e8a:	6893      	ldr	r3, [r2, #8]
 8006e8c:	b410      	push	{r4}
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	6093      	str	r3, [r2, #8]
 8006e94:	da07      	bge.n	8006ea6 <__sfputc_r+0x1c>
 8006e96:	6994      	ldr	r4, [r2, #24]
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	db01      	blt.n	8006ea0 <__sfputc_r+0x16>
 8006e9c:	290a      	cmp	r1, #10
 8006e9e:	d102      	bne.n	8006ea6 <__sfputc_r+0x1c>
 8006ea0:	bc10      	pop	{r4}
 8006ea2:	f000 b931 	b.w	8007108 <__swbuf_r>
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	1c58      	adds	r0, r3, #1
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	7019      	strb	r1, [r3, #0]
 8006eae:	4608      	mov	r0, r1
 8006eb0:	bc10      	pop	{r4}
 8006eb2:	4770      	bx	lr

08006eb4 <__sfputs_r>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460f      	mov	r7, r1
 8006eba:	4614      	mov	r4, r2
 8006ebc:	18d5      	adds	r5, r2, r3
 8006ebe:	42ac      	cmp	r4, r5
 8006ec0:	d101      	bne.n	8006ec6 <__sfputs_r+0x12>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e007      	b.n	8006ed6 <__sfputs_r+0x22>
 8006ec6:	463a      	mov	r2, r7
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ece:	f7ff ffdc 	bl	8006e8a <__sfputc_r>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d1f3      	bne.n	8006ebe <__sfputs_r+0xa>
 8006ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ed8 <_vfiprintf_r>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	460d      	mov	r5, r1
 8006ede:	4614      	mov	r4, r2
 8006ee0:	4698      	mov	r8, r3
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	b09d      	sub	sp, #116	@ 0x74
 8006ee6:	b118      	cbz	r0, 8006ef0 <_vfiprintf_r+0x18>
 8006ee8:	6a03      	ldr	r3, [r0, #32]
 8006eea:	b90b      	cbnz	r3, 8006ef0 <_vfiprintf_r+0x18>
 8006eec:	f7fe fac6 	bl	800547c <__sinit>
 8006ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ef2:	07d9      	lsls	r1, r3, #31
 8006ef4:	d405      	bmi.n	8006f02 <_vfiprintf_r+0x2a>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	059a      	lsls	r2, r3, #22
 8006efa:	d402      	bmi.n	8006f02 <_vfiprintf_r+0x2a>
 8006efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006efe:	f7fe fbb4 	bl	800566a <__retarget_lock_acquire_recursive>
 8006f02:	89ab      	ldrh	r3, [r5, #12]
 8006f04:	071b      	lsls	r3, r3, #28
 8006f06:	d501      	bpl.n	8006f0c <_vfiprintf_r+0x34>
 8006f08:	692b      	ldr	r3, [r5, #16]
 8006f0a:	b99b      	cbnz	r3, 8006f34 <_vfiprintf_r+0x5c>
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 f938 	bl	8007184 <__swsetup_r>
 8006f14:	b170      	cbz	r0, 8006f34 <_vfiprintf_r+0x5c>
 8006f16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f18:	07dc      	lsls	r4, r3, #31
 8006f1a:	d504      	bpl.n	8006f26 <_vfiprintf_r+0x4e>
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	b01d      	add	sp, #116	@ 0x74
 8006f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f26:	89ab      	ldrh	r3, [r5, #12]
 8006f28:	0598      	lsls	r0, r3, #22
 8006f2a:	d4f7      	bmi.n	8006f1c <_vfiprintf_r+0x44>
 8006f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f2e:	f7fe fb9d 	bl	800566c <__retarget_lock_release_recursive>
 8006f32:	e7f3      	b.n	8006f1c <_vfiprintf_r+0x44>
 8006f34:	2300      	movs	r3, #0
 8006f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f38:	2320      	movs	r3, #32
 8006f3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f3e:	2330      	movs	r3, #48	@ 0x30
 8006f40:	f04f 0901 	mov.w	r9, #1
 8006f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f48:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80070f4 <_vfiprintf_r+0x21c>
 8006f4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f50:	4623      	mov	r3, r4
 8006f52:	469a      	mov	sl, r3
 8006f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f58:	b10a      	cbz	r2, 8006f5e <_vfiprintf_r+0x86>
 8006f5a:	2a25      	cmp	r2, #37	@ 0x25
 8006f5c:	d1f9      	bne.n	8006f52 <_vfiprintf_r+0x7a>
 8006f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f62:	d00b      	beq.n	8006f7c <_vfiprintf_r+0xa4>
 8006f64:	465b      	mov	r3, fp
 8006f66:	4622      	mov	r2, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7ff ffa2 	bl	8006eb4 <__sfputs_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	f000 80a7 	beq.w	80070c4 <_vfiprintf_r+0x1ec>
 8006f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f78:	445a      	add	r2, fp
 8006f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 809f 	beq.w	80070c4 <_vfiprintf_r+0x1ec>
 8006f86:	2300      	movs	r3, #0
 8006f88:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f90:	f10a 0a01 	add.w	sl, sl, #1
 8006f94:	9304      	str	r3, [sp, #16]
 8006f96:	9307      	str	r3, [sp, #28]
 8006f98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f9e:	4654      	mov	r4, sl
 8006fa0:	2205      	movs	r2, #5
 8006fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa6:	4853      	ldr	r0, [pc, #332]	@ (80070f4 <_vfiprintf_r+0x21c>)
 8006fa8:	f7fe fb61 	bl	800566e <memchr>
 8006fac:	9a04      	ldr	r2, [sp, #16]
 8006fae:	b9d8      	cbnz	r0, 8006fe8 <_vfiprintf_r+0x110>
 8006fb0:	06d1      	lsls	r1, r2, #27
 8006fb2:	bf44      	itt	mi
 8006fb4:	2320      	movmi	r3, #32
 8006fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fba:	0713      	lsls	r3, r2, #28
 8006fbc:	bf44      	itt	mi
 8006fbe:	232b      	movmi	r3, #43	@ 0x2b
 8006fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fca:	d015      	beq.n	8006ff8 <_vfiprintf_r+0x120>
 8006fcc:	4654      	mov	r4, sl
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f04f 0c0a 	mov.w	ip, #10
 8006fd4:	9a07      	ldr	r2, [sp, #28]
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fdc:	3b30      	subs	r3, #48	@ 0x30
 8006fde:	2b09      	cmp	r3, #9
 8006fe0:	d94b      	bls.n	800707a <_vfiprintf_r+0x1a2>
 8006fe2:	b1b0      	cbz	r0, 8007012 <_vfiprintf_r+0x13a>
 8006fe4:	9207      	str	r2, [sp, #28]
 8006fe6:	e014      	b.n	8007012 <_vfiprintf_r+0x13a>
 8006fe8:	eba0 0308 	sub.w	r3, r0, r8
 8006fec:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	46a2      	mov	sl, r4
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	e7d2      	b.n	8006f9e <_vfiprintf_r+0xc6>
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	1d19      	adds	r1, r3, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	9103      	str	r1, [sp, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfbb      	ittet	lt
 8007004:	425b      	neglt	r3, r3
 8007006:	f042 0202 	orrlt.w	r2, r2, #2
 800700a:	9307      	strge	r3, [sp, #28]
 800700c:	9307      	strlt	r3, [sp, #28]
 800700e:	bfb8      	it	lt
 8007010:	9204      	strlt	r2, [sp, #16]
 8007012:	7823      	ldrb	r3, [r4, #0]
 8007014:	2b2e      	cmp	r3, #46	@ 0x2e
 8007016:	d10a      	bne.n	800702e <_vfiprintf_r+0x156>
 8007018:	7863      	ldrb	r3, [r4, #1]
 800701a:	2b2a      	cmp	r3, #42	@ 0x2a
 800701c:	d132      	bne.n	8007084 <_vfiprintf_r+0x1ac>
 800701e:	9b03      	ldr	r3, [sp, #12]
 8007020:	3402      	adds	r4, #2
 8007022:	1d1a      	adds	r2, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	9203      	str	r2, [sp, #12]
 8007028:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80070f8 <_vfiprintf_r+0x220>
 8007032:	2203      	movs	r2, #3
 8007034:	4650      	mov	r0, sl
 8007036:	7821      	ldrb	r1, [r4, #0]
 8007038:	f7fe fb19 	bl	800566e <memchr>
 800703c:	b138      	cbz	r0, 800704e <_vfiprintf_r+0x176>
 800703e:	2240      	movs	r2, #64	@ 0x40
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	eba0 000a 	sub.w	r0, r0, sl
 8007046:	4082      	lsls	r2, r0
 8007048:	4313      	orrs	r3, r2
 800704a:	3401      	adds	r4, #1
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007052:	2206      	movs	r2, #6
 8007054:	4829      	ldr	r0, [pc, #164]	@ (80070fc <_vfiprintf_r+0x224>)
 8007056:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800705a:	f7fe fb08 	bl	800566e <memchr>
 800705e:	2800      	cmp	r0, #0
 8007060:	d03f      	beq.n	80070e2 <_vfiprintf_r+0x20a>
 8007062:	4b27      	ldr	r3, [pc, #156]	@ (8007100 <_vfiprintf_r+0x228>)
 8007064:	bb1b      	cbnz	r3, 80070ae <_vfiprintf_r+0x1d6>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	3307      	adds	r3, #7
 800706a:	f023 0307 	bic.w	r3, r3, #7
 800706e:	3308      	adds	r3, #8
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007074:	443b      	add	r3, r7
 8007076:	9309      	str	r3, [sp, #36]	@ 0x24
 8007078:	e76a      	b.n	8006f50 <_vfiprintf_r+0x78>
 800707a:	460c      	mov	r4, r1
 800707c:	2001      	movs	r0, #1
 800707e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007082:	e7a8      	b.n	8006fd6 <_vfiprintf_r+0xfe>
 8007084:	2300      	movs	r3, #0
 8007086:	f04f 0c0a 	mov.w	ip, #10
 800708a:	4619      	mov	r1, r3
 800708c:	3401      	adds	r4, #1
 800708e:	9305      	str	r3, [sp, #20]
 8007090:	4620      	mov	r0, r4
 8007092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007096:	3a30      	subs	r2, #48	@ 0x30
 8007098:	2a09      	cmp	r2, #9
 800709a:	d903      	bls.n	80070a4 <_vfiprintf_r+0x1cc>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0c6      	beq.n	800702e <_vfiprintf_r+0x156>
 80070a0:	9105      	str	r1, [sp, #20]
 80070a2:	e7c4      	b.n	800702e <_vfiprintf_r+0x156>
 80070a4:	4604      	mov	r4, r0
 80070a6:	2301      	movs	r3, #1
 80070a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ac:	e7f0      	b.n	8007090 <_vfiprintf_r+0x1b8>
 80070ae:	ab03      	add	r3, sp, #12
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	462a      	mov	r2, r5
 80070b4:	4630      	mov	r0, r6
 80070b6:	4b13      	ldr	r3, [pc, #76]	@ (8007104 <_vfiprintf_r+0x22c>)
 80070b8:	a904      	add	r1, sp, #16
 80070ba:	f7fd fd95 	bl	8004be8 <_printf_float>
 80070be:	4607      	mov	r7, r0
 80070c0:	1c78      	adds	r0, r7, #1
 80070c2:	d1d6      	bne.n	8007072 <_vfiprintf_r+0x19a>
 80070c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070c6:	07d9      	lsls	r1, r3, #31
 80070c8:	d405      	bmi.n	80070d6 <_vfiprintf_r+0x1fe>
 80070ca:	89ab      	ldrh	r3, [r5, #12]
 80070cc:	059a      	lsls	r2, r3, #22
 80070ce:	d402      	bmi.n	80070d6 <_vfiprintf_r+0x1fe>
 80070d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070d2:	f7fe facb 	bl	800566c <__retarget_lock_release_recursive>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	065b      	lsls	r3, r3, #25
 80070da:	f53f af1f 	bmi.w	8006f1c <_vfiprintf_r+0x44>
 80070de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e0:	e71e      	b.n	8006f20 <_vfiprintf_r+0x48>
 80070e2:	ab03      	add	r3, sp, #12
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	462a      	mov	r2, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <_vfiprintf_r+0x22c>)
 80070ec:	a904      	add	r1, sp, #16
 80070ee:	f7fe f819 	bl	8005124 <_printf_i>
 80070f2:	e7e4      	b.n	80070be <_vfiprintf_r+0x1e6>
 80070f4:	0800775f 	.word	0x0800775f
 80070f8:	08007765 	.word	0x08007765
 80070fc:	08007769 	.word	0x08007769
 8007100:	08004be9 	.word	0x08004be9
 8007104:	08006eb5 	.word	0x08006eb5

08007108 <__swbuf_r>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	460e      	mov	r6, r1
 800710c:	4614      	mov	r4, r2
 800710e:	4605      	mov	r5, r0
 8007110:	b118      	cbz	r0, 800711a <__swbuf_r+0x12>
 8007112:	6a03      	ldr	r3, [r0, #32]
 8007114:	b90b      	cbnz	r3, 800711a <__swbuf_r+0x12>
 8007116:	f7fe f9b1 	bl	800547c <__sinit>
 800711a:	69a3      	ldr	r3, [r4, #24]
 800711c:	60a3      	str	r3, [r4, #8]
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	071a      	lsls	r2, r3, #28
 8007122:	d501      	bpl.n	8007128 <__swbuf_r+0x20>
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	b943      	cbnz	r3, 800713a <__swbuf_r+0x32>
 8007128:	4621      	mov	r1, r4
 800712a:	4628      	mov	r0, r5
 800712c:	f000 f82a 	bl	8007184 <__swsetup_r>
 8007130:	b118      	cbz	r0, 800713a <__swbuf_r+0x32>
 8007132:	f04f 37ff 	mov.w	r7, #4294967295
 8007136:	4638      	mov	r0, r7
 8007138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	6922      	ldr	r2, [r4, #16]
 800713e:	b2f6      	uxtb	r6, r6
 8007140:	1a98      	subs	r0, r3, r2
 8007142:	6963      	ldr	r3, [r4, #20]
 8007144:	4637      	mov	r7, r6
 8007146:	4283      	cmp	r3, r0
 8007148:	dc05      	bgt.n	8007156 <__swbuf_r+0x4e>
 800714a:	4621      	mov	r1, r4
 800714c:	4628      	mov	r0, r5
 800714e:	f7ff fdf9 	bl	8006d44 <_fflush_r>
 8007152:	2800      	cmp	r0, #0
 8007154:	d1ed      	bne.n	8007132 <__swbuf_r+0x2a>
 8007156:	68a3      	ldr	r3, [r4, #8]
 8007158:	3b01      	subs	r3, #1
 800715a:	60a3      	str	r3, [r4, #8]
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	6022      	str	r2, [r4, #0]
 8007162:	701e      	strb	r6, [r3, #0]
 8007164:	6962      	ldr	r2, [r4, #20]
 8007166:	1c43      	adds	r3, r0, #1
 8007168:	429a      	cmp	r2, r3
 800716a:	d004      	beq.n	8007176 <__swbuf_r+0x6e>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	07db      	lsls	r3, r3, #31
 8007170:	d5e1      	bpl.n	8007136 <__swbuf_r+0x2e>
 8007172:	2e0a      	cmp	r6, #10
 8007174:	d1df      	bne.n	8007136 <__swbuf_r+0x2e>
 8007176:	4621      	mov	r1, r4
 8007178:	4628      	mov	r0, r5
 800717a:	f7ff fde3 	bl	8006d44 <_fflush_r>
 800717e:	2800      	cmp	r0, #0
 8007180:	d0d9      	beq.n	8007136 <__swbuf_r+0x2e>
 8007182:	e7d6      	b.n	8007132 <__swbuf_r+0x2a>

08007184 <__swsetup_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4b29      	ldr	r3, [pc, #164]	@ (800722c <__swsetup_r+0xa8>)
 8007188:	4605      	mov	r5, r0
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	460c      	mov	r4, r1
 800718e:	b118      	cbz	r0, 8007198 <__swsetup_r+0x14>
 8007190:	6a03      	ldr	r3, [r0, #32]
 8007192:	b90b      	cbnz	r3, 8007198 <__swsetup_r+0x14>
 8007194:	f7fe f972 	bl	800547c <__sinit>
 8007198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719c:	0719      	lsls	r1, r3, #28
 800719e:	d422      	bmi.n	80071e6 <__swsetup_r+0x62>
 80071a0:	06da      	lsls	r2, r3, #27
 80071a2:	d407      	bmi.n	80071b4 <__swsetup_r+0x30>
 80071a4:	2209      	movs	r2, #9
 80071a6:	602a      	str	r2, [r5, #0]
 80071a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	e033      	b.n	800721c <__swsetup_r+0x98>
 80071b4:	0758      	lsls	r0, r3, #29
 80071b6:	d512      	bpl.n	80071de <__swsetup_r+0x5a>
 80071b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071ba:	b141      	cbz	r1, 80071ce <__swsetup_r+0x4a>
 80071bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071c0:	4299      	cmp	r1, r3
 80071c2:	d002      	beq.n	80071ca <__swsetup_r+0x46>
 80071c4:	4628      	mov	r0, r5
 80071c6:	f7ff f8bf 	bl	8006348 <_free_r>
 80071ca:	2300      	movs	r3, #0
 80071cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	2300      	movs	r3, #0
 80071d8:	6063      	str	r3, [r4, #4]
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	f043 0308 	orr.w	r3, r3, #8
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	b94b      	cbnz	r3, 80071fe <__swsetup_r+0x7a>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f4:	d003      	beq.n	80071fe <__swsetup_r+0x7a>
 80071f6:	4621      	mov	r1, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 f882 	bl	8007302 <__smakebuf_r>
 80071fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007202:	f013 0201 	ands.w	r2, r3, #1
 8007206:	d00a      	beq.n	800721e <__swsetup_r+0x9a>
 8007208:	2200      	movs	r2, #0
 800720a:	60a2      	str	r2, [r4, #8]
 800720c:	6962      	ldr	r2, [r4, #20]
 800720e:	4252      	negs	r2, r2
 8007210:	61a2      	str	r2, [r4, #24]
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	b942      	cbnz	r2, 8007228 <__swsetup_r+0xa4>
 8007216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800721a:	d1c5      	bne.n	80071a8 <__swsetup_r+0x24>
 800721c:	bd38      	pop	{r3, r4, r5, pc}
 800721e:	0799      	lsls	r1, r3, #30
 8007220:	bf58      	it	pl
 8007222:	6962      	ldrpl	r2, [r4, #20]
 8007224:	60a2      	str	r2, [r4, #8]
 8007226:	e7f4      	b.n	8007212 <__swsetup_r+0x8e>
 8007228:	2000      	movs	r0, #0
 800722a:	e7f7      	b.n	800721c <__swsetup_r+0x98>
 800722c:	20000018 	.word	0x20000018

08007230 <_raise_r>:
 8007230:	291f      	cmp	r1, #31
 8007232:	b538      	push	{r3, r4, r5, lr}
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
 8007238:	d904      	bls.n	8007244 <_raise_r+0x14>
 800723a:	2316      	movs	r3, #22
 800723c:	6003      	str	r3, [r0, #0]
 800723e:	f04f 30ff 	mov.w	r0, #4294967295
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007246:	b112      	cbz	r2, 800724e <_raise_r+0x1e>
 8007248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800724c:	b94b      	cbnz	r3, 8007262 <_raise_r+0x32>
 800724e:	4628      	mov	r0, r5
 8007250:	f000 f830 	bl	80072b4 <_getpid_r>
 8007254:	4622      	mov	r2, r4
 8007256:	4601      	mov	r1, r0
 8007258:	4628      	mov	r0, r5
 800725a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800725e:	f000 b817 	b.w	8007290 <_kill_r>
 8007262:	2b01      	cmp	r3, #1
 8007264:	d00a      	beq.n	800727c <_raise_r+0x4c>
 8007266:	1c59      	adds	r1, r3, #1
 8007268:	d103      	bne.n	8007272 <_raise_r+0x42>
 800726a:	2316      	movs	r3, #22
 800726c:	6003      	str	r3, [r0, #0]
 800726e:	2001      	movs	r0, #1
 8007270:	e7e7      	b.n	8007242 <_raise_r+0x12>
 8007272:	2100      	movs	r1, #0
 8007274:	4620      	mov	r0, r4
 8007276:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800727a:	4798      	blx	r3
 800727c:	2000      	movs	r0, #0
 800727e:	e7e0      	b.n	8007242 <_raise_r+0x12>

08007280 <raise>:
 8007280:	4b02      	ldr	r3, [pc, #8]	@ (800728c <raise+0xc>)
 8007282:	4601      	mov	r1, r0
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	f7ff bfd3 	b.w	8007230 <_raise_r>
 800728a:	bf00      	nop
 800728c:	20000018 	.word	0x20000018

08007290 <_kill_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	2300      	movs	r3, #0
 8007294:	4d06      	ldr	r5, [pc, #24]	@ (80072b0 <_kill_r+0x20>)
 8007296:	4604      	mov	r4, r0
 8007298:	4608      	mov	r0, r1
 800729a:	4611      	mov	r1, r2
 800729c:	602b      	str	r3, [r5, #0]
 800729e:	f7fa fca6 	bl	8001bee <_kill>
 80072a2:	1c43      	adds	r3, r0, #1
 80072a4:	d102      	bne.n	80072ac <_kill_r+0x1c>
 80072a6:	682b      	ldr	r3, [r5, #0]
 80072a8:	b103      	cbz	r3, 80072ac <_kill_r+0x1c>
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	bd38      	pop	{r3, r4, r5, pc}
 80072ae:	bf00      	nop
 80072b0:	20000ad4 	.word	0x20000ad4

080072b4 <_getpid_r>:
 80072b4:	f7fa bc94 	b.w	8001be0 <_getpid>

080072b8 <__swhatbuf_r>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	460c      	mov	r4, r1
 80072bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c0:	4615      	mov	r5, r2
 80072c2:	2900      	cmp	r1, #0
 80072c4:	461e      	mov	r6, r3
 80072c6:	b096      	sub	sp, #88	@ 0x58
 80072c8:	da0c      	bge.n	80072e4 <__swhatbuf_r+0x2c>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	2100      	movs	r1, #0
 80072ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072d2:	bf14      	ite	ne
 80072d4:	2340      	movne	r3, #64	@ 0x40
 80072d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072da:	2000      	movs	r0, #0
 80072dc:	6031      	str	r1, [r6, #0]
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	b016      	add	sp, #88	@ 0x58
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	466a      	mov	r2, sp
 80072e6:	f000 f849 	bl	800737c <_fstat_r>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	dbed      	blt.n	80072ca <__swhatbuf_r+0x12>
 80072ee:	9901      	ldr	r1, [sp, #4]
 80072f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072f8:	4259      	negs	r1, r3
 80072fa:	4159      	adcs	r1, r3
 80072fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007300:	e7eb      	b.n	80072da <__swhatbuf_r+0x22>

08007302 <__smakebuf_r>:
 8007302:	898b      	ldrh	r3, [r1, #12]
 8007304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007306:	079d      	lsls	r5, r3, #30
 8007308:	4606      	mov	r6, r0
 800730a:	460c      	mov	r4, r1
 800730c:	d507      	bpl.n	800731e <__smakebuf_r+0x1c>
 800730e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	2301      	movs	r3, #1
 8007318:	6163      	str	r3, [r4, #20]
 800731a:	b003      	add	sp, #12
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731e:	466a      	mov	r2, sp
 8007320:	ab01      	add	r3, sp, #4
 8007322:	f7ff ffc9 	bl	80072b8 <__swhatbuf_r>
 8007326:	9f00      	ldr	r7, [sp, #0]
 8007328:	4605      	mov	r5, r0
 800732a:	4639      	mov	r1, r7
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff f87d 	bl	800642c <_malloc_r>
 8007332:	b948      	cbnz	r0, 8007348 <__smakebuf_r+0x46>
 8007334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007338:	059a      	lsls	r2, r3, #22
 800733a:	d4ee      	bmi.n	800731a <__smakebuf_r+0x18>
 800733c:	f023 0303 	bic.w	r3, r3, #3
 8007340:	f043 0302 	orr.w	r3, r3, #2
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	e7e2      	b.n	800730e <__smakebuf_r+0xc>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800734e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	b15b      	cbz	r3, 8007372 <__smakebuf_r+0x70>
 800735a:	4630      	mov	r0, r6
 800735c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007360:	f000 f81e 	bl	80073a0 <_isatty_r>
 8007364:	b128      	cbz	r0, 8007372 <__smakebuf_r+0x70>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	f023 0303 	bic.w	r3, r3, #3
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	431d      	orrs	r5, r3
 8007376:	81a5      	strh	r5, [r4, #12]
 8007378:	e7cf      	b.n	800731a <__smakebuf_r+0x18>
	...

0800737c <_fstat_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	2300      	movs	r3, #0
 8007380:	4d06      	ldr	r5, [pc, #24]	@ (800739c <_fstat_r+0x20>)
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	4611      	mov	r1, r2
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	f7fa fc8f 	bl	8001cac <_fstat>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	d102      	bne.n	8007398 <_fstat_r+0x1c>
 8007392:	682b      	ldr	r3, [r5, #0]
 8007394:	b103      	cbz	r3, 8007398 <_fstat_r+0x1c>
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	bd38      	pop	{r3, r4, r5, pc}
 800739a:	bf00      	nop
 800739c:	20000ad4 	.word	0x20000ad4

080073a0 <_isatty_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	2300      	movs	r3, #0
 80073a4:	4d05      	ldr	r5, [pc, #20]	@ (80073bc <_isatty_r+0x1c>)
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7fa fc8d 	bl	8001cca <_isatty>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_isatty_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_isatty_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000ad4 	.word	0x20000ad4

080073c0 <_init>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr

080073cc <_fini>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr
